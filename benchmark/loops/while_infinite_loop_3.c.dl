/*(Start()‚àß"cond"=_)@0 ¬∑ ((["cond"=0]@1 ¬∑ ("cond"=0)@2 ¬∑ (reach_error())@3 ¬∑ (abort())@4 ¬∑ (Return(0))@5) \/ ([("cond"!=0)]@6 ¬∑ (("cond"!=0))@7 ¬∑ (Return(0))@8))*/

flow(1,2).
flow(2,3).
flow(3,4).
flow(4,5).
flow(5,5).
flow(6,7).
flow(7,8).
flow(8,8).
Start(0).
NotEq("cond",0,0).
Eq("cond",0,0).
State(1).
Eq("cond",2,0).
State(2).
reach_error(3).
State(3).
abort(4).
State(4).
Return(0,5).
State(5).
State(0).
State(6).
NotEq("cond",7,0).
State(7).
Return(0,8).
State(8).
control_flow(0,1) :- EqD("cond",0,0).
control_flow(0,6) :- NotEqD("cond",0,0).
/*ùùê */


/*("x"=0‚àßStart()‚àß‚ä§)@10 ¬∑ (Return(0))@11*/

flow(10,11).
flow(11,11).
Start(10).
State(10).
Return(0,11).
State(11).

/*ùùê */


/*(Start()‚àß‚ä§)@12 ¬∑ ((("x"=0)@15 ¬∑ (Return(0))@16) \/ ([false]@17 ¬∑ (false)@18 ¬∑ (Return(0))@19))*/

flow(12,15).
flow(15,16).
flow(16,16).
flow(17,18).
flow(18,19).
flow(19,19).
Start(12).
State(15).
Return(0,16).
State(16).
State(12).
State(17).
State(18).
Return(0,19).
State(19).
control_flow(12,17) :- false.
/*(Start()‚àß"x"=_)@26 ¬∑ ((["x"<0]@29 ¬∑ ("x"<0)@30 ¬∑ ("x"=1)@31 ¬∑ ((("x"=0)@32 ¬∑ (Return(0))@33) \/ ((false)@34 ¬∑ (Return(0))@35))) \/ (["x">=0]@36 ¬∑ ("x">=0)@37 ¬∑ (("x"<=0)@38)^w))*/

flow(29,30).
flow(30,31).
flow(31,32).
flow(32,33).
flow(33,33).
flow(31,34).
flow(34,35).
flow(35,35).
flow(36,37).
flow(37,38).
flow(38,38).
Start(26).
// GtEq("x",26,0).
Lt("x",26,0).
State(29).
Lt("x",30,0).
State(30).
GtEq("x",31,0).
GtEq("x",32,0).
State(32).
Return(0,33).
State(33).
State(31).
State(34).
Return(0,35).
State(35).
State(26).
State(36).
GtEq("x",37,0).
State(37).
State(38).
control_flow(26,29) :- LtD("x",26,0).
control_flow(26,36) :- GtEqD("x",26,0).
/*(Return(0)‚àßStart()‚àß‚ä§)@40 ¬∑ ùùê */

flow(40,40).
Return(0,40).
Start(40).
State(40).

//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl abort(n0:number)
.decl eval(n0:number)
.decl reach_error(n0:number)
.decl GtEq(x:symbol,loc:number,n:number)
.decl Lt(x:symbol,loc:number,n:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl GtEqD(x:symbol,loc:number,n:number)
.decl LtD(x:symbol,loc:number,n:number)
.decl NotEqD(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl EXITPred(loc:number)
.decl AF_EXITPred_T(interm_state:number,loc:number)
.decl AF_EXITPred_S(loc:number)
.decl AF_EXITPred(loc:number)
.decl AF_EXITPred_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
GtEqD(x,loc,n) :- GtEq(x,loc,n).
GtEqD(x,loc,n) :- GtEqD(x,locI,n), control_flow(locI,loc), !GtEq(x,loc,n), !Lt(x,loc,n).
LtD(x,loc,n) :- Lt(x,loc,n).
LtD(x,loc,n) :- LtD(x,locI,n), control_flow(locI,loc), !Lt(x,loc,n), !GtEq(x,loc,n).
NotEqD(x,loc,n) :- NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEqD(x,locI,n), control_flow(locI,loc), !NotEq(x,loc,n), !Eq(x,loc,n).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,n), !NotEq(x,loc,n).
EXITPred(loc) :- Return(_,loc).
AF_EXITPred_T(interm_state,loc) :- AF_EXITPred_T(tempOne,loc), !EXITPred(tempOne), control_flow(tempOne,interm_state).
AF_EXITPred_T(interm_state,loc) :- !EXITPred(loc), control_flow(loc,interm_state).
AF_EXITPred_S(loc) :- !EXITPred(loc), control_flow(loc,tempOne), AF_EXITPred_S(tempOne).
AF_EXITPred_S(loc) :- AF_EXITPred_T(loc,loc).
AF_EXITPred(loc) :- State(loc), !AF_EXITPred_S(loc).
AF_EXITPred_Final(loc) :- Start(loc), AF_EXITPred(loc), !NotTotal(loc).
.output GtEq
.output Lt
.output NotEq
.output Eq
.output Start
.output State
.output flow
.output Return
.output abort
.output eval
.output reach_error
.output AF_EXITPred_Final(IO=stdout)

.output NotTotal(IO=stdout)

/* Other information 

//-- Facts for Procedure <__VERIFIER_assert> 

Flow(8,4). //@5:1-6:8
Flow(8,5). //@5:1-6:8
Flow(6,7). //@9:3-10:1
Flow(3,6). //@6:3-9:3
Flow(5,0). //@6:8-7:5
Flow(4,3). //@6:8-6:3
Flow(2,3). //@7:27-6:3
Flow(1,2). //@7:13-7:27
Flow(0,1). //@7:5-7:13
Skip(0,GotoLabel_ERROR,[]).  // @7:5
Stmt_Call(1,_fun_reach_error,[ICall(_fun_reach_error,,n$3)]). // @7:13
Stmt_Call(2,_fun_abort,[ICall(_fun_abort,,n$2)]). // @7:27
PruneNode(4,false,[ILoad(&cond,n$1),Prune(n$1, false)]). // @6:8
PruneNode(5,true,[ILoad(&cond,n$1),Prune(!n$1, true)]). // @6:8
Join(3,[]).  // @6:3
Stmt_Return(6,[]). // @9:3
Exit(7).  // @10:1
Start(8). // @5:1
//-- Facts for Procedure <__assert_fail> 

//-- Facts for Procedure <__infer_globals_initializer_x> 

Flow(8,6). //@12:1-12:1
Flow(6,7). //@12:1-12:7
Stmt_Decl(6,[IStore(&#GB<benchmark/loops/while_infinite_loop_3.c|ice>$x,0)]). // @12:1
Exit(7).  // @12:7
Start(8). // @12:1
//-- Facts for Procedure <abort> 

//-- Facts for Procedure <eval> 

Flow(8,3). //@14:1-16:3
Flow(6,7). //@20:3-21:1
Flow(3,4). //@16:3-16:10
Flow(3,5). //@16:3-16:10
Flow(5,2). //@16:10-17:7
Flow(4,6). //@16:10-20:3
Flow(2,6). //@17:7-20:3
Stmt_BinaryOperatorStmt(2,Assign,[IStore(&#GB<benchmark/loops/while_infinite_loop_3.c|ice>$x,0)]). // @17:7
PruneNode(4,false,[Prune(!1, false)]). // @16:10
PruneNode(5,true,[Prune(1, true)]). // @16:10
Join(3,[]).  // @16:3
Stmt_Return(6,[]). // @20:3
Exit(7).  // @21:1
Start(8). // @14:1
//-- Facts for Procedure <main> 

Flow(8,12). //@24:1-26:3
Flow(6,7). //@34:3-35:1
Flow(3,20). //@32:21-32:3
Flow(5,2). //@32:21-32:21
Flow(5,4). //@32:21-32:21
Flow(4,1). //@32:21-32:21
Flow(2,0). //@32:21-32:21
Flow(1,3). //@32:21-32:21
Flow(0,3). //@32:21-32:21
Flow(20,6). //@32:3-34:3
Flow(12,18). //@26:3-26:9
Flow(12,19). //@26:3-26:9
Flow(19,9). //@26:9-28:5
Flow(18,5). //@26:9-32:21
Flow(14,11). //@29:23-29:5
Flow(10,16). //@29:23-29:23
Flow(10,17). //@29:23-29:23
Flow(17,15). //@29:23-29:23
Flow(16,13). //@29:23-29:23
Flow(15,14). //@29:23-29:23
Flow(13,14). //@29:23-29:23
Flow(11,12). //@29:5-26:3
Flow(9,10). //@28:5-29:23
Stmt_Call(9,_fun_eval,[ICall(_fun_eval,,n$8)]). // @28:5
Stmt_Call(11,_fun___VERIFIER_assert,[ILoad(&0$?%__sil_tmpSIL_temp_conditional___n$4,n$6),ICall(_fun___VERIFIER_assert,n$6,n$7)]). // @29:5
Stmt_ConditionalStmtBranch(13,[IStore(&0$?%__sil_tmpSIL_temp_conditional___n$4,0)]). // @29:23
Stmt_ConditionalStmtBranch(15,[IStore(&0$?%__sil_tmpSIL_temp_conditional___n$4,1)]). // @29:23
PruneNode(16,false,[Prune(!(n$5 == 0), false)]). // @29:23
PruneNode(17,true,[Prune((n$5 == 0), true)]). // @29:23
Stmt_BinaryOperatorStmt(10,EQ,[ILoad(&#GB<benchmark/loops/while_infinite_loop_3.c|ice>$x,n$5)]). // @29:23
Join(14,[]).  // @29:23
PruneNode(18,false,[Prune(!1, false)]). // @26:9
PruneNode(19,true,[Prune(1, true)]). // @26:9
Join(12,[]).  // @26:3
Stmt_Call(20,_fun___VERIFIER_assert,[ILoad(&0$?%__sil_tmpSIL_temp_conditional___n$0,n$2),ICall(_fun___VERIFIER_assert,n$2,n$3)]). // @32:3
Stmt_ConditionalStmtBranch(0,[IStore(&0$?%__sil_tmpSIL_temp_conditional___n$0,0)]). // @32:21
Stmt_ConditionalStmtBranch(1,[IStore(&0$?%__sil_tmpSIL_temp_conditional___n$0,1)]). // @32:21
PruneNode(2,false,[Prune(!(n$1 != 0), false)]). // @32:21
PruneNode(4,true,[Prune((n$1 != 0), true)]). // @32:21
Stmt_BinaryOperatorStmt(5,NE,[ILoad(&#GB<benchmark/loops/while_infinite_loop_3.c|ice>$x,n$1)]). // @32:21
Join(3,[]).  // @32:21
Stmt_Return(6,[IStore(&return,0)]). // @34:3
Exit(7).  // @35:1
Start(8). // @24:1
//-- Facts for Procedure <reach_error> 

Flow(8,6). //@3:1-3:22
Flow(6,7). //@3:22-3:87
PruneNode(6,true,[Prune(0, true)]). // @3:22
Exit(7).  // @3:87
Start(8). // @3:1
*/

