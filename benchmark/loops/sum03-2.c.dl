/*(Start()∧"cond"=_)@0 · ((["cond"=0]@1 · ("cond"=0)@2 · (reach_error())@3 · (abort())@4 · (Return(0))@5) \/ ([("cond"!=0)]@6 · (("cond"!=0))@7 · (Return(0))@8))*/

flow(1,2).
flow(2,3).
flow(3,4).
flow(4,5).
flow(5,5).
flow(6,7).
flow(7,8).
flow(8,8).
Start(0).
NotEq("cond",0,0).
Eq("cond",0,0).
State(1).
Eq("cond",2,0).
State(2).
reach_error(3).
State(3).
abort(4).
State(4).
Return(0,5).
State(5).
State(0).
State(6).
NotEq("cond",7,0).
State(7).
Return(0,8).
State(8).
control_flow(0,1) :- EqD("cond",0,0).
control_flow(0,6) :- NotEqD("cond",0,0).
/*𝝐 */


/*𝝐 */


/*𝝐 */


/*𝝐 */


/*("sn"=0∧Start()∧"sn"=_)@16 · ("loop1"=_)@17 · ("n1"=_)@18 · ("x"=0)@19 · ((["sn"=0]@20 · ("sn"=0)@21 · (Return(0))@22) \/ ([("sn"!=0)]@23 · (("sn"!=0))@24 · (([("sn"!=0)]@27 · (("sn"!=0))@28 · ("sn"=-1)@29 · ("sn"=(-1+2))@30 · ("x"=(0+1))@31 · (Return(0))@32) \/ (["sn"=0]@33 · ("sn"=0)@34 · (("sn">=0)@35)^w))))*/

flow(16,17).
flow(17,18).
flow(18,19).
flow(20,21).
flow(21,22).
flow(22,22).
flow(23,24).
flow(27,28).
flow(28,29).
flow(29,30).
flow(30,31).
flow(31,32).
flow(32,32).
flow(33,34).
flow(34,35).
flow(35,35).
Start(16).
NotEq("sn",16,0).
Eq("sn",16,0).
State(16).
State(17).
State(18).
State(20).
Eq("sn",21,0).
State(21).
Return(0,22).
State(22).
State(19).
State(23).
NotEq("sn",24,0).
State(27).
NotEq("sn",28,0).
State(28).
NotEq("sn",29,0).
State(29).
State(30).
State(31).
Return(0,32).
State(32).
State(24).
State(33).
Eq("sn",34,0).
State(34).
State(35).
control_flow(19,20) :- EqD("sn",19,0).
control_flow(19,23) :- NotEqD("sn",19,0).
control_flow(24,27) :- NotEqD("sn",24,0).
control_flow(24,33) :- EqD("sn",24,0).
/*(Start()∧"0$?%__sil_tmpSIL_temp_conditional___n$1"=_)@36 · (((([("0$?%__sil_tmpSIL_temp_conditional___n$1"!=0)]@37 · (("0$?%__sil_tmpSIL_temp_conditional___n$1"!=0))@38 · (Return(0))@39) \/ (["0$?%__sil_tmpSIL_temp_conditional___n$1"=0]@40 · ("0$?%__sil_tmpSIL_temp_conditional___n$1"=0)@41 · (Return(0))@42))) \/ ([0=0]@43 · (0=0)@44 · (([("0$?%__sil_tmpSIL_temp_conditional___n$1"!=0)]@45 · (("0$?%__sil_tmpSIL_temp_conditional___n$1"!=0))@46 · (Return(0))@47) \/ (["0$?%__sil_tmpSIL_temp_conditional___n$1"=0]@48 · ("0$?%__sil_tmpSIL_temp_conditional___n$1"=0)@49 · (Return(0))@50))))*/

flow(37,38).
flow(38,39).
flow(39,39).
flow(40,41).
flow(41,42).
flow(42,42).
flow(43,44).
flow(45,46).
flow(46,47).
flow(47,47).
flow(48,49).
flow(49,50).
flow(50,50).
Start(36).
NotEq("0$?%__sil_tmpSIL_temp_conditional___n$1",36,0).
Eq("0$?%__sil_tmpSIL_temp_conditional___n$1",36,0).
State(37).
NotEq("0$?%__sil_tmpSIL_temp_conditional___n$1",38,0).
State(38).
Return(0,39).
State(39).
State(40).
Eq("0$?%__sil_tmpSIL_temp_conditional___n$1",41,0).
State(41).
Return(0,42).
State(42).
State(36).
control_flow(36,43).
State(43).
State(45).
NotEq("0$?%__sil_tmpSIL_temp_conditional___n$1",46,0).
State(46).
Return(0,47).
State(47).
State(44).
State(48).
Eq("0$?%__sil_tmpSIL_temp_conditional___n$1",49,0).
State(49).
Return(0,50).
State(50).
control_flow(36,37) :- NotEqD("0$?%__sil_tmpSIL_temp_conditional___n$1",36,0).
control_flow(36,40) :- EqD("0$?%__sil_tmpSIL_temp_conditional___n$1",36,0).
control_flow(44,45) :- NotEqD("0$?%__sil_tmpSIL_temp_conditional___n$1",44,0).
control_flow(44,48) :- EqD("0$?%__sil_tmpSIL_temp_conditional___n$1",44,0).
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl abort(n0:number)
.decl reach_error(n0:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl NotEqD(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl EXITPred(loc:number)
.decl AF_EXITPred_T(interm_state:number,loc:number)
.decl AF_EXITPred_S(loc:number)
.decl AF_EXITPred(loc:number)
.decl AF_EXITPred_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
NotEqD(x,loc,n) :- NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEqD(x,locI,n), control_flow(locI,loc), !NotEq(x,loc,n), !Eq(x,loc,n).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,n), !NotEq(x,loc,n).
EXITPred(loc) :- Return(_,loc).
AF_EXITPred_T(interm_state,loc) :- AF_EXITPred_T(tempOne,loc), !EXITPred(tempOne), control_flow(tempOne,interm_state).
AF_EXITPred_T(interm_state,loc) :- !EXITPred(loc), control_flow(loc,interm_state).
AF_EXITPred_S(loc) :- !EXITPred(loc), control_flow(loc,tempOne), AF_EXITPred_S(tempOne).
AF_EXITPred_S(loc) :- AF_EXITPred_T(loc,loc).
AF_EXITPred(loc) :- State(loc), !AF_EXITPred_S(loc).
AF_EXITPred_Final(loc) :- Start(loc), AF_EXITPred(loc), !NotTotal(loc).
.output NotEq
.output Eq
.output Start
.output State
.output flow
.output Return
.output abort
.output reach_error
.output AF_EXITPred_Final(IO=stdout)

.output NotTotal(IO=stdout)

/* Other information 

//-- Facts for Procedure <__VERIFIER_assert> 

Flow(8,4). //@5:1-6:8
Flow(8,5). //@5:1-6:8
Flow(6,7). //@9:3-10:1
Flow(3,6). //@6:3-9:3
Flow(5,0). //@6:8-7:5
Flow(4,3). //@6:8-6:3
Flow(2,3). //@7:27-6:3
Flow(1,2). //@7:13-7:27
Flow(0,1). //@7:5-7:13
Skip(0,GotoLabel_ERROR,[]).  // @7:5
Stmt_Call(1,_fun_reach_error,[ICall(_fun_reach_error,,n$3)]). // @7:13
Stmt_Call(2,_fun_abort,[ICall(_fun_abort,,n$2)]). // @7:27
PruneNode(4,false,[ILoad(&cond,n$1),Prune(n$1, false)]). // @6:8
PruneNode(5,true,[ILoad(&cond,n$1),Prune(!n$1, true)]). // @6:8
Join(3,[]).  // @6:3
Stmt_Return(6,[]). // @9:3
Exit(7).  // @10:1
Start(8). // @5:1
//-- Facts for Procedure <__VERIFIER_nondet_uint> 

//-- Facts for Procedure <__assert_rtn> 

//-- Facts for Procedure <__builtin_expect> 

//-- Facts for Procedure <abort> 

//-- Facts for Procedure <main> 

Flow(8,9). //@14:1-15:3
Flow(6,5). //@20:3-20:9
Flow(6,3). //@20:3-20:9
Flow(3,18). //@20:9-21:5
Flow(5,7). //@20:9-25:1
Flow(4,20). //@23:23-23:5
Flow(2,0). //@23:23-23:23
Flow(2,1). //@23:23-23:23
Flow(1,22). //@23:23-23:23
Flow(0,25). //@23:23-23:34
Flow(25,23). //@23:34-23:34
Flow(25,24). //@23:34-23:34
Flow(24,22). //@23:34-23:23
Flow(23,21). //@23:34-23:23
Flow(22,4). //@23:23-23:23
Flow(21,4). //@23:23-23:23
Flow(20,6). //@23:5-20:3
Flow(19,2). //@22:5-23:23
Flow(18,19). //@21:5-22:5
Flow(16,6). //@19:3-20:3
Flow(13,15). //@19:7-19:7
Flow(13,17). //@19:7-19:7
Flow(17,14). //@19:7-19:17
Flow(15,16). //@19:7-19:3
Flow(14,7). //@19:17-25:1
Flow(12,13). //@17:3-19:7
Flow(11,12). //@16:3-17:3
Flow(10,11). //@16:3-16:3
Flow(9,10). //@15:3-16:3
Stmt_Decl(9,[IStore(&sn,()0)]). // @15:3
Stmt_Decl(10,[ICall(_fun___VERIFIER_nondet_uint,,n$14),IStore(&loop1,n$14)]). // @16:3
Stmt_Decl(11,[ICall(_fun___VERIFIER_nondet_uint,,n$13),IStore(&n1,n$13)]). // @16:3
Stmt_Decl(12,[IStore(&x,()0)]). // @17:3
Stmt_Return(14,[]). // @19:17
PruneNode(15,false,[Prune(!(n$9 == ()0), false)]). // @19:7
PruneNode(17,true,[Prune((n$9 == ()0), true)]). // @19:7
Stmt_BinaryOperatorStmt(13,EQ,[ILoad(&sn,n$9)]). // @19:7
Join(16,[]).  // @19:3
Stmt_BinaryOperatorStmt(18,Assign,[ILoad(&sn,n$7),IStore(&sn,(n$7 + ()2))]). // @21:5
Stmt_UnaryOperator(19,[ILoad(&x,n$6),IStore(&x,(n$6 + 1))]). // @22:5
Stmt_Call(20,_fun___VERIFIER_assert,[ILoad(&0$?%__sil_tmpSIL_temp_conditional___n$0,n$4),ICall(_fun___VERIFIER_assert,n$4,n$5)]). // @23:5
Stmt_ConditionalStmtBranch(21,[IStore(&0$?%__sil_tmpSIL_temp_conditional___n$0,0)]). // @23:23
Stmt_ConditionalStmtBranch(22,[IStore(&0$?%__sil_tmpSIL_temp_conditional___n$0,1)]). // @23:23
PruneNode(23,false,[Prune(!(n$3 == ()0), false)]). // @23:34
PruneNode(24,true,[Prune((n$3 == ()0), true)]). // @23:34
Stmt_BinaryOperatorStmt(25,EQ,[ILoad(&sn,n$3)]). // @23:34
PruneNode(0,false,[Prune(!(n$1 == (n$2 * ()2)), false)]). // @23:23
PruneNode(1,true,[Prune((n$1 == (n$2 * ()2)), true)]). // @23:23
Stmt_BinaryOperatorStmt(2,EQ,[ILoad(&sn,n$1),ILoad(&x,n$2)]). // @23:23
Join(4,[]).  // @23:23
PruneNode(5,false,[Prune(!1, false)]). // @20:9
PruneNode(3,true,[Prune(1, true)]). // @20:9
Join(6,[]).  // @20:3
Exit(7).  // @25:1
Start(8). // @14:1
//-- Facts for Procedure <reach_error> 

Flow(8,2). //@3:1-3:22
Flow(8,4). //@3:1-3:22
Flow(6,20). //@3:22-3:22
Flow(3,7). //@3:22-3:33
Flow(5,24). //@3:22-3:22
Flow(5,25). //@3:22-3:22
Flow(4,1). //@3:22-3:22
Flow(2,0). //@3:22-3:22
Flow(1,5). //@3:22-3:22
Flow(0,5). //@3:22-3:22
Flow(25,23). //@3:22-3:22
Flow(24,21). //@3:22-3:22
Flow(23,22). //@3:22-3:22
Flow(22,6). //@3:22-3:22
Flow(21,6). //@3:22-3:22
Flow(20,7). //@3:22-3:33
Stmt_CompoundStmt(20,[ILoad(&0$?%__sil_tmpSIL_temp_conditional___n$0,n$5)]). // @3:22
Stmt_ConditionalStmtBranch(21,[ICall(_fun___infer_skip,0,_),IStore(&0$?%__sil_tmpSIL_temp_conditional___n$0,n$4)]). // @3:22
Stmt_ConditionalStmtBranch(22,[IStore(&0$?%__sil_tmpSIL_temp_conditional___n$0,0)]). // @3:22
PruneNode(23,true,[Prune(0, true)]). // @3:22
PruneNode(24,false,[ILoad(&0$?%__sil_tmpSIL_temp_conditional___n$1,n$2),Prune(!n$2, false)]). // @3:22
PruneNode(25,true,[ILoad(&0$?%__sil_tmpSIL_temp_conditional___n$1,n$2),Prune(n$2, true)]). // @3:22
Stmt_ConditionalStmtBranch(0,[IStore(&0$?%__sil_tmpSIL_temp_conditional___n$1,1)]). // @3:22
Stmt_ConditionalStmtBranch(1,[IStore(&0$?%__sil_tmpSIL_temp_conditional___n$1,0)]). // @3:22
PruneNode(2,false,[Prune(!0, false)]). // @3:22
PruneNode(4,true,[Prune(0, true)]). // @3:22
Join(5,[]).  // @3:22
Stmt_BetweenJoinAndExit(3,[]). // @3:22
Join(6,[]).  // @3:22
Exit(7).  // @3:33
Start(8). // @3:1
*/

