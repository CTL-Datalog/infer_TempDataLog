/*(Join())@33*/

flow(33,33).
State(33).

/*(Join())@34*/

flow(34,34).
State(34).

/*(Start())@35 · (overflow=0)@36 · (ret=-1)@37 · (((max_filesize>=0)@38 · (((temp<0)@39 · (overflow=1)@40 · (Join())@41 · (([overflow>0]@42 · (addreply(552))@43 · (Return(-1))@44) \/ ([overflow<=0]@45 · (([ret=0]@46 · (addreply(226))@47 · (Return(-1))@48) \/ ([(ret!=0)]@49 · (addreply(451))@50 · (Return(-1))@51))))) \/ ((temp>=0)@52 · (((temp<0)@53 · (Join())@54 · (([overflow>0]@55 · (addreply(552))@56 · (Return(-1))@57) \/ ([overflow<=0]@58 · (([ret=0]@59 · (addreply(226))@60 · (Return(-1))@61) \/ ([(ret!=0)]@62 · (addreply(451))@63 · (Return(-1))@64))))) \/ ((temp>=0)@65 · (Join())@66 · (([overflow>0]@67 · (addreply(552))@68 · (Return(-1))@69) \/ ([overflow<=0]@70 · (([ret=0]@71 · (addreply(226))@72 · (Return(-1))@73) \/ ([(ret!=0)]@74 · (addreply(451))@75 · (Return(-1))@76))))))))) \/ ((max_filesize<0)@77 · (((temp<0)@78 · (Join())@79 · (([overflow>0]@80 · (addreply(552))@81 · (Return(-1))@82) \/ ([overflow<=0]@83 · (([ret=0]@84 · (addreply(226))@85 · (Return(-1))@86) \/ ([(ret!=0)]@87 · (addreply(451))@88 · (Return(-1))@89))))) \/ ((temp>=0)@90 · (Join())@91 · (([overflow>0]@92 · (addreply(552))@93 · (Return(-1))@94) \/ ([overflow<=0]@95 · (([ret=0]@96 · (addreply(226))@97 · (Return(-1))@98) \/ ([(ret!=0)]@99 · (addreply(451))@100 · (Return(-1))@101))))))))*/

flow(35,36).
flow(36,37).
flow(37,38).
flow(38,39).
flow(39,40).
flow(40,41).
flow(44,44).
flow(48,48).
flow(51,51).
flow(38,52).
flow(52,53).
flow(53,54).
flow(57,57).
flow(61,61).
flow(64,64).
flow(52,65).
flow(65,66).
flow(69,69).
flow(73,73).
flow(76,76).
flow(37,77).
flow(77,78).
flow(78,79).
flow(82,82).
flow(86,86).
flow(89,89).
flow(77,90).
flow(90,91).
flow(94,94).
flow(98,98).
flow(101,101).
Start(35).
State(35).
LtEq("overflow",36,0).
State(36).
NotEq("ret",37,0).
Lt("temp",39,0).
State(39).
Gt("overflow",40,0).
State(40).
State(42).
addreply(552,43).
State(43).
Return(-1,44).
State(44).
State(41).
State(46).
addreply(226,47).
State(47).
Return(-1,48).
State(48).
State(45).
State(49).
addreply(451,50).
State(50).
Return(-1,51).
State(51).
State(38).
Lt("temp",53,0).
State(53).
State(55).
addreply(552,56).
State(56).
Return(-1,57).
State(57).
State(54).
State(59).
addreply(226,60).
State(60).
Return(-1,61).
State(61).
State(58).
State(62).
addreply(451,63).
State(63).
Return(-1,64).
State(64).
State(52).
State(65).
State(67).
addreply(552,68).
State(68).
Return(-1,69).
State(69).
State(66).
State(71).
addreply(226,72).
State(72).
Return(-1,73).
State(73).
State(70).
State(74).
addreply(451,75).
State(75).
Return(-1,76).
State(76).
State(37).
Lt("temp",78,0).
State(78).
State(80).
addreply(552,81).
State(81).
Return(-1,82).
State(82).
State(79).
State(84).
addreply(226,85).
State(85).
Return(-1,86).
State(86).
State(83).
State(87).
addreply(451,88).
State(88).
Return(-1,89).
State(89).
State(77).
State(90).
State(92).
addreply(552,93).
State(93).
Return(-1,94).
State(94).
State(91).
State(96).
addreply(226,97).
State(97).
Return(-1,98).
State(98).
State(95).
State(99).
addreply(451,100).
State(100).
Return(-1,101).
State(101).
control_flow(41,42) :- GtD("overflow",41,0).
control_flow(42,43) :- GtD("overflow",41,0).
control_flow(43,44) :- GtD("overflow",41,0).
control_flow(41,45) :- LtEqD("overflow",41,0).
control_flow(45,46) :- LtEqD("overflow",41,0), EqD("ret",45,0).
control_flow(46,47) :- LtEqD("overflow",41,0), EqD("ret",45,0).
control_flow(47,48) :- LtEqD("overflow",41,0), EqD("ret",45,0).
control_flow(45,49) :- LtEqD("overflow",41,0), NotEqD("ret",45,0).
control_flow(49,50) :- LtEqD("overflow",41,0), NotEqD("ret",45,0).
control_flow(50,51) :- LtEqD("overflow",41,0), NotEqD("ret",45,0).
control_flow(54,55) :- GtD("overflow",54,0).
control_flow(55,56) :- GtD("overflow",54,0).
control_flow(56,57) :- GtD("overflow",54,0).
control_flow(54,58) :- LtEqD("overflow",54,0).
control_flow(58,59) :- LtEqD("overflow",54,0), EqD("ret",58,0).
control_flow(59,60) :- LtEqD("overflow",54,0), EqD("ret",58,0).
control_flow(60,61) :- LtEqD("overflow",54,0), EqD("ret",58,0).
control_flow(58,62) :- LtEqD("overflow",54,0), NotEqD("ret",58,0).
control_flow(62,63) :- LtEqD("overflow",54,0), NotEqD("ret",58,0).
control_flow(63,64) :- LtEqD("overflow",54,0), NotEqD("ret",58,0).
control_flow(66,67) :- GtD("overflow",66,0).
control_flow(67,68) :- GtD("overflow",66,0).
control_flow(68,69) :- GtD("overflow",66,0).
control_flow(66,70) :- LtEqD("overflow",66,0).
control_flow(70,71) :- LtEqD("overflow",66,0), EqD("ret",70,0).
control_flow(71,72) :- LtEqD("overflow",66,0), EqD("ret",70,0).
control_flow(72,73) :- LtEqD("overflow",66,0), EqD("ret",70,0).
control_flow(70,74) :- LtEqD("overflow",66,0), NotEqD("ret",70,0).
control_flow(74,75) :- LtEqD("overflow",66,0), NotEqD("ret",70,0).
control_flow(75,76) :- LtEqD("overflow",66,0), NotEqD("ret",70,0).
control_flow(79,80) :- GtD("overflow",79,0).
control_flow(80,81) :- GtD("overflow",79,0).
control_flow(81,82) :- GtD("overflow",79,0).
control_flow(79,83) :- LtEqD("overflow",79,0).
control_flow(83,84) :- LtEqD("overflow",79,0), EqD("ret",83,0).
control_flow(84,85) :- LtEqD("overflow",79,0), EqD("ret",83,0).
control_flow(85,86) :- LtEqD("overflow",79,0), EqD("ret",83,0).
control_flow(83,87) :- LtEqD("overflow",79,0), NotEqD("ret",83,0).
control_flow(87,88) :- LtEqD("overflow",79,0), NotEqD("ret",83,0).
control_flow(88,89) :- LtEqD("overflow",79,0), NotEqD("ret",83,0).
control_flow(91,92) :- GtD("overflow",91,0).
control_flow(92,93) :- GtD("overflow",91,0).
control_flow(93,94) :- GtD("overflow",91,0).
control_flow(91,95) :- LtEqD("overflow",91,0).
control_flow(95,96) :- LtEqD("overflow",91,0), EqD("ret",95,0).
control_flow(96,97) :- LtEqD("overflow",91,0), EqD("ret",95,0).
control_flow(97,98) :- LtEqD("overflow",91,0), EqD("ret",95,0).
control_flow(95,99) :- LtEqD("overflow",91,0), NotEqD("ret",95,0).
control_flow(99,100) :- LtEqD("overflow",91,0), NotEqD("ret",95,0).
control_flow(100,101) :- LtEqD("overflow",91,0), NotEqD("ret",95,0).
//AG(("temp"<0 => AF("overflow">0)))
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl addreply(n0:number,n1:number)
.decl GtEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl Gt(x:symbol,loc:number,n:number)
.decl Lt(x:symbol,loc:number,n:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl LtD(x:symbol,loc:number,n:number)
.decl NotEqD(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl GtD(x:symbol,loc:number,n:number)
.decl overflow_gt_0(loc:number)
.decl AF_overflow_gt_0_T(interm_state:number,loc:number)
.decl AF_overflow_gt_0_S(loc:number)
.decl AF_overflow_gt_0(loc:number)
.decl temp_lt_0(loc:number)
.decl temp_lt_0_IMPLY_AF_overflow_gt_0(loc:number)
.decl NOT_temp_lt_0_IMPLY_AF_overflow_gt_0(loc:number)
.decl EF_NOT_temp_lt_0_IMPLY_AF_overflow_gt_0(loc:number)
.decl AG_temp_lt_0_IMPLY_AF_overflow_gt_0(loc:number)
.decl AG_temp_lt_0_IMPLY_AF_overflow_gt_0_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
LtD(x,loc,n) :- Lt(x,loc,n).
LtD(x,loc,n) :- LtD(x,locI,n), control_flow(locI,loc), !Lt(x,loc,_), !GtEq(x,loc,_).
NotEqD(x,loc,n) :- NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEqD(x,locI,n), control_flow(locI,loc), !NotEq(x,loc,_), !Eq(x,loc,_).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,_), !NotEq(x,loc,_).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,_), !Gt(x,loc,_).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,_), !LtEq(x,loc,_).
overflow_gt_0(loc) :- State(loc), GtD("overflow",loc,0).
AF_overflow_gt_0_T(interm_state,loc) :- AF_overflow_gt_0_T(tempOne,loc), !overflow_gt_0(tempOne), control_flow(tempOne,interm_state).
AF_overflow_gt_0_T(interm_state,loc) :- !overflow_gt_0(loc), control_flow(loc,interm_state).
AF_overflow_gt_0_S(loc) :- !overflow_gt_0(loc), control_flow(loc,tempOne), AF_overflow_gt_0_S(tempOne).
AF_overflow_gt_0_S(loc) :- AF_overflow_gt_0_T(loc,loc).
AF_overflow_gt_0(loc) :- State(loc), !AF_overflow_gt_0_S(loc).
temp_lt_0(loc) :- State(loc), LtD("temp",loc,0).
temp_lt_0_IMPLY_AF_overflow_gt_0(loc) :- State(loc), !temp_lt_0(loc).
temp_lt_0_IMPLY_AF_overflow_gt_0(loc) :- AF_overflow_gt_0(loc).
NOT_temp_lt_0_IMPLY_AF_overflow_gt_0(loc) :- State(loc), !temp_lt_0_IMPLY_AF_overflow_gt_0(loc).
EF_NOT_temp_lt_0_IMPLY_AF_overflow_gt_0(loc) :- control_flow(loc,tempOne), EF_NOT_temp_lt_0_IMPLY_AF_overflow_gt_0(tempOne).
EF_NOT_temp_lt_0_IMPLY_AF_overflow_gt_0(loc) :- NOT_temp_lt_0_IMPLY_AF_overflow_gt_0(loc).
AG_temp_lt_0_IMPLY_AF_overflow_gt_0(loc) :- State(loc), !EF_NOT_temp_lt_0_IMPLY_AF_overflow_gt_0(loc).
AG_temp_lt_0_IMPLY_AF_overflow_gt_0_Final(loc) :- Start(loc), AG_temp_lt_0_IMPLY_AF_overflow_gt_0(loc), !NotTotal(loc).
.output GtEq
.output Eq
.output Gt
.output Lt
.output NotEq
.output LtEq
.output Start
.output State
.output flow
.output Return
.output addreply
.output AG_temp_lt_0_IMPLY_AF_overflow_gt_0_Final(IO=stdout)

/* Other information 

//-- Facts for Procedure <_nondet_int> 

//-- Facts for Procedure <addreply> 

//-- Facts for Procedure <main> 

Flow(31,0). //@20:1-21:5
Flow(29,30). //@50:5-51:1
Flow(25,29). //@41:5-50:5
Flow(18,27). //@41:9-41:9
Flow(18,28). //@41:9-41:9
Flow(28,26). //@41:9-42:9
Flow(27,24). //@41:9-44:13
Flow(26,25). //@42:9-41:5
Flow(20,25). //@44:9-41:5
Flow(24,22). //@44:13-44:13
Flow(24,23). //@44:13-44:13
Flow(23,21). //@44:13-45:13
Flow(22,19). //@44:13-47:13
Flow(21,20). //@45:13-44:9
Flow(19,20). //@47:13-44:9
Flow(12,18). //@40:5-41:9
Flow(10,12). //@28:5-40:5
Flow(5,16). //@31:9-31:9
Flow(5,17). //@31:9-31:9
Flow(17,15). //@31:9-31:31
Flow(16,9). //@31:9-36:13
Flow(15,13). //@31:31-31:31
Flow(15,14). //@31:31-31:31
Flow(14,11). //@31:31-32:9
Flow(13,9). //@31:31-36:13
Flow(11,12). //@32:9-40:5
Flow(7,10). //@36:9-28:5
Flow(9,6). //@36:13-36:13
Flow(9,8). //@36:13-36:13
Flow(8,7). //@36:13-36:9
Flow(6,7). //@36:13-36:9
Flow(4,5). //@26:5-31:9
Flow(3,4). //@24:5-26:5
Flow(2,3). //@23:5-24:5
Flow(1,2). //@22:5-23:5
Flow(0,1). //@21:5-22:5
Stmt_Decl(0,[IStore(&overflow,0)]). // @21:5
Stmt_Decl(1,[ICall(_fun__nondet_int,,n$18),IStore(&activated,n$18)]). // @22:5
Stmt_Decl(2,[ICall(_fun__nondet_int,,n$17),IStore(&user_quota_size,n$17)]). // @23:5
Stmt_Decl(3,[ICall(_fun__nondet_int,,n$16),IStore(&quota_size,n$16)]). // @24:5
Stmt_Decl(4,[IStore(&ret,-1)]). // @26:5
PruneNode(6,false,[Prune(!(n$11 < 0), false)]). // @36:13
PruneNode(8,true,[Prune((n$11 < 0), true)]). // @36:13
Stmt_BinaryOperatorStmt(9,LT,[ILoad(&#GB<benchmark/protocols/pure-ftpd.c>$temp,n$11)]). // @36:13
Join(7,[]).  // @36:9
Stmt_BinaryOperatorStmt(11,Assign,[IStore(&overflow,1)]). // @32:9
PruneNode(13,false,[Prune(!(n$9 < 0), false)]). // @31:31
PruneNode(14,true,[Prune((n$9 < 0), true)]). // @31:31
Stmt_BinaryOperatorStmt(15,LT,[ILoad(&#GB<benchmark/protocols/pure-ftpd.c>$temp,n$9)]). // @31:31
PruneNode(16,false,[Prune(!(n$8 >= 0), false)]). // @31:9
PruneNode(17,true,[Prune((n$8 >= 0), true)]). // @31:9
Stmt_BinaryOperatorStmt(5,GE,[ILoad(&max_filesize,n$8)]). // @31:9
Join(10,[]).  // @28:5
Skip(12,GotoLabel_afterquota,[]).  // @40:5
Stmt_Call(19,_fun_addreply,[ICall(_fun_addreply,451,n$4)]). // @47:13
Stmt_Call(21,_fun_addreply,[ICall(_fun_addreply,226,n$3)]). // @45:13
PruneNode(22,false,[Prune(!(n$2 == 0), false)]). // @44:13
PruneNode(23,true,[Prune((n$2 == 0), true)]). // @44:13
Stmt_BinaryOperatorStmt(24,EQ,[ILoad(&ret,n$2)]). // @44:13
Join(20,[]).  // @44:9
Stmt_Call(26,_fun_addreply,[ICall(_fun_addreply,552,n$1)]). // @42:9
PruneNode(27,false,[Prune(!(n$0 > 0), false)]). // @41:9
PruneNode(28,true,[Prune((n$0 > 0), true)]). // @41:9
Stmt_BinaryOperatorStmt(18,GT,[ILoad(&overflow,n$0)]). // @41:9
Join(25,[]).  // @41:5
Stmt_Return(29,[IStore(&return,-1)]). // @50:5
Exit(30).  // @51:1
Start(31). // @20:1
*/

