/*𝝐 */


/*𝝐 */


/*(Start())@0 · ("len"=2)@1 · ("peek"=_)@2 · ("type"=23)@3 · ("n"=_)@4 · ("rr"=_)@5 · ((["peek"=0]@6 · ("peek"=0)@7 · ((((("curr_rec"=("curr_rec"+1))@8 · ("rr"=("rr"+1))@9 · ("read_bytes"=("read_bytes"+"n"))@10 · (Return(0))@11) \/ ((([("peek"!=0)]@12 · (("peek"!=0))@13 · ((["n"="&rr.length"]@14 · ("n"="&rr.length")@15 · ("curr_rec"=("curr_rec"+1))@16 · ("rr"=("rr"+1))@17 · ("read_bytes"=("read_bytes"+"n"))@18 · (Return(0))@19) \/ ([("n"!="&rr.length")]@20 · (("n"!="&rr.length"))@21 · ("read_bytes"=("read_bytes"+"n"))@22 · (Return(0))@23))) \/ (["peek"=0]@24 · ("peek"=0)@25 · ("read_bytes"=("read_bytes"+"n"))@26 · (Return(0))@27))))) \/ (((("curr_rec"=("curr_rec"+1))@28 · ("rr"=("rr"+1))@29 · ("read_bytes"=("read_bytes"+"n"))@30 · (Return(0))@31) \/ ((([("peek"!=0)]@32 · (("peek"!=0))@33 · ((["n"="&rr.length"]@34 · ("n"="&rr.length")@35 · ("curr_rec"=("curr_rec"+1))@36 · ("rr"=("rr"+1))@37 · ("read_bytes"=("read_bytes"+"n"))@38 · (Return(0))@39) \/ ([("n"!="&rr.length")]@40 · (("n"!="&rr.length"))@41 · ("read_bytes"=("read_bytes"+"n"))@42 · (Return(0))@43))) \/ (["peek"=0]@44 · ("peek"=0)@45 · ("read_bytes"=("read_bytes"+"n"))@46 · (Return(0))@47))))))) \/ ([("peek"!=0)]@48 · (("peek"!=0))@49 · ((("tem"=0)@50 · ("tem"=1)@51 · ((("curr_rec"=("curr_rec"+1))@52 · ("rr"=("rr"+1))@53 · ("read_bytes"=("read_bytes"+"n"))@54 · (Return(0))@55) \/ ((([("peek"!=0)]@56 · (("peek"!=0))@57 · ((["n"="&rr.length"]@58 · ("n"="&rr.length")@59 · ("curr_rec"=("curr_rec"+1))@60 · ("rr"=("rr"+1))@61 · ("read_bytes"=("read_bytes"+"n"))@62 · (Return(0))@63) \/ ([("n"!="&rr.length")]@64 · (("n"!="&rr.length"))@65 · ("read_bytes"=("read_bytes"+"n"))@66 · (Return(0))@67))) \/ (["peek"=0]@68 · ("peek"=0)@69 · ("read_bytes"=("read_bytes"+"n"))@70 · (Return(0))@71))))) \/ ((("tem"!=0))@72 · ((("curr_rec"=("curr_rec"+1))@73 · ("rr"=("rr"+1))@74 · ("read_bytes"=("read_bytes"+"n"))@75 · (Return(0))@76) \/ ((([("peek"!=0)]@77 · (("peek"!=0))@78 · ((["n"="&rr.length"]@79 · ("n"="&rr.length")@80 · ("curr_rec"=("curr_rec"+1))@81 · ("rr"=("rr"+1))@82 · ("read_bytes"=("read_bytes"+"n"))@83 · (Return(0))@84) \/ ([("n"!="&rr.length")]@85 · (("n"!="&rr.length"))@86 · ("read_bytes"=("read_bytes"+"n"))@87 · (Return(0))@88))) \/ (["peek"=0]@89 · ("peek"=0)@90 · ("read_bytes"=("read_bytes"+"n"))@91 · (Return(0))@92))))))))*/

flow(0,1).
flow(1,2).
flow(2,3).
flow(3,4).
flow(4,5).
flow(6,7).
flow(7,8).
flow(8,9).
flow(9,10).
flow(10,11).
flow(11,11).
flow(12,13).
flow(14,15).
flow(15,16).
flow(16,17).
flow(17,18).
flow(18,19).
flow(19,19).
flow(20,21).
flow(21,22).
flow(22,23).
flow(23,23).
flow(24,25).
flow(25,26).
flow(26,27).
flow(27,27).
flow(7,28).
flow(28,29).
flow(29,30).
flow(30,31).
flow(31,31).
flow(32,33).
flow(34,35).
flow(35,36).
flow(36,37).
flow(37,38).
flow(38,39).
flow(39,39).
flow(40,41).
flow(41,42).
flow(42,43).
flow(43,43).
flow(44,45).
flow(45,46).
flow(46,47).
flow(47,47).
flow(48,49).
flow(49,50).
flow(50,51).
flow(51,52).
flow(52,53).
flow(53,54).
flow(54,55).
flow(55,55).
flow(56,57).
flow(58,59).
flow(59,60).
flow(60,61).
flow(61,62).
flow(62,63).
flow(63,63).
flow(64,65).
flow(65,66).
flow(66,67).
flow(67,67).
flow(68,69).
flow(69,70).
flow(70,71).
flow(71,71).
flow(49,72).
flow(72,73).
flow(73,74).
flow(74,75).
flow(75,76).
flow(76,76).
flow(77,78).
flow(79,80).
flow(80,81).
flow(81,82).
flow(82,83).
flow(83,84).
flow(84,84).
flow(85,86).
flow(86,87).
flow(87,88).
flow(88,88).
flow(89,90).
flow(90,91).
flow(91,92).
flow(92,92).
Start(0).
State(0).
State(1).
NotEq("peek",2,0).
Eq("peek",2,0).
State(2).
State(3).
NotEqVar("n",4,"&rr.length").
EqVar("n",4,"&rr.length").
State(4).
State(6).
Eq("peek",7,0).
State(8).
State(9).
State(10).
Return(0,11).
State(11).
State(12).
NotEq("peek",13,0).
State(14).
EqVar("n",15,"&rr.length").
State(15).
State(16).
State(17).
State(18).
Return(0,19).
State(19).
State(13).
State(20).
NotEqVar("n",21,"&rr.length").
State(21).
State(22).
Return(0,23).
State(23).
State(24).
Eq("peek",25,0).
State(25).
State(26).
Return(0,27).
State(27).
State(28).
State(29).
State(30).
Return(0,31).
State(31).
State(32).
NotEq("peek",33,0).
State(34).
EqVar("n",35,"&rr.length").
State(35).
State(36).
State(37).
State(38).
Return(0,39).
State(39).
State(33).
State(40).
NotEqVar("n",41,"&rr.length").
State(41).
State(42).
Return(0,43).
State(43).
State(7).
State(44).
Eq("peek",45,0).
State(45).
State(46).
Return(0,47).
State(47).
State(5).
State(48).
NotEq("peek",49,0).
Eq("tem",50,0).
State(50).
NotEq("tem",51,0).
State(52).
State(53).
State(54).
Return(0,55).
State(55).
State(56).
NotEq("peek",57,0).
State(58).
EqVar("n",59,"&rr.length").
State(59).
State(60).
State(61).
State(62).
Return(0,63).
State(63).
State(57).
State(64).
NotEqVar("n",65,"&rr.length").
State(65).
State(66).
Return(0,67).
State(67).
State(51).
State(68).
Eq("peek",69,0).
State(69).
State(70).
Return(0,71).
State(71).
State(49).
NotEq("tem",72,0).
State(73).
State(74).
State(75).
Return(0,76).
State(76).
State(77).
NotEq("peek",78,0).
State(79).
EqVar("n",80,"&rr.length").
State(80).
State(81).
State(82).
State(83).
Return(0,84).
State(84).
State(78).
State(85).
NotEqVar("n",86,"&rr.length").
State(86).
State(87).
Return(0,88).
State(88).
State(72).
State(89).
Eq("peek",90,0).
State(90).
State(91).
Return(0,92).
State(92).
control_flow(5,6) :- EqD("peek",5,0).
control_flow(7,12) :- NotEqD("peek",7,0).
control_flow(13,14) :- EqVarD("n",13,"&rr.length").
control_flow(13,20) :- NotEqVarD("n",13,"&rr.length").
control_flow(7,24) :- EqD("peek",7,0).
control_flow(7,32) :- NotEqD("peek",7,0).
control_flow(33,34) :- EqVarD("n",33,"&rr.length").
control_flow(33,40) :- NotEqVarD("n",33,"&rr.length").
control_flow(7,44) :- EqD("peek",7,0).
control_flow(5,48) :- NotEqD("peek",5,0).
control_flow(51,56) :- NotEqD("peek",51,0).
control_flow(57,58) :- EqVarD("n",57,"&rr.length").
control_flow(57,64) :- NotEqVarD("n",57,"&rr.length").
control_flow(51,68) :- EqD("peek",51,0).
control_flow(72,77) :- NotEqD("peek",72,0).
control_flow(78,79) :- EqVarD("n",78,"&rr.length").
control_flow(78,85) :- NotEqVarD("n",78,"&rr.length").
control_flow(72,89) :- EqD("peek",72,0).
//AG(("tem"=0 => AF(SSL3_RECORD_set_read())))
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl SSL3_RECORD_set_read(n0:number)
.decl NotEqVar(x:symbol,loc:number,y:symbol)
.decl EqVar(x:symbol,loc:number,y:symbol)
.decl NotEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl NotEqVarD(x:symbol,loc:number,y:symbol)
.decl EqVarD(x:symbol,loc:number,y:symbol)
.decl NotEqD(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl SSL3_RECORD_set_readPred(loc:number)
.decl AF_SSL3_RECORD_set_readPred_T(interm_state:number,loc:number)
.decl AF_SSL3_RECORD_set_readPred_S(loc:number)
.decl AF_SSL3_RECORD_set_readPred(loc:number)
.decl tem_eq_0(loc:number)
.decl tem_eq_0_IMPLY_AF_SSL3_RECORD_set_readPred(loc:number)
.decl NOT_tem_eq_0_IMPLY_AF_SSL3_RECORD_set_readPred(loc:number)
.decl EF_NOT_tem_eq_0_IMPLY_AF_SSL3_RECORD_set_readPred(loc:number)
.decl AG_tem_eq_0_IMPLY_AF_SSL3_RECORD_set_readPred(loc:number)
.decl AG_tem_eq_0_IMPLY_AF_SSL3_RECORD_set_readPred_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
NotEqVarD(x,loc,n) :- NotEqVar(x,loc,n).
NotEqVarD(x,loc,n) :- NotEqVarD(x,locI,n), control_flow(locI,loc), !NotEqVar(x,loc,n), !EqVar(x,loc,n).
EqVarD(x,loc,n) :- EqVar(x,loc,n).
EqVarD(x,loc,n) :- EqVarD(x,locI,n), control_flow(locI,loc), !EqVar(x,loc,n), !NotEqVar(x,loc,n).
NotEqD(x,loc,n) :- NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEqD(x,locI,n), control_flow(locI,loc), !NotEq(x,loc,n), !Eq(x,loc,n).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,n), !NotEq(x,loc,n).
SSL3_RECORD_set_readPred(loc) :- State(loc), SSL3_RECORD_set_read(loc).
AF_SSL3_RECORD_set_readPred_T(interm_state,loc) :- AF_SSL3_RECORD_set_readPred_T(tempOne,loc), !SSL3_RECORD_set_readPred(tempOne), control_flow(tempOne,interm_state).
AF_SSL3_RECORD_set_readPred_T(interm_state,loc) :- !SSL3_RECORD_set_readPred(loc), control_flow(loc,interm_state).
AF_SSL3_RECORD_set_readPred_S(loc) :- !SSL3_RECORD_set_readPred(loc), control_flow(loc,tempOne), AF_SSL3_RECORD_set_readPred_S(tempOne).
AF_SSL3_RECORD_set_readPred_S(loc) :- AF_SSL3_RECORD_set_readPred_T(loc,loc).
AF_SSL3_RECORD_set_readPred(loc) :- State(loc), !AF_SSL3_RECORD_set_readPred_S(loc).
tem_eq_0(loc) :- State(loc), EqD("tem",loc,0).
tem_eq_0_IMPLY_AF_SSL3_RECORD_set_readPred(loc) :- State(loc), !tem_eq_0(loc).
tem_eq_0_IMPLY_AF_SSL3_RECORD_set_readPred(loc) :- AF_SSL3_RECORD_set_readPred(loc).
NOT_tem_eq_0_IMPLY_AF_SSL3_RECORD_set_readPred(loc) :- State(loc), !tem_eq_0_IMPLY_AF_SSL3_RECORD_set_readPred(loc).
EF_NOT_tem_eq_0_IMPLY_AF_SSL3_RECORD_set_readPred(loc) :- control_flow(loc,tempOne), EF_NOT_tem_eq_0_IMPLY_AF_SSL3_RECORD_set_readPred(tempOne).
EF_NOT_tem_eq_0_IMPLY_AF_SSL3_RECORD_set_readPred(loc) :- NOT_tem_eq_0_IMPLY_AF_SSL3_RECORD_set_readPred(loc).
AG_tem_eq_0_IMPLY_AF_SSL3_RECORD_set_readPred(loc) :- State(loc), !EF_NOT_tem_eq_0_IMPLY_AF_SSL3_RECORD_set_readPred(loc).
AG_tem_eq_0_IMPLY_AF_SSL3_RECORD_set_readPred_Final(loc) :- Start(loc), AG_tem_eq_0_IMPLY_AF_SSL3_RECORD_set_readPred(loc), !NotTotal(loc).
.output NotEqVar
.output EqVar
.output NotEq
.output Eq
.output Start
.output State
.output flow
.output Return
.output AG_tem_eq_0_IMPLY_AF_SSL3_RECORD_set_readPred_Final(IO=stdout)

.output NotTotal(IO=stdout)

