/*(Join())@27*/

flow(27,27).
State(27).

/*(Join())@28*/

flow(28,28).
State(28).

/*(Start())@29 · (overflow=0)@30 · (max_filesize=-1)@31 · (ret=-1)@32 · (((temp<0)@33 · (overflow=1)@34 · (Join())@35 · (([overflow>0]@36 · (addreply(552))@37 · (Return(-1))@38) \/ ([overflow<=0]@39 · (([ret=0]@40 · (addreply(226))@41 · (Return(-1))@42) \/ ([(ret!=0)]@43 · (addreply(451))@44 · (Return(-1))@45))))) \/ ((temp>=0)@46 · (Join())@47 · (([overflow>0]@48 · (addreply(552))@49 · (Return(-1))@50) \/ ([overflow<=0]@51 · (([ret=0]@52 · (addreply(226))@53 · (Return(-1))@54) \/ ([(ret!=0)]@55 · (addreply(451))@56 · (Return(-1))@57))))))*/

flow(29,30).
flow(30,31).
flow(31,32).
flow(32,33).
flow(33,34).
flow(34,35).
flow(38,38).
flow(42,42).
flow(45,45).
flow(32,46).
flow(46,47).
flow(50,50).
flow(54,54).
flow(57,57).
Start(29).
State(29).
LtEq("overflow",30,0).
State(30).
State(31).
NotEq("ret",32,0).
Lt("temp",33,0).
State(33).
Gt("overflow",34,0).
State(34).
State(36).
addreply(552,37).
State(37).
Return(-1,38).
State(38).
State(35).
State(40).
addreply(226,41).
State(41).
Return(-1,42).
State(42).
State(39).
State(43).
addreply(451,44).
State(44).
Return(-1,45).
State(45).
State(32).
State(46).
State(48).
addreply(552,49).
State(49).
Return(-1,50).
State(50).
State(47).
State(52).
addreply(226,53).
State(53).
Return(-1,54).
State(54).
State(51).
State(55).
addreply(451,56).
State(56).
Return(-1,57).
State(57).
control_flow(35,36) :- GtD("overflow",35,0).
control_flow(36,37) :- GtD("overflow",35,0).
control_flow(37,38) :- GtD("overflow",35,0).
control_flow(35,39) :- LtEqD("overflow",35,0).
control_flow(39,40) :- LtEqD("overflow",35,0), EqD("ret",39,0).
control_flow(40,41) :- LtEqD("overflow",35,0), EqD("ret",39,0).
control_flow(41,42) :- LtEqD("overflow",35,0), EqD("ret",39,0).
control_flow(39,43) :- LtEqD("overflow",35,0), NotEqD("ret",39,0).
control_flow(43,44) :- LtEqD("overflow",35,0), NotEqD("ret",39,0).
control_flow(44,45) :- LtEqD("overflow",35,0), NotEqD("ret",39,0).
control_flow(47,48) :- GtD("overflow",47,0).
control_flow(48,49) :- GtD("overflow",47,0).
control_flow(49,50) :- GtD("overflow",47,0).
control_flow(47,51) :- LtEqD("overflow",47,0).
control_flow(51,52) :- LtEqD("overflow",47,0), EqD("ret",51,0).
control_flow(52,53) :- LtEqD("overflow",47,0), EqD("ret",51,0).
control_flow(53,54) :- LtEqD("overflow",47,0), EqD("ret",51,0).
control_flow(51,55) :- LtEqD("overflow",47,0), NotEqD("ret",51,0).
control_flow(55,56) :- LtEqD("overflow",47,0), NotEqD("ret",51,0).
control_flow(56,57) :- LtEqD("overflow",47,0), NotEqD("ret",51,0).
//AG(("temp"<0 => AF("overflow">0)))
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl addreply(n0:number,n1:number)
.decl GtEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl Gt(x:symbol,loc:number,n:number)
.decl Lt(x:symbol,loc:number,n:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl LtD(x:symbol,loc:number,n:number)
.decl NotEqD(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl GtD(x:symbol,loc:number,n:number)
.decl overflow_gt_0(loc:number)
.decl AF_overflow_gt_0_T(interm_state:number,loc:number)
.decl AF_overflow_gt_0_S(loc:number)
.decl AF_overflow_gt_0(loc:number)
.decl temp_lt_0(loc:number)
.decl temp_lt_0_IMPLY_AF_overflow_gt_0(loc:number)
.decl NOT_temp_lt_0_IMPLY_AF_overflow_gt_0(loc:number)
.decl EF_NOT_temp_lt_0_IMPLY_AF_overflow_gt_0(loc:number)
.decl AG_temp_lt_0_IMPLY_AF_overflow_gt_0(loc:number)
.decl AG_temp_lt_0_IMPLY_AF_overflow_gt_0_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
LtD(x,loc,n) :- Lt(x,loc,n).
LtD(x,loc,n) :- LtD(x,locI,n), control_flow(locI,loc), !Lt(x,loc,_), !GtEq(x,loc,_).
NotEqD(x,loc,n) :- NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEqD(x,locI,n), control_flow(locI,loc), !NotEq(x,loc,_), !Eq(x,loc,_).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,_), !NotEq(x,loc,_).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,_), !Gt(x,loc,_).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,_), !LtEq(x,loc,_).
overflow_gt_0(loc) :- State(loc), GtD("overflow",loc,0).
AF_overflow_gt_0_T(interm_state,loc) :- AF_overflow_gt_0_T(tempOne,loc), !overflow_gt_0(tempOne), control_flow(tempOne,interm_state).
AF_overflow_gt_0_T(interm_state,loc) :- !overflow_gt_0(loc), control_flow(loc,interm_state).
AF_overflow_gt_0_S(loc) :- !overflow_gt_0(loc), control_flow(loc,tempOne), AF_overflow_gt_0_S(tempOne).
AF_overflow_gt_0_S(loc) :- AF_overflow_gt_0_T(loc,loc).
AF_overflow_gt_0(loc) :- State(loc), !AF_overflow_gt_0_S(loc).
temp_lt_0(loc) :- State(loc), LtD("temp",loc,0).
temp_lt_0_IMPLY_AF_overflow_gt_0(loc) :- State(loc), !temp_lt_0(loc).
temp_lt_0_IMPLY_AF_overflow_gt_0(loc) :- AF_overflow_gt_0(loc).
NOT_temp_lt_0_IMPLY_AF_overflow_gt_0(loc) :- State(loc), !temp_lt_0_IMPLY_AF_overflow_gt_0(loc).
EF_NOT_temp_lt_0_IMPLY_AF_overflow_gt_0(loc) :- control_flow(loc,tempOne), EF_NOT_temp_lt_0_IMPLY_AF_overflow_gt_0(tempOne).
EF_NOT_temp_lt_0_IMPLY_AF_overflow_gt_0(loc) :- NOT_temp_lt_0_IMPLY_AF_overflow_gt_0(loc).
AG_temp_lt_0_IMPLY_AF_overflow_gt_0(loc) :- State(loc), !EF_NOT_temp_lt_0_IMPLY_AF_overflow_gt_0(loc).
AG_temp_lt_0_IMPLY_AF_overflow_gt_0_Final(loc) :- Start(loc), AG_temp_lt_0_IMPLY_AF_overflow_gt_0(loc), !NotTotal(loc).
.output GtEq
.output Eq
.output Gt
.output Lt
.output NotEq
.output LtEq
.output Start
.output State
.output flow
.output Return
.output addreply
.output AG_temp_lt_0_IMPLY_AF_overflow_gt_0_Final(IO=stdout)

/* Other information 

//-- Facts for Procedure <_nondet_int> 

//-- Facts for Procedure <addreply> 

//-- Facts for Procedure <main> 

Flow(25,0). //@20:1-21:5
Flow(23,24). //@46:5-47:1
Flow(19,23). //@37:5-46:5
Flow(12,21). //@37:9-37:9
Flow(12,22). //@37:9-37:9
Flow(22,20). //@37:9-38:9
Flow(21,18). //@37:9-40:13
Flow(20,19). //@38:9-37:5
Flow(14,19). //@40:9-37:5
Flow(18,16). //@40:13-40:13
Flow(18,17). //@40:13-40:13
Flow(17,15). //@40:13-41:13
Flow(16,13). //@40:13-43:13
Flow(15,14). //@41:13-40:9
Flow(13,14). //@43:13-40:9
Flow(8,12). //@36:5-37:9
Flow(10,8). //@28:5-36:5
Flow(6,9). //@31:9-31:9
Flow(6,11). //@31:9-31:9
Flow(11,7). //@31:9-32:9
Flow(9,10). //@31:9-28:5
Flow(7,8). //@32:9-36:5
Flow(5,6). //@26:5-31:9
Flow(4,5). //@25:5-26:5
Flow(3,4). //@24:5-25:5
Flow(2,3). //@23:5-24:5
Flow(1,2). //@22:5-23:5
Flow(0,1). //@21:5-22:5
Stmt_Decl(0,[IStore(&overflow,0)]). // @21:5
Stmt_Decl(1,[ICall(_fun__nondet_int,,n$14),IStore(&activated,n$14)]). // @22:5
Stmt_Decl(2,[ICall(_fun__nondet_int,,n$13),IStore(&user_quota_size,n$13)]). // @23:5
Stmt_Decl(3,[ICall(_fun__nondet_int,,n$12),IStore(&quota_size,n$12)]). // @24:5
Stmt_Decl(4,[IStore(&max_filesize,-1)]). // @25:5
Stmt_Decl(5,[IStore(&ret,-1)]). // @26:5
Stmt_BinaryOperatorStmt(7,Assign,[IStore(&overflow,1)]). // @32:9
PruneNode(9,false,[Prune(!(n$8 < 0), false)]). // @31:9
PruneNode(11,true,[Prune((n$8 < 0), true)]). // @31:9
Stmt_BinaryOperatorStmt(6,LT,[ILoad(&#GB<benchmark/protocols/pure-ftpd_T.c>$temp,n$8)]). // @31:9
Join(10,[]).  // @28:5
Skip(8,GotoLabel_afterquota,[]).  // @36:5
Stmt_Call(13,_fun_addreply,[ICall(_fun_addreply,451,n$4)]). // @43:13
Stmt_Call(15,_fun_addreply,[ICall(_fun_addreply,226,n$3)]). // @41:13
PruneNode(16,false,[Prune(!(n$2 == 0), false)]). // @40:13
PruneNode(17,true,[Prune((n$2 == 0), true)]). // @40:13
Stmt_BinaryOperatorStmt(18,EQ,[ILoad(&ret,n$2)]). // @40:13
Join(14,[]).  // @40:9
Stmt_Call(20,_fun_addreply,[ICall(_fun_addreply,552,n$1)]). // @38:9
PruneNode(21,false,[Prune(!(n$0 > 0), false)]). // @37:9
PruneNode(22,true,[Prune((n$0 > 0), true)]). // @37:9
Stmt_BinaryOperatorStmt(12,GT,[ILoad(&overflow,n$0)]). // @37:9
Join(19,[]).  // @37:5
Stmt_Return(23,[IStore(&return,-1)]). // @46:5
Exit(24).  // @47:1
Start(25). // @20:1
*/

