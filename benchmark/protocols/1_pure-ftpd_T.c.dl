/*𝝐 */


/*𝝐 */


/*(Start())@0 · ("overflow"=0)@1 · ("activated"=_)@2 · ("user_quota_size"=_)@3 · ("quota_size"=_)@4 · ("max_filesize"=-1)@5 · ("ret"=-1)@6 · ((("temp"<0)@7 · ("overflow"=1)@8 · ((["overflow">0]@9 · ("overflow">0)@10 · (addreply(552))@11 · (Return(-1))@12) \/ (["overflow"<=0]@13 · ("overflow"<=0)@14 · ((["ret"=0]@15 · ("ret"=0)@16 · (addreply(226))@17 · (Return(-1))@18) \/ ([("ret"!=0)]@19 · (("ret"!=0))@20 · (addreply(451))@21 · (Return(-1))@22))))) \/ (("temp">=0)@23 · ((["overflow">0]@24 · ("overflow">0)@25 · (addreply(552))@26 · (Return(-1))@27) \/ (["overflow"<=0]@28 · ("overflow"<=0)@29 · ((["ret"=0]@30 · ("ret"=0)@31 · (addreply(226))@32 · (Return(-1))@33) \/ ([("ret"!=0)]@34 · (("ret"!=0))@35 · (addreply(451))@36 · (Return(-1))@37))))))*/

flow(0,1).
flow(1,2).
flow(2,3).
flow(3,4).
flow(4,5).
flow(5,6).
flow(6,7).
flow(7,8).
flow(9,10).
flow(10,11).
flow(11,12).
flow(12,12).
flow(13,14).
flow(15,16).
flow(16,17).
flow(17,18).
flow(18,18).
flow(19,20).
flow(20,21).
flow(21,22).
flow(22,22).
flow(6,23).
flow(24,25).
flow(25,26).
flow(26,27).
flow(27,27).
flow(28,29).
flow(30,31).
flow(31,32).
flow(32,33).
flow(33,33).
flow(34,35).
flow(35,36).
flow(36,37).
flow(37,37).
Start(0).
State(0).
LtEq("overflow",1,0).
State(1).
State(2).
State(3).
State(4).
State(5).
NotEq("ret",6,0).
Lt("temp",7,0).
State(7).
Gt("overflow",8,0).
State(9).
Gt("overflow",10,0).
State(10).
addreply(552,11).
State(11).
Return(-1,12).
State(12).
State(8).
State(13).
LtEq("overflow",14,0).
State(15).
Eq("ret",16,0).
State(16).
addreply(226,17).
State(17).
Return(-1,18).
State(18).
State(14).
State(19).
NotEq("ret",20,0).
State(20).
addreply(451,21).
State(21).
Return(-1,22).
State(22).
State(6).
State(24).
Gt("overflow",25,0).
State(25).
addreply(552,26).
State(26).
Return(-1,27).
State(27).
State(23).
State(28).
LtEq("overflow",29,0).
State(30).
Eq("ret",31,0).
State(31).
addreply(226,32).
State(32).
Return(-1,33).
State(33).
State(29).
State(34).
NotEq("ret",35,0).
State(35).
addreply(451,36).
State(36).
Return(-1,37).
State(37).
control_flow(8,9) :- GtD("overflow",8,0).
control_flow(8,13) :- LtEqD("overflow",8,0).
control_flow(14,15) :- EqD("ret",14,0).
control_flow(14,19) :- NotEqD("ret",14,0).
control_flow(23,24) :- GtD("overflow",23,0).
control_flow(23,28) :- LtEqD("overflow",23,0).
control_flow(29,30) :- EqD("ret",29,0).
control_flow(29,34) :- NotEqD("ret",29,0).
//AG(("temp"<0 => AF("overflow">0)))
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl addreply(n0:number,n1:number)
.decl GtEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl Gt(x:symbol,loc:number,n:number)
.decl Lt(x:symbol,loc:number,n:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl LtD(x:symbol,loc:number,n:number)
.decl NotEqD(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl GtD(x:symbol,loc:number,n:number)
.decl overflow_gt_0(loc:number)
.decl AF_overflow_gt_0_T(interm_state:number,loc:number)
.decl AF_overflow_gt_0_S(loc:number)
.decl AF_overflow_gt_0(loc:number)
.decl temp_lt_0(loc:number)
.decl temp_lt_0_IMPLY_AF_overflow_gt_0(loc:number)
.decl NOT_temp_lt_0_IMPLY_AF_overflow_gt_0(loc:number)
.decl EF_NOT_temp_lt_0_IMPLY_AF_overflow_gt_0(loc:number)
.decl AG_temp_lt_0_IMPLY_AF_overflow_gt_0(loc:number)
.decl AG_temp_lt_0_IMPLY_AF_overflow_gt_0_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
LtD(x,loc,n) :- Lt(x,loc,n).
LtD(x,loc,n) :- LtD(x,locI,n), control_flow(locI,loc), !Lt(x,loc,n), !GtEq(x,loc,n).
NotEqD(x,loc,n) :- NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEqD(x,locI,n), control_flow(locI,loc), !NotEq(x,loc,n), !Eq(x,loc,n).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,n), !NotEq(x,loc,n).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,n), !Gt(x,loc,n).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,n), !LtEq(x,loc,n).
overflow_gt_0(loc) :- State(loc), GtD("overflow",loc,0).
AF_overflow_gt_0_T(interm_state,loc) :- AF_overflow_gt_0_T(tempOne,loc), !overflow_gt_0(tempOne), control_flow(tempOne,interm_state).
AF_overflow_gt_0_T(interm_state,loc) :- !overflow_gt_0(loc), control_flow(loc,interm_state).
AF_overflow_gt_0_S(loc) :- !overflow_gt_0(loc), control_flow(loc,tempOne), AF_overflow_gt_0_S(tempOne).
AF_overflow_gt_0_S(loc) :- AF_overflow_gt_0_T(loc,loc).
AF_overflow_gt_0(loc) :- State(loc), !AF_overflow_gt_0_S(loc).
temp_lt_0(loc) :- State(loc), LtD("temp",loc,0).
temp_lt_0_IMPLY_AF_overflow_gt_0(loc) :- State(loc), !temp_lt_0(loc).
temp_lt_0_IMPLY_AF_overflow_gt_0(loc) :- AF_overflow_gt_0(loc).
NOT_temp_lt_0_IMPLY_AF_overflow_gt_0(loc) :- State(loc), !temp_lt_0_IMPLY_AF_overflow_gt_0(loc).
EF_NOT_temp_lt_0_IMPLY_AF_overflow_gt_0(loc) :- control_flow(loc,tempOne), EF_NOT_temp_lt_0_IMPLY_AF_overflow_gt_0(tempOne).
EF_NOT_temp_lt_0_IMPLY_AF_overflow_gt_0(loc) :- NOT_temp_lt_0_IMPLY_AF_overflow_gt_0(loc).
AG_temp_lt_0_IMPLY_AF_overflow_gt_0(loc) :- State(loc), !EF_NOT_temp_lt_0_IMPLY_AF_overflow_gt_0(loc).
AG_temp_lt_0_IMPLY_AF_overflow_gt_0_Final(loc) :- Start(loc), AG_temp_lt_0_IMPLY_AF_overflow_gt_0(loc), !NotTotal(loc).
.output GtEq
.output Eq
.output Gt
.output Lt
.output NotEq
.output LtEq
.output Start
.output State
.output flow
.output Return
.output addreply
.output AG_temp_lt_0_IMPLY_AF_overflow_gt_0_Final(IO=stdout)

.output NotTotal(IO=stdout)

