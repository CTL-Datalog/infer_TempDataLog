/*(Start())@0 · ((("tmp">1)@1 · ("parseSucceeded"=1)@2 · ((["parseSucceeded"=0]@3 · ("parseSucceeded"=0)@4 · (Return(0))@5) \/ ([("parseSucceeded"!=0)]@6 · (("parseSucceeded"!=0))@7 · (Return(0))@8))) \/ (("tmp"<=1)@9 · ("parseSucceeded"=1)@10 · ((["parseSucceeded"=0]@11 · ("parseSucceeded"=0)@12 · (Return(0))@13) \/ ([("parseSucceeded"!=0)]@14 · (("parseSucceeded"!=0))@15 · (Return(0))@16))))*/

flow(0,1).
flow(1,2).
flow(3,4).
flow(4,5).
flow(5,5).
flow(6,7).
flow(7,8).
flow(8,8).
flow(0,9).
flow(9,10).
flow(11,12).
flow(12,13).
flow(13,13).
flow(14,15).
flow(15,16).
flow(16,16).
Start(0).
Gt("tmp",1,1).
State(1).
NotEq("parseSucceeded",2,0).
State(3).
Eq("parseSucceeded",4,0).
State(4).
Return(0,5).
State(5).
State(2).
State(6).
NotEq("parseSucceeded",7,0).
State(7).
Return(0,8).
State(8).
State(0).
LtEq("tmp",9,1).
State(9).
Eq("parseSucceeded",10,0).
State(11).
Eq("parseSucceeded",12,0).
State(12).
Return(0,13).
State(13).
State(10).
State(14).
NotEq("parseSucceeded",15,0).
State(15).
Return(0,16).
State(16).
control_flow(2,3) :- EqD("parseSucceeded",2,0).
control_flow(2,6) :- NotEqD("parseSucceeded",2,0).
control_flow(10,11) :- EqD("parseSucceeded",10,0).
control_flow(10,14) :- NotEqD("parseSucceeded",10,0).
//AG(("tmp"<=1 => AF("parseSucceeded"=0)))
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl Gt(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl NotEqD(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl parseSucceeded_eq_0(loc:number)
.decl AF_parseSucceeded_eq_0_T(interm_state:number,loc:number)
.decl AF_parseSucceeded_eq_0_S(loc:number)
.decl AF_parseSucceeded_eq_0(loc:number)
.decl tmp_lteq_1(loc:number)
.decl tmp_lteq_1_IMPLY_AF_parseSucceeded_eq_0(loc:number)
.decl NOT_tmp_lteq_1_IMPLY_AF_parseSucceeded_eq_0(loc:number)
.decl EF_NOT_tmp_lteq_1_IMPLY_AF_parseSucceeded_eq_0(loc:number)
.decl AG_tmp_lteq_1_IMPLY_AF_parseSucceeded_eq_0(loc:number)
.decl AG_tmp_lteq_1_IMPLY_AF_parseSucceeded_eq_0_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,n), !Gt(x,loc,n).
NotEqD(x,loc,n) :- NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEqD(x,locI,n), control_flow(locI,loc), !NotEq(x,loc,n), !Eq(x,loc,n).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,n), !NotEq(x,loc,n).
parseSucceeded_eq_0(loc) :- State(loc), EqD("parseSucceeded",loc,0).
AF_parseSucceeded_eq_0_T(interm_state,loc) :- AF_parseSucceeded_eq_0_T(tempOne,loc), !parseSucceeded_eq_0(tempOne), control_flow(tempOne,interm_state).
AF_parseSucceeded_eq_0_T(interm_state,loc) :- !parseSucceeded_eq_0(loc), control_flow(loc,interm_state).
AF_parseSucceeded_eq_0_S(loc) :- !parseSucceeded_eq_0(loc), control_flow(loc,tempOne), AF_parseSucceeded_eq_0_S(tempOne).
AF_parseSucceeded_eq_0_S(loc) :- AF_parseSucceeded_eq_0_T(loc,loc).
AF_parseSucceeded_eq_0(loc) :- State(loc), !AF_parseSucceeded_eq_0_S(loc).
tmp_lteq_1(loc) :- State(loc), LtEqD("tmp",loc,1).
tmp_lteq_1_IMPLY_AF_parseSucceeded_eq_0(loc) :- State(loc), !tmp_lteq_1(loc).
tmp_lteq_1_IMPLY_AF_parseSucceeded_eq_0(loc) :- AF_parseSucceeded_eq_0(loc).
NOT_tmp_lteq_1_IMPLY_AF_parseSucceeded_eq_0(loc) :- State(loc), !tmp_lteq_1_IMPLY_AF_parseSucceeded_eq_0(loc).
EF_NOT_tmp_lteq_1_IMPLY_AF_parseSucceeded_eq_0(loc) :- control_flow(loc,tempOne), EF_NOT_tmp_lteq_1_IMPLY_AF_parseSucceeded_eq_0(tempOne).
EF_NOT_tmp_lteq_1_IMPLY_AF_parseSucceeded_eq_0(loc) :- NOT_tmp_lteq_1_IMPLY_AF_parseSucceeded_eq_0(loc).
AG_tmp_lteq_1_IMPLY_AF_parseSucceeded_eq_0(loc) :- State(loc), !EF_NOT_tmp_lteq_1_IMPLY_AF_parseSucceeded_eq_0(loc).
AG_tmp_lteq_1_IMPLY_AF_parseSucceeded_eq_0_Final(loc) :- Start(loc), AG_tmp_lteq_1_IMPLY_AF_parseSucceeded_eq_0(loc), !NotTotal(loc).
.output LtEq
.output Eq
.output NotEq
.output Gt
.output Start
.output State
.output flow
.output Return
.output AG_tmp_lteq_1_IMPLY_AF_parseSucceeded_eq_0_Final(IO=stdout)

.output NotTotal(IO=stdout)

