/*ùùê */


/*(Start())@0 ¬∑ ("flag"=0)@1 ¬∑ ("i"=_)@2 ¬∑ ((["flag"=1]@3 ¬∑ ("flag"=1)@4 ¬∑ (Return(0))@5) \/ ([("flag"!=1)]@6 ¬∑ (("flag"!=1))@7 ¬∑ ((["i"=0]@8 ¬∑ ("i"=0)@9 ¬∑ ("flag"=1)@10 ¬∑ (Return(0))@11) \/ ([("i"!=0)]@12 ¬∑ (("i"!=0))@13 ¬∑ ((["i"<0]@14 ¬∑ ("i"<0)@15 ¬∑ (Return(0))@16) \/ (["i">=0]@17 ¬∑ ("i">=0)@18 ¬∑ (Return(0))@19))))))*/

flow(0,1).
flow(1,2).
flow(3,4).
flow(4,5).
flow(5,5).
flow(6,7).
flow(8,9).
flow(9,10).
flow(10,11).
flow(11,11).
flow(12,13).
flow(14,15).
flow(15,16).
flow(16,16).
flow(17,18).
flow(18,19).
flow(19,19).
Start(0).
State(0).
NotEq("flag",1,1).
State(1).
NotEq("i",2,0).
Eq("i",2,0).
State(3).
Eq("flag",4,1).
State(4).
Return(0,5).
State(5).
State(2).
State(6).
NotEq("flag",7,1).
State(8).
Eq("i",9,0).
GtEq("i",9,0).
State(9).
Eq("flag",10,1).
State(10).
Return(0,11).
State(11).
State(7).
State(12).
NotEq("i",13,0).
State(14).
Lt("i",15,0).
NotEq("i",15,0).
State(15).
Return(0,16).
State(16).
State(13).
State(17).
GtEq("i",18,0).
State(18).
Return(0,19).
State(19).
control_flow(2,3) :- EqD("flag",2,1).
control_flow(2,6) :- NotEqD("flag",2,1).
control_flow(7,8) :- EqD("i",7,0).
control_flow(7,12) :- NotEqD("i",7,0).
control_flow(13,14) :- LtD("i",13,0).
control_flow(13,17) :- GtEqD("i",13,0).
/*(Start())@24 ¬∑ ("b"=_)@25 ¬∑ ("end"=_)@26 ¬∑ ((["b"<0]@27 ¬∑ ("b"<0)@28 ¬∑ (Return(0))@29) \/ (["b">=0]@30 ¬∑ ("b">=0)@31 ¬∑ ((["end"<0]@32 ¬∑ ("end"<0)@33 ¬∑ (Return(0))@34) \/ (["end">=0]@35 ¬∑ ("end">=0)@36 ¬∑ ((["b">="end"]@37 ¬∑ ("b">="end")@38 ¬∑ (Return(0))@39) \/ (["b"<"end"]@40 ¬∑ ("b"<"end")@41 ¬∑ [‚ä•]@42 ¬∑ (‚ä•)@43 ¬∑ (("inc">=0)@44)^w))))))*/

flow(24,25).
flow(25,26).
flow(27,28).
flow(28,29).
flow(29,29).
flow(30,31).
flow(32,33).
flow(33,34).
flow(34,34).
flow(35,36).
flow(37,38).
flow(38,39).
flow(39,39).
flow(40,41).
flow(42,43).
flow(43,44).
flow(44,44).
Start(24).
State(24).
GtEq("b",25,0).
Lt("b",25,0).
State(25).
GtEq("end",26,0).
Lt("end",26,0).
State(27).
Lt("b",28,0).
State(28).
Return(0,29).
State(29).
State(26).
State(30).
GtEq("b",31,0).
State(32).
Lt("end",33,0).
State(33).
Return(0,34).
State(34).
State(31).
State(35).
GtEq("end",36,0).
State(37).
GtEqVar("b",38,"end").
State(38).
Return(0,39).
State(39).
State(36).
State(40).
LtVar("b",41,"end").
State(41).
control_flow(41,42).
State(42).
State(43).
State(44).
control_flow(26,27) :- LtD("b",26,0).
control_flow(26,30) :- GtEqD("b",26,0).
control_flow(31,32) :- LtD("end",31,0).
control_flow(31,35) :- GtEqD("end",31,0).
control_flow(36,37) :- GtEqVarD("b",36,"end").
control_flow(36,40) :- LtVarD("b",36,"end").
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl LtVar(x:symbol,loc:number,y:symbol)
.decl GtEqVar(x:symbol,loc:number,y:symbol)
.decl Lt(x:symbol,loc:number,n:number)
.decl GtEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl LtVarD(x:symbol,loc:number,y:symbol)
.decl GtEqVarD(x:symbol,loc:number,y:symbol)
.decl GtEqD(x:symbol,loc:number,n:number)
.decl LtD(x:symbol,loc:number,n:number)
.decl NotEqD(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl EXITPred(loc:number)
.decl AF_EXITPred_T(interm_state:number,loc:number)
.decl AF_EXITPred_S(loc:number)
.decl AF_EXITPred(loc:number)
.decl AF_EXITPred_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
LtVarD(x,loc,n) :- LtVar(x,loc,n).
LtVarD(x,loc,n) :- LtVarD(x,locI,n), control_flow(locI,loc), !LtVar(x,loc,_), !GtEqVar(x,loc,_).
GtEqVarD(x,loc,n) :- GtEqVar(x,loc,n).
GtEqVarD(x,loc,n) :- GtEqVarD(x,locI,n), control_flow(locI,loc), !GtEqVar(x,loc,_), !LtVar(x,loc,_).
GtEqD(x,loc,n) :- GtEq(x,loc,n).
GtEqD(x,loc,n) :- GtEqD(x,locI,n), control_flow(locI,loc), !GtEq(x,loc,_), !Lt(x,loc,_).
LtD(x,loc,n) :- Lt(x,loc,n).
LtD(x,loc,n) :- LtD(x,locI,n), control_flow(locI,loc), !Lt(x,loc,_), !GtEq(x,loc,_).
NotEqD(x,loc,n) :- NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEqD(x,locI,n), control_flow(locI,loc), !NotEq(x,loc,_), !Eq(x,loc,_).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,_), !NotEq(x,loc,_).
EXITPred(loc) :- Return(_,loc).
AF_EXITPred_T(interm_state,loc) :- AF_EXITPred_T(tempOne,loc), !EXITPred(tempOne), control_flow(tempOne,interm_state).
AF_EXITPred_T(interm_state,loc) :- !EXITPred(loc), control_flow(loc,interm_state).
AF_EXITPred_S(loc) :- !EXITPred(loc), control_flow(loc,tempOne), AF_EXITPred_S(tempOne).
AF_EXITPred_S(loc) :- AF_EXITPred_T(loc,loc).
AF_EXITPred(loc) :- State(loc), !AF_EXITPred_S(loc).
AF_EXITPred_Final(loc) :- Start(loc), AF_EXITPred(loc), !NotTotal(loc).
.output LtVar
.output GtEqVar
.output Lt
.output GtEq
.output Eq
.output NotEq
.output Start
.output State
.output flow
.output Return
.output AF_EXITPred_Final(IO=stdout)

