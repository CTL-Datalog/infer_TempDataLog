/*𝝐 */


/*(Start())@0 · ("flag"=0)@1 · ("i"=_)@2 · ((["flag"=1]@3 · ("flag"=1)@4 · (Return(0))@5) \/ ([("flag"!=1)]@6 · (("flag"!=1))@7 · ((["i"=0]@8 · ("i"=0)@9 · ("flag"=1)@10 · (Return(0))@11) \/ ([("i"!=0)]@12 · (("i"!=0))@13 · ((["i"<0]@14 · ("i"<0)@15 · (Return(0))@16) \/ (["i">=0]@17 · ("i">=0)@18 · (Return(0))@19))))))*/

flow(0,1).
flow(1,2).
flow(3,4).
flow(4,5).
flow(5,5).
flow(6,7).
flow(8,9).
flow(9,10).
flow(10,11).
flow(11,11).
flow(12,13).
flow(14,15).
flow(15,16).
flow(16,16).
flow(17,18).
flow(18,19).
flow(19,19).
Start(0).
State(0).
NotEq("flag",1,1).
State(1).
GtEq("i",2,0).
Lt("i",2,0).
NotEq("i",2,0).
Eq("i",2,0).
State(3).
Eq("flag",4,1).
State(4).
Return(0,5).
State(5).
State(2).
State(6).
NotEq("flag",7,1).
State(8).
Eq("i",9,0).
GtEq("i",9,0).
State(9).
Eq("flag",10,1).
State(10).
Return(0,11).
State(11).
State(7).
State(12).
NotEq("i",13,0).
State(14).
Lt("i",15,0).
NotEq("i",15,0).
State(15).
Return(0,16).
State(16).
State(13).
State(17).
GtEq("i",18,0).
State(18).
Return(0,19).
State(19).
control_flow(2,3) :- EqD("flag",2,1).
control_flow(2,6) :- NotEqD("flag",2,1).
control_flow(7,8) :- EqD("i",7,0).
control_flow(7,12) :- NotEqD("i",7,0).
control_flow(13,14) :- LtD("i",13,0).
control_flow(13,17) :- GtEqD("i",13,0).
/*(Start())@22 · ("b"=_)@23 · ("end"=_)@24 · ((["b"<0]@25 · ("b"<0)@26 · (Return(0))@27) \/ (["b">=0]@28 · ("b">=0)@29 · ((["end"<0]@30 · ("end"<0)@31 · (Return(0))@32) \/ (["end">=0]@33 · ("end">=0)@34 · ((["b">="end"]@35 · ("b">="end")@36 · (Return(0))@37) \/ (["b"<"end"]@38 · ("b"<"end")@39 · ("end"="b")@40 · (Return(0))@41))))))*/

flow(22,23).
flow(23,24).
flow(25,26).
flow(26,27).
flow(27,27).
flow(28,29).
flow(30,31).
flow(31,32).
flow(32,32).
flow(33,34).
flow(35,36).
flow(36,37).
flow(37,37).
flow(38,39).
flow(39,40).
flow(40,41).
flow(41,41).
Start(22).
State(22).
GtEqVar("b",23,"end").
LtVar("b",23,"end").
GtEq("b",23,0).
Lt("b",23,0).
State(23).
GtEqVar("b",24,"end").
LtVar("b",24,"end").
GtEq("end",24,0).
Lt("end",24,0).
State(25).
Lt("b",26,0).
State(26).
Return(0,27).
State(27).
State(24).
State(28).
GtEq("b",29,0).
State(30).
Lt("end",31,0).
State(31).
Return(0,32).
State(32).
State(29).
State(33).
GtEq("end",34,0).
State(35).
GtEqVar("b",36,"end").
State(36).
Return(0,37).
State(37).
State(34).
State(38).
LtVar("b",39,"end").
State(39).
GtEqVar("b",40,"end").
State(40).
Return(0,41).
State(41).
control_flow(24,25) :- LtD("b",24,0).
control_flow(24,28) :- GtEqD("b",24,0).
control_flow(29,30) :- LtD("end",29,0).
control_flow(29,33) :- GtEqD("end",29,0).
control_flow(34,35) :- GtEqVarD("b",34,"end").
control_flow(34,38) :- LtVarD("b",34,"end").
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl LtVar(x:symbol,loc:number,y:symbol)
.decl GtEqVar(x:symbol,loc:number,y:symbol)
.decl Lt(x:symbol,loc:number,n:number)
.decl GtEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl LtVarD(x:symbol,loc:number,y:symbol)
.decl GtEqVarD(x:symbol,loc:number,y:symbol)
.decl GtEqD(x:symbol,loc:number,n:number)
.decl LtD(x:symbol,loc:number,n:number)
.decl NotEqD(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl EXITPred(loc:number)
.decl AF_EXITPred_T(interm_state:number,loc:number)
.decl AF_EXITPred_S(loc:number)
.decl AF_EXITPred(loc:number)
.decl AF_EXITPred_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
LtVarD(x,loc,n) :- LtVar(x,loc,n).
LtVarD(x,loc,n) :- LtVarD(x,locI,n), control_flow(locI,loc), !LtVar(x,loc,n), !GtEqVar(x,loc,n).
GtEqVarD(x,loc,n) :- GtEqVar(x,loc,n).
GtEqVarD(x,loc,n) :- GtEqVarD(x,locI,n), control_flow(locI,loc), !GtEqVar(x,loc,n), !LtVar(x,loc,n).
GtEqD(x,loc,n) :- GtEq(x,loc,n).
GtEqD(x,loc,n) :- GtEqD(x,locI,n), control_flow(locI,loc), !GtEq(x,loc,n), !Lt(x,loc,n).
LtD(x,loc,n) :- Lt(x,loc,n).
LtD(x,loc,n) :- LtD(x,locI,n), control_flow(locI,loc), !Lt(x,loc,n), !GtEq(x,loc,n).
NotEqD(x,loc,n) :- NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEqD(x,locI,n), control_flow(locI,loc), !NotEq(x,loc,n), !Eq(x,loc,n).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,n), !NotEq(x,loc,n).
EXITPred(loc) :- Return(_,loc).
AF_EXITPred_T(interm_state,loc) :- AF_EXITPred_T(tempOne,loc), !EXITPred(tempOne), control_flow(tempOne,interm_state).
AF_EXITPred_T(interm_state,loc) :- !EXITPred(loc), control_flow(loc,interm_state).
AF_EXITPred_S(loc) :- !EXITPred(loc), control_flow(loc,tempOne), AF_EXITPred_S(tempOne).
AF_EXITPred_S(loc) :- AF_EXITPred_T(loc,loc).
AF_EXITPred(loc) :- State(loc), !AF_EXITPred_S(loc).
AF_EXITPred_Final(loc) :- Start(loc), AF_EXITPred(loc), !NotTotal(loc).
.output LtVar
.output GtEqVar
.output Lt
.output GtEq
.output Eq
.output NotEq
.output Start
.output State
.output flow
.output Return
.output AF_EXITPred_Final(IO=stdout)

.output NotTotal(IO=stdout)

