/*𝝐 */


/*(Start())@6 · ("pos"=0)@7 · ("rc"=_)@8 · ("size"=_)@9 · ("flag"=0)@10 · ("errno"=0)@11 · ((["size"<=0]@12 · ("size"<=0)@13 · (Return(0))@14) \/ (["size">0]@15 · ("size">0)@16 · ((["size">65536]@17 · ("size">65536)@18 · (Return(0))@19) \/ (["size"<=65536]@20 · ("size"<=65536)@21 · ((["pos">="size"]@22 · ("pos">="size")@23 · (Return(0))@24) \/ (["pos"<"size"]@25 · ("pos"<"size")@26 · ((["rc">0]@27 · ("rc">0)@28 · ("size"="pos")@29 · (Return(0))@30) \/ (["rc"<=0]@31 · ("rc"<=0)@32 · ((("size"-"pos")>=1)@33)^w))))))))*/

flow(6,7).
flow(7,8).
flow(8,9).
flow(9,10).
flow(10,11).
flow(12,13).
flow(13,14).
flow(14,14).
flow(15,16).
flow(17,18).
flow(18,19).
flow(19,19).
flow(20,21).
flow(22,23).
flow(23,24).
flow(24,24).
flow(25,26).
flow(27,28).
flow(28,29).
flow(29,30).
flow(30,30).
flow(31,32).
flow(32,33).
flow(33,33).
Start(6).
State(6).
State(7).
LtEq("rc",8,0). // delete this 
Gt("rc",8,0).
State(8).
GtEqVar("pos",9,"size").
LtVar("pos",9,"size").
LtEq("size",9,65536).
Gt("size",9,65536).
LtEq("size",9,0).
Gt("size",9,0).
State(9).
State(10).
State(12).
LtEq("size",13,0).
LtEq("size",13,65536).
State(13).
Return(0,14).
State(14).
State(11).
State(15).
Gt("size",16,0).
State(17).
Gt("size",18,65536).
Gt("size",18,0).
State(18).
Return(0,19).
State(19).
State(16).
State(20).
LtEq("size",21,65536).
State(22).
GtEqVar("pos",23,"size").
State(23).
Return(0,24).
State(24).
State(21).
State(25).
LtVar("pos",26,"size").
State(27).
Gt("rc",28,0).
State(28).
LtEq("size",29,0).
GtEqVar("pos",29,"size").
LtEq("size",29,65536).
State(29).
Return(0,30).
State(30).
State(26).
State(31).
LtEq("rc",32,0).
State(32).
State(33).
control_flow(11,12) :- LtEqD("size",11,0).
control_flow(11,15) :- GtD("size",11,0).
control_flow(16,17) :- GtD("size",16,65536).
control_flow(16,20) :- LtEqD("size",16,65536).
control_flow(21,22) :- GtEqVarD("pos",21,"size").
control_flow(21,25) :- LtVarD("pos",21,"size").
control_flow(26,27) :- GtD("rc",26,0).
control_flow(26,31) :- LtEqD("rc",26,0).
/*𝝐 */


//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl LtVar(x:symbol,loc:number,y:symbol)
.decl GtEqVar(x:symbol,loc:number,y:symbol)
.decl Gt(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl LtVarD(x:symbol,loc:number,y:symbol)
.decl GtEqVarD(x:symbol,loc:number,y:symbol)
.decl GtD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl EXITPred(loc:number)
.decl AF_EXITPred_T(interm_state:number,loc:number)
.decl AF_EXITPred_S(loc:number)
.decl AF_EXITPred(loc:number)
.decl AF_EXITPred_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
LtVarD(x,loc,n) :- LtVar(x,loc,n).
LtVarD(x,loc,n) :- LtVarD(x,locI,n), control_flow(locI,loc), !LtVar(x,loc,n), !GtEqVar(x,loc,n).
GtEqVarD(x,loc,n) :- GtEqVar(x,loc,n).
GtEqVarD(x,loc,n) :- GtEqVarD(x,locI,n), control_flow(locI,loc), !GtEqVar(x,loc,n), !LtVar(x,loc,n).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,n), !LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,n), !Gt(x,loc,n).
EXITPred(loc) :- Return(_,loc).
AF_EXITPred_T(interm_state,loc) :- AF_EXITPred_T(tempOne,loc), !EXITPred(tempOne), control_flow(tempOne,interm_state).
AF_EXITPred_T(interm_state,loc) :- !EXITPred(loc), control_flow(loc,interm_state).
AF_EXITPred_S(loc) :- !EXITPred(loc), control_flow(loc,tempOne), AF_EXITPred_S(tempOne).
AF_EXITPred_S(loc) :- AF_EXITPred_T(loc,loc).
AF_EXITPred(loc) :- State(loc), !AF_EXITPred_S(loc).
AF_EXITPred_Final(loc) :- Start(loc), AF_EXITPred(loc), !NotTotal(loc).
.output LtVar
.output GtEqVar
.output Gt
.output LtEq
.output Start
.output State
.output flow
.output Return
.output AF_EXITPred_Final(IO=stdout)

.output NotTotal(IO=stdout)

