/*(Join())@1*/

flow(1,1).
State(1).

/*(Start())@4 · (flag=0)@5 · (EXIT())@6*/

flow(4,5).
flow(5,6).
flow(6,6).
Start(4).
State(4).
State(5).
EXIT(6).
State(6).

/*(Start())@38 · (pos=0)@39 · (size=_)@40 · (flag=0)@41 · (errno=0)@42 · (([size<=0]@43 · (Return(0))@44) \/ ([size>0]@45 · (([size>65536]@46 · (Return(0))@47) \/ ([size<=65536]@48 · (((Return(0))@49) \/ ((([rc>0]@50 · [pos<size]@51 · (size=pos)@52 · (Return(0))@53) \/ ([rc<=0]@54 · ([pos<size]@55 · ((size-pos)>0)@56)^w))))))))*/

flow(38,39).
flow(39,40).
flow(40,41).
flow(41,42).
flow(44,44).
flow(47,47).
flow(49,49).
flow(53,53).
flow(56,56).
flow(56,55).
Start(38).
LtEq("size",38,0).
Gt("size",38,65536).
Gt("rc",38,0).
Gt("size",38,0).
LtEq("size",38,65536).
LtEq("rc",38,0). // delete this line 
LtVar("pos",38,"size").
State(38).
State(39).
State(40).
State(41).
State(43).
Return(0,44).
State(44).
State(42).
State(46).
Return(0,47).
State(47).
State(45).
Return(0,49).
State(49).
State(50).
State(51).
LtEq("size",52,0).
LtEq("size",52,65536).
State(52).
Return(0,53).
State(53).
State(48).
State(54).
State(55).
State(56).
control_flow(42,43) :- LtEqD("size",42,0).
control_flow(43,44) :- LtEqD("size",42,0).
control_flow(42,45) :- GtD("size",42,0).
control_flow(45,46) :- GtD("size",42,0), GtD("size",45,65536).
control_flow(46,47) :- GtD("size",42,0), GtD("size",45,65536).
control_flow(45,48) :- GtD("size",42,0), LtEqD("size",45,65536).
control_flow(48,49) :- GtD("size",42,0), LtEqD("size",45,65536).
control_flow(48,50) :- GtD("size",42,0), LtEqD("size",45,65536), GtD("rc",48,0).
control_flow(50,51) :- GtD("size",42,0), LtEqD("size",45,65536), GtD("rc",48,0), LtVarD("pos",50,"size").
control_flow(51,52) :- GtD("size",42,0), LtEqD("size",45,65536), GtD("rc",48,0), LtVarD("pos",50,"size").
control_flow(52,53) :- GtD("size",42,0), LtEqD("size",45,65536), GtD("rc",48,0), LtVarD("pos",50,"size").
control_flow(48,54) :- GtD("size",42,0), LtEqD("size",45,65536), LtEqD("rc",48,0).
control_flow(54,55) :- GtD("size",42,0), LtEqD("size",45,65536), LtEqD("rc",48,0), LtVarD("pos",54,"size").
control_flow(55,56) :- GtD("size",42,0), LtEqD("size",45,65536), LtEqD("rc",48,0), LtVarD("pos",54,"size").
/*(Start())@58 · (count=0)@59 · (([flag=1]@60 · (Return(0))@61) \/ ([(flag!=1)]@62 · (((Return(0))@63) \/ ([loc<len]@64 · (len=loc)@65 · (Return(0))@66))))*/

flow(58,59).
flow(61,61).
flow(63,63).
flow(66,66).
Start(58).
Eq("flag",58,1).
NotEq("flag",58,1).
LtVar("loc",58,"len").
State(58).
State(60).
Return(0,61).
State(61).
State(59).
Return(0,63).
State(63).
State(62).
State(64).
State(65).
Return(0,66).
State(66).
control_flow(59,60) :- EqD("flag",59,1).
control_flow(60,61) :- EqD("flag",59,1).
control_flow(59,62) :- NotEqD("flag",59,1).
control_flow(62,63) :- NotEqD("flag",59,1).
control_flow(62,64) :- NotEqD("flag",59,1), LtVarD("loc",62,"len").
control_flow(64,65) :- NotEqD("flag",59,1), LtVarD("loc",62,"len").
control_flow(65,66) :- NotEqD("flag",59,1), LtVarD("loc",62,"len").
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl GtEqVar(x:symbol,loc:number,y:symbol)
.decl NotEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl LtVar(x:symbol,loc:number,y:symbol)
.decl Gt(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl NotEqD(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl LtVarD(x:symbol,loc:number,y:symbol)
.decl GtD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl EXIT(loc:number)
.decl AF_EXIT_T(interm_state:number,loc:number)
.decl AF_EXIT_S(loc:number)
.decl AF_EXIT(loc:number)
.decl AF_EXIT_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
NotEqD(x,loc,n) :- NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEqD(x,locI,n), control_flow(locI,loc), !NotEq(x,loc,_), !Eq(x,loc,_).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,_), !NotEq(x,loc,_).
LtVarD(x,loc,n) :- LtVar(x,loc,n).
LtVarD(x,loc,n) :- LtVarD(x,locI,n), control_flow(locI,loc), !LtVar(x,loc,_), !GtEqVar(x,loc,_).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,_), !LtEq(x,loc,_).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,_), !Gt(x,loc,_).
EXIT(loc) :- Return(_,loc).
AF_EXIT_T(interm_state,loc) :- AF_EXIT_T(tempOne,loc), !EXIT(tempOne), control_flow(tempOne,interm_state).
AF_EXIT_T(interm_state,loc) :- !EXIT(loc), control_flow(loc,interm_state).
AF_EXIT_S(loc) :- !EXIT(loc), control_flow(loc,tempOne), AF_EXIT_S(tempOne).
AF_EXIT_S(loc) :- AF_EXIT_T(loc,loc).
AF_EXIT(loc) :- State(loc), !AF_EXIT_S(loc).
AF_EXIT_Final(loc) :- Start(loc), AF_EXIT(loc), !NotTotal(loc).
.output GtEqVar
.output NotEq
.output Eq
.output LtVar
.output Gt
.output LtEq
.output Start
.output State
.output flow
.output Return
.output AF_EXIT_Final(IO=stdout)

/* Other information 

//-- Facts for Procedure <__VERIFIER_nondet_int> 

//-- Facts for Procedure <__infer_globals_initializer_flag> 

Flow(1,2). //@34:1-34:1
Flow(2,3). //@34:1-34:12
Stmt_Decl(2,[IStore(&#GB<benchmark/termination/3_cmus_Adding_Subtracting_Zero_3_NT.c|ice>$flag,0)]). // @34:1
Exit(3).  // @34:12
Start(1). // @34:1
//-- Facts for Procedure <main> 

Flow(1,4). //@69:1-71:5
Flow(2,3). //@89:5-90:1
Flow(16,17). //@77:5-77:12
Flow(17,31). //@77:12-77:12
Flow(17,18). //@77:12-77:12
Flow(18,19). //@77:12-79:9
Flow(31,2). //@77:12-89:5
Flow(30,16). //@87:9-77:5
Flow(29,30). //@80:9-87:9
Flow(20,28). //@80:13-80:13
Flow(20,21). //@80:13-80:13
Flow(21,22). //@80:13-82:13
Flow(28,29). //@80:13-80:9
Flow(27,16). //@83:13-77:5
Flow(23,26). //@83:17-83:17
Flow(23,24). //@83:17-83:17
Flow(24,25). //@83:17-84:17
Flow(26,27). //@83:17-83:13
Flow(25,3). //@84:17-90:1
Flow(22,23). //@82:13-83:17
Flow(19,20). //@79:9-80:13
Flow(15,16). //@75:5-77:5
Flow(8,11). //@75:9-75:9
Flow(8,9). //@75:9-75:9
Flow(9,10). //@75:9-76:9
Flow(11,12). //@75:9-75:22
Flow(12,14). //@75:22-75:22
Flow(12,13). //@75:22-75:22
Flow(13,10). //@75:22-76:9
Flow(14,15). //@75:22-75:5
Flow(10,3). //@76:9-90:1
Flow(7,8). //@74:5-75:9
Flow(6,7). //@73:5-74:5
Flow(5,6). //@72:5-73:5
Flow(4,5). //@71:5-72:5
Stmt_Decl(4,[IStore(&pos,0)]). // @71:5
Stmt_Decl(5,[ICall(_fun___VERIFIER_nondet_int,,n$21),IStore(&size,n$21)]). // @72:5
Stmt_BinaryOperatorStmt(6,Assign,[IStore(&#GB<benchmark/termination/3_cmus_Adding_Subtracting_Zero_3_NT.c|ice>$flag,0)]). // @73:5
Stmt_Decl(7,[IStore(&errno,0)]). // @74:5
Stmt_Return(10,[IStore(&return,0)]). // @76:9
PruneNode(14,false,[Prune(!(n$18 > 65536), false)]). // @75:22
PruneNode(13,true,[Prune((n$18 > 65536), true)]). // @75:22
Stmt_BinaryOperatorStmt(12,GT,[ILoad(&size,n$18)]). // @75:22
PruneNode(11,false,[Prune(!(n$17 <= 0), false)]). // @75:9
PruneNode(9,true,[Prune((n$17 <= 0), true)]). // @75:9
Stmt_BinaryOperatorStmt(8,LE,[ILoad(&size,n$17)]). // @75:9
Join(15,[]).  // @75:5
Stmt_Decl(19,[ILoad(&pos,n$12),ILoad(&size,n$13),ILoad(&pos,n$14),ICall(_fun_read,n$12,(n$13 - n$14),n$15),IStore(&rc,n$15)]). // @79:9
Stmt_UnaryOperator(22,[ILoad(&errno,n$9),IStore(&errno,(n$9 + 1))]). // @82:13
Stmt_Return(25,[IStore(&return,0)]). // @84:17
PruneNode(26,false,[Prune(!(n$6 == 5), false)]). // @83:17
PruneNode(24,true,[Prune((n$6 == 5), true)]). // @83:17
Stmt_BinaryOperatorStmt(23,EQ,[ILoad(&errno,n$6)]). // @83:17
Join(27,[]).  // @83:13
PruneNode(28,false,[Prune(!(n$4 == -1), false)]). // @80:13
PruneNode(21,true,[Prune((n$4 == -1), true)]). // @80:13
Stmt_BinaryOperatorStmt(20,EQ,[ILoad(&rc,n$4)]). // @80:13
Join(29,[]).  // @80:9
Stmt_BinaryOperatorStmt(30,Assign,[ILoad(&pos,n$2),ILoad(&rc,n$3),IStore(&pos,(n$2 + n$3))]). // @87:9
PruneNode(31,false,[Prune(!(n$0 < n$1), false)]). // @77:12
PruneNode(18,true,[Prune((n$0 < n$1), true)]). // @77:12
Stmt_BinaryOperatorStmt(17,LT,[ILoad(&pos,n$0),ILoad(&size,n$1)]). // @77:12
Join(16,[]).  // @77:5
Stmt_Return(2,[IStore(&return,0)]). // @89:5
Exit(3).  // @90:1
Start(1). // @69:1
//-- Facts for Procedure <read> 

Flow(1,32). //@35:1-37:5
Flow(2,16). //@65:5-65:5
Flow(16,3). //@65:5-66:1
Flow(17,18). //@40:5-40:12
Flow(18,30). //@40:12-40:12
Flow(18,31). //@40:12-40:12
Flow(31,6). //@40:12-42:9
Flow(30,2). //@40:12-65:5
Flow(29,17). //@43:9-40:5
Flow(20,28). //@43:13-43:13
Flow(20,21). //@43:13-43:13
Flow(21,27). //@43:13-45:13
Flow(28,13). //@43:13-49:17
Flow(27,3). //@45:13-66:1
Flow(23,29). //@53:13-43:9
Flow(24,25). //@53:17-53:17
Flow(24,26). //@53:17-53:17
Flow(26,22). //@53:17-55:17
Flow(25,8). //@53:17-60:17
Flow(22,17). //@55:17-40:5
Flow(19,15). //@61:17-61:17
Flow(15,3). //@61:17-66:1
Flow(8,19). //@60:17-61:17
Flow(9,24). //@52:13-53:17
Flow(11,9). //@51:13-52:13
Flow(12,11). //@49:13-51:13
Flow(13,10). //@49:17-49:17
Flow(13,14). //@49:17-49:17
Flow(14,7). //@49:17-50:17
Flow(10,12). //@49:17-49:13
Flow(7,12). //@50:17-49:13
Flow(6,20). //@42:9-43:13
Flow(5,17). //@38:5-40:5
Flow(4,35). //@38:9-38:9
Flow(4,33). //@38:9-38:9
Flow(33,34). //@38:9-39:9
Flow(35,5). //@38:9-38:5
Flow(34,3). //@39:9-66:1
Flow(32,4). //@37:5-38:9
Stmt_Decl(32,[IStore(&count,0)]). // @37:5
Stmt_Return(34,[IStore(&return,0)]). // @39:9
PruneNode(35,false,[Prune(!(n$18 == 1), false)]). // @38:9
PruneNode(33,true,[Prune((n$18 == 1), true)]). // @38:9
Stmt_BinaryOperatorStmt(4,EQ,[ILoad(&#GB<benchmark/termination/3_cmus_Adding_Subtracting_Zero_3_NT.c|ice>$flag,n$18)]). // @38:9
Join(5,[]).  // @38:5
Stmt_Decl(6,[ICall(_fun___VERIFIER_nondet_int,,n$16),IStore(&num,n$16)]). // @42:9
Stmt_BinaryOperatorStmt(7,Assign,[ILoad(&num,n$12),IStore(&num,-n$12)]). // @50:17
PruneNode(10,false,[Prune(!(n$11 < 0), false)]). // @49:17
PruneNode(14,true,[Prune((n$11 < 0), true)]). // @49:17
Stmt_BinaryOperatorStmt(13,LT,[ILoad(&num,n$11)]). // @49:17
Join(12,[]).  // @49:13
Stmt_BinaryOperatorStmt(11,Assign,[ILoad(&num,n$10),IStore(&num,(n$10 % 1000))]). // @51:13
Stmt_UnaryOperator(9,[ILoad(&count,n$9),IStore(&count,(n$9 + 1))]). // @52:13
Stmt_BinaryOperatorStmt(8,Assign,[IStore(&#GB<benchmark/termination/3_cmus_Adding_Subtracting_Zero_3_NT.c|ice>$flag,1)]). // @60:17
Stmt_Return(15,[IStore(&return,n$7)]). // @61:17
Stmt_Return(19,[ILoad(&count,n$7)]). // @61:17
Stmt_UnaryOperator(22,[ILoad(&loc,n$6),IStore(&loc,(n$6 + 1))]). // @55:17
PruneNode(25,false,[Prune(!(n$4 < 995), false)]). // @53:17
PruneNode(26,true,[Prune((n$4 < 995), true)]). // @53:17
Stmt_BinaryOperatorStmt(24,LT,[ILoad(&num,n$4)]). // @53:17
Join(23,[]).  // @53:13
Stmt_Return(27,[IStore(&return,-1)]). // @45:13
PruneNode(28,false,[Prune(!(n$3 == 0), false)]). // @43:13
PruneNode(21,true,[Prune((n$3 == 0), true)]). // @43:13
Stmt_BinaryOperatorStmt(20,EQ,[ILoad(&num,n$3)]). // @43:13
Join(29,[]).  // @43:9
PruneNode(30,false,[Prune(!(n$1 < n$2), false)]). // @40:12
PruneNode(31,true,[Prune((n$1 < n$2), true)]). // @40:12
Stmt_BinaryOperatorStmt(18,LT,[ILoad(&loc,n$1),ILoad(&len,n$2)]). // @40:12
Join(17,[]).  // @40:5
Stmt_Return(16,[IStore(&return,n$0)]). // @65:5
Stmt_Return(2,[ILoad(&count,n$0)]). // @65:5
Exit(3).  // @66:1
Start(1). // @35:1
*/

