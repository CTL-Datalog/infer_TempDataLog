/*(Join())@36*/

flow(36,36).
State(36).

/*(Start())@37 · (flag=0)@38 · (EXIT())@39*/

flow(37,38).
flow(38,39).
flow(39,39).
Start(37).
State(37).
State(38).
EXIT(39).
State(39).

/*(Start())@52 · (pos=0)@53 · (size=_)@54 · (flag=0)@55 · (errno=0)@56 · (([size<=0]@57 · (Return(0))@58) \/ ([size>0]@59 · (([size>65536]@60 · (Return(0))@61) \/ ([size<=65536]@62 · (([pos>=size]@63 · (Return(0))@64) \/ ((((([pos<size]@65 · [errno<5]@67 · ((5-errno)=0)@68 · (rc=_)@69 · (errno=(errno+1))@70 · (Return(0))@71 · (rc=_)@72 · (errno=(errno+1))@73 · (Return(0))@74) \/ (([pos<size]@83 · [errno>=5]@84 · (pos<size)@85 · (errno>=5)@86 · (rc=_)@87 · [rc=-1]@88 · (errno=(errno+1))@89 · [(errno!=5)]@90)^w))) \/ ((([pos<size]@91 · [rc>0]@92 · [size>pos]@93 · ((size-pos)=0)@94 · (rc=_)@95 · (pos=(pos+rc))@96 · (Return(0))@97) \/ (([pos<size]@98 · [rc<=0]@99 · (pos<size)@100 · (rc<=0)@101 · (rc=_)@102 · [(rc!=-1)]@103 · (pos=(pos+rc))@104)^w))))))))))*/

flow(52,53).
flow(53,54).
flow(54,55).
flow(55,56).
flow(58,58).
flow(61,61).
flow(64,64).
flow(74,74).
flow(90,90).
flow(90,83).
flow(97,97).
flow(104,104).
flow(104,98).
Start(52).
LtEq("size",52,0).
Gt("size",52,65536).
GtEqVar("pos",52,"size").
Lt("errno",52,5).
GtEq("errno",52,5).
Eq("rc",52,-1).
NotEq("errno",52,5).
Gt("rc",52,0).
GtVar("size",52,"pos").
Gt("size",52,0).
LtEq("size",52,65536).
LtVar("pos",52,"size").
LtEq("rc",52,0).
NotEq("rc",52,-1).
State(52).
State(53).
State(54).
State(55).
Lt("errno",56,5).
NotEq("errno",56,5).
State(57).
Return(0,58).
State(58).
State(56).
State(60).
Return(0,61).
State(61).
State(59).
State(63).
Return(0,64).
State(64).
State(65).
State(67).
State(68).
State(69).
Lt("errno",70,5).
NotEq("errno",70,5).
State(70).
Return(0,71).
State(71).
State(72).
Lt("errno",73,5).
NotEq("errno",73,5).
State(73).
Return(0,74).
State(74).
State(83).
State(84).
State(85).
State(86).
State(87).
State(88).
Lt("errno",89,5).
NotEq("errno",89,5).
State(89).
State(90).
State(91).
State(92).
State(93).
State(94).
State(95).
State(96).
Return(0,97).
State(97).
State(62).
State(98).
State(99).
State(100).
State(101).
State(102).
State(103).
State(104).
control_flow(56,57) :- LtEqD("size",56,0).
control_flow(57,58) :- LtEqD("size",56,0).
control_flow(56,59) :- GtD("size",56,0).
control_flow(59,60) :- GtD("size",56,0), GtD("size",59,65536).
control_flow(60,61) :- GtD("size",56,0), GtD("size",59,65536).
control_flow(59,62) :- GtD("size",56,0), LtEqD("size",59,65536).
control_flow(62,63) :- GtD("size",56,0), LtEqD("size",59,65536), GtEqVarD("pos",62,"size").
control_flow(63,64) :- GtD("size",56,0), LtEqD("size",59,65536), GtEqVarD("pos",62,"size").
control_flow(62,65) :- GtD("size",56,0), LtEqD("size",59,65536), LtVarD("pos",62,"size").
control_flow(65,67) :- GtD("size",56,0), LtEqD("size",59,65536), LtVarD("pos",62,"size"), LtD("errno",65,5).
control_flow(67,68) :- GtD("size",56,0), LtEqD("size",59,65536), LtVarD("pos",62,"size"), LtD("errno",65,5).
control_flow(68,69) :- GtD("size",56,0), LtEqD("size",59,65536), LtVarD("pos",62,"size"), LtD("errno",65,5).
control_flow(69,70) :- GtD("size",56,0), LtEqD("size",59,65536), LtVarD("pos",62,"size"), LtD("errno",65,5).
control_flow(70,71) :- GtD("size",56,0), LtEqD("size",59,65536), LtVarD("pos",62,"size"), LtD("errno",65,5).
control_flow(71,72) :- GtD("size",56,0), LtEqD("size",59,65536), LtVarD("pos",62,"size"), LtD("errno",65,5).
control_flow(72,73) :- GtD("size",56,0), LtEqD("size",59,65536), LtVarD("pos",62,"size"), LtD("errno",65,5).
control_flow(73,74) :- GtD("size",56,0), LtEqD("size",59,65536), LtVarD("pos",62,"size"), LtD("errno",65,5).
control_flow(62,83) :- GtD("size",56,0), LtEqD("size",59,65536), LtVarD("pos",62,"size").
control_flow(83,84) :- GtD("size",56,0), LtEqD("size",59,65536), LtVarD("pos",62,"size"), GtEqD("errno",83,5).
control_flow(84,85) :- GtD("size",56,0), LtEqD("size",59,65536), LtVarD("pos",62,"size"), GtEqD("errno",83,5).
control_flow(85,86) :- GtD("size",56,0), LtEqD("size",59,65536), LtVarD("pos",62,"size"), GtEqD("errno",83,5).
control_flow(86,87) :- GtD("size",56,0), LtEqD("size",59,65536), LtVarD("pos",62,"size"), GtEqD("errno",83,5).
control_flow(87,88) :- GtD("size",56,0), LtEqD("size",59,65536), LtVarD("pos",62,"size"), GtEqD("errno",83,5), EqD("rc",87,-1).
control_flow(88,89) :- GtD("size",56,0), LtEqD("size",59,65536), LtVarD("pos",62,"size"), GtEqD("errno",83,5), EqD("rc",87,-1).
control_flow(89,90) :- GtD("size",56,0), LtEqD("size",59,65536), LtVarD("pos",62,"size"), GtEqD("errno",83,5), EqD("rc",87,-1), NotEqD("errno",89,5).
control_flow(62,91) :- GtD("size",56,0), LtEqD("size",59,65536), LtVarD("pos",62,"size").
control_flow(91,92) :- GtD("size",56,0), LtEqD("size",59,65536), LtVarD("pos",62,"size"), GtD("rc",91,0).
control_flow(92,93) :- GtD("size",56,0), LtEqD("size",59,65536), LtVarD("pos",62,"size"), GtD("rc",91,0), GtVarD("size",92,"pos").
control_flow(93,94) :- GtD("size",56,0), LtEqD("size",59,65536), LtVarD("pos",62,"size"), GtD("rc",91,0), GtVarD("size",92,"pos").
control_flow(94,95) :- GtD("size",56,0), LtEqD("size",59,65536), LtVarD("pos",62,"size"), GtD("rc",91,0), GtVarD("size",92,"pos").
control_flow(95,96) :- GtD("size",56,0), LtEqD("size",59,65536), LtVarD("pos",62,"size"), GtD("rc",91,0), GtVarD("size",92,"pos").
control_flow(96,97) :- GtD("size",56,0), LtEqD("size",59,65536), LtVarD("pos",62,"size"), GtD("rc",91,0), GtVarD("size",92,"pos").
control_flow(62,98) :- GtD("size",56,0), LtEqD("size",59,65536), LtVarD("pos",62,"size").
control_flow(98,99) :- GtD("size",56,0), LtEqD("size",59,65536), LtVarD("pos",62,"size"), LtEqD("rc",98,0).
control_flow(99,100) :- GtD("size",56,0), LtEqD("size",59,65536), LtVarD("pos",62,"size"), LtEqD("rc",98,0).
control_flow(100,101) :- GtD("size",56,0), LtEqD("size",59,65536), LtVarD("pos",62,"size"), LtEqD("rc",98,0).
control_flow(101,102) :- GtD("size",56,0), LtEqD("size",59,65536), LtVarD("pos",62,"size"), LtEqD("rc",98,0).
control_flow(102,103) :- GtD("size",56,0), LtEqD("size",59,65536), LtVarD("pos",62,"size"), LtEqD("rc",98,0), NotEqD("rc",102,-1).
control_flow(103,104) :- GtD("size",56,0), LtEqD("size",59,65536), LtVarD("pos",62,"size"), LtEqD("rc",98,0), NotEqD("rc",102,-1).
/*(Start())@117 · (count=0)@118 · (([flag=1]@119 · (Return(0))@120) \/ ([(flag!=1)]@121 · (([loc>=len]@122 · (Return(0))@123) \/ ((([loc<len]@124 · [len>loc]@126 · ((len-loc)=0)@127 · (num=_)@128 · (count=(count+1))@129 · (loc=(loc+1))@130 · (Return(0))@131) \/ ([loc<len]@142 · [len>loc]@144 · ((len-loc)=0)@145 · (num=_)@146 · (count=(count+1))@147 · (loc=(loc+1))@148 · (Return(0))@149))))))*/

flow(117,118).
flow(120,120).
flow(123,123).
flow(131,131).
flow(149,149).
Start(117).
Eq("flag",117,1).
GtEqVar("loc",117,"len").
NotEq("flag",117,1).
LtVar("loc",117,"len").
GtVar("len",117,"loc").
State(117).
State(119).
Return(0,120).
State(120).
State(118).
State(122).
Return(0,123).
State(123).
State(124).
State(126).
State(127).
State(128).
State(129).
State(130).
Return(0,131).
State(131).
State(121).
State(142).
State(144).
State(145).
State(146).
State(147).
State(148).
Return(0,149).
State(149).
control_flow(118,119) :- EqD("flag",118,1).
control_flow(119,120) :- EqD("flag",118,1).
control_flow(118,121) :- NotEqD("flag",118,1).
control_flow(121,122) :- NotEqD("flag",118,1), GtEqVarD("loc",121,"len").
control_flow(122,123) :- NotEqD("flag",118,1), GtEqVarD("loc",121,"len").
control_flow(121,124) :- NotEqD("flag",118,1), LtVarD("loc",121,"len").
control_flow(124,126) :- NotEqD("flag",118,1), LtVarD("loc",121,"len"), GtVarD("len",124,"loc").
control_flow(126,127) :- NotEqD("flag",118,1), LtVarD("loc",121,"len"), GtVarD("len",124,"loc").
control_flow(127,128) :- NotEqD("flag",118,1), LtVarD("loc",121,"len"), GtVarD("len",124,"loc").
control_flow(128,129) :- NotEqD("flag",118,1), LtVarD("loc",121,"len"), GtVarD("len",124,"loc").
control_flow(129,130) :- NotEqD("flag",118,1), LtVarD("loc",121,"len"), GtVarD("len",124,"loc").
control_flow(130,131) :- NotEqD("flag",118,1), LtVarD("loc",121,"len"), GtVarD("len",124,"loc").
control_flow(121,142) :- NotEqD("flag",118,1), LtVarD("loc",121,"len").
control_flow(142,144) :- NotEqD("flag",118,1), LtVarD("loc",121,"len"), GtVarD("len",142,"loc").
control_flow(144,145) :- NotEqD("flag",118,1), LtVarD("loc",121,"len"), GtVarD("len",142,"loc").
control_flow(145,146) :- NotEqD("flag",118,1), LtVarD("loc",121,"len"), GtVarD("len",142,"loc").
control_flow(146,147) :- NotEqD("flag",118,1), LtVarD("loc",121,"len"), GtVarD("len",142,"loc").
control_flow(147,148) :- NotEqD("flag",118,1), LtVarD("loc",121,"len"), GtVarD("len",142,"loc").
control_flow(148,149) :- NotEqD("flag",118,1), LtVarD("loc",121,"len"), GtVarD("len",142,"loc").
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl LtEqVar(x:symbol,loc:number,y:symbol)
.decl LtVar(x:symbol,loc:number,y:symbol)
.decl GtVar(x:symbol,loc:number,y:symbol)
.decl NotEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl GtEq(x:symbol,loc:number,n:number)
.decl Lt(x:symbol,loc:number,n:number)
.decl GtEqVar(x:symbol,loc:number,y:symbol)
.decl Gt(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl GtVarD(x:symbol,loc:number,y:symbol)
.decl NotEqD(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl GtEqD(x:symbol,loc:number,n:number)
.decl LtD(x:symbol,loc:number,n:number)
.decl LtVarD(x:symbol,loc:number,y:symbol)
.decl GtEqVarD(x:symbol,loc:number,y:symbol)
.decl GtD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl EXIT(loc:number)
.decl AF_EXIT_T(interm_state:number,loc:number)
.decl AF_EXIT_S(loc:number)
.decl AF_EXIT(loc:number)
.decl AF_EXIT_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
GtVarD(x,loc,n) :- GtVar(x,loc,n).
GtVarD(x,loc,n) :- GtVarD(x,locI,n), control_flow(locI,loc), !GtVar(x,loc,_), !LtEqVar(x,loc,_).
NotEqD(x,loc,n) :- NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEqD(x,locI,n), control_flow(locI,loc), !NotEq(x,loc,_), !Eq(x,loc,_).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,_), !NotEq(x,loc,_).
GtEqD(x,loc,n) :- GtEq(x,loc,n).
GtEqD(x,loc,n) :- GtEqD(x,locI,n), control_flow(locI,loc), !GtEq(x,loc,_), !Lt(x,loc,_).
LtD(x,loc,n) :- Lt(x,loc,n).
LtD(x,loc,n) :- LtD(x,locI,n), control_flow(locI,loc), !Lt(x,loc,_), !GtEq(x,loc,_).
LtVarD(x,loc,n) :- LtVar(x,loc,n).
LtVarD(x,loc,n) :- LtVarD(x,locI,n), control_flow(locI,loc), !LtVar(x,loc,_), !GtEqVar(x,loc,_).
GtEqVarD(x,loc,n) :- GtEqVar(x,loc,n).
GtEqVarD(x,loc,n) :- GtEqVarD(x,locI,n), control_flow(locI,loc), !GtEqVar(x,loc,_), !LtVar(x,loc,_).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,_), !LtEq(x,loc,_).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,_), !Gt(x,loc,_).
EXIT(loc) :- Return(_,loc).
AF_EXIT_T(interm_state,loc) :- AF_EXIT_T(tempOne,loc), !EXIT(tempOne), control_flow(tempOne,interm_state).
AF_EXIT_T(interm_state,loc) :- !EXIT(loc), control_flow(loc,interm_state).
AF_EXIT_S(loc) :- !EXIT(loc), control_flow(loc,tempOne), AF_EXIT_S(tempOne).
AF_EXIT_S(loc) :- AF_EXIT_T(loc,loc).
AF_EXIT(loc) :- State(loc), !AF_EXIT_S(loc).
AF_EXIT_Final(loc) :- Start(loc), AF_EXIT(loc), !NotTotal(loc).
.output LtEqVar
.output LtVar
.output GtVar
.output NotEq
.output Eq
.output GtEq
.output Lt
.output GtEqVar
.output Gt
.output LtEq
.output Start
.output State
.output flow
.output Return
.output AF_EXIT_Final(IO=stdout)

/* Other information 

//-- Facts for Procedure <__VERIFIER_nondet_int> 

//-- Facts for Procedure <__infer_globals_initializer_flag> 

Flow(2,0). //@34:1-34:1
Flow(0,1). //@34:1-34:12
Stmt_Decl(0,[IStore(&#GB<benchmark/termination/3_cmus_Adding_Subtracting_Zero_3_NT.c|ice>$flag,0)]). // @34:1
Exit(1).  // @34:12
Start(2). // @34:1
//-- Facts for Procedure <main> 

Flow(2,3). //@69:1-71:5
Flow(0,1). //@89:5-90:1
Flow(15,30). //@77:5-77:12
Flow(30,28). //@77:12-77:12
Flow(30,29). //@77:12-77:12
Flow(29,16). //@77:12-79:9
Flow(28,0). //@77:12-89:5
Flow(27,15). //@87:9-77:5
Flow(25,27). //@80:9-87:9
Flow(17,24). //@80:13-80:13
Flow(17,26). //@80:13-80:13
Flow(26,18). //@80:13-82:13
Flow(24,25). //@80:13-80:9
Flow(22,15). //@83:13-77:5
Flow(19,21). //@83:17-83:17
Flow(19,23). //@83:17-83:17
Flow(23,20). //@83:17-84:17
Flow(21,22). //@83:17-83:13
Flow(20,1). //@84:17-90:1
Flow(18,19). //@82:13-83:17
Flow(16,17). //@79:9-80:13
Flow(10,15). //@75:5-77:5
Flow(7,13). //@75:9-75:9
Flow(7,14). //@75:9-75:9
Flow(14,8). //@75:9-76:9
Flow(13,12). //@75:9-75:22
Flow(12,9). //@75:22-75:22
Flow(12,11). //@75:22-75:22
Flow(11,8). //@75:22-76:9
Flow(9,10). //@75:22-75:5
Flow(8,1). //@76:9-90:1
Flow(6,7). //@74:5-75:9
Flow(5,6). //@73:5-74:5
Flow(4,5). //@72:5-73:5
Flow(3,4). //@71:5-72:5
Stmt_Decl(3,[IStore(&pos,0)]). // @71:5
Stmt_Decl(4,[ICall(_fun___VERIFIER_nondet_int,,n$21),IStore(&size,n$21)]). // @72:5
Stmt_BinaryOperatorStmt(5,Assign,[IStore(&#GB<benchmark/termination/3_cmus_Adding_Subtracting_Zero_3_NT.c|ice>$flag,0)]). // @73:5
Stmt_Decl(6,[IStore(&errno,0)]). // @74:5
Stmt_Return(8,[IStore(&return,0)]). // @76:9
PruneNode(9,false,[Prune(!(n$18 > 65536), false)]). // @75:22
PruneNode(11,true,[Prune((n$18 > 65536), true)]). // @75:22
Stmt_BinaryOperatorStmt(12,GT,[ILoad(&size,n$18)]). // @75:22
PruneNode(13,false,[Prune(!(n$17 <= 0), false)]). // @75:9
PruneNode(14,true,[Prune((n$17 <= 0), true)]). // @75:9
Stmt_BinaryOperatorStmt(7,LE,[ILoad(&size,n$17)]). // @75:9
Join(10,[]).  // @75:5
Stmt_Decl(16,[ILoad(&pos,n$12),ILoad(&size,n$13),ILoad(&pos,n$14),ICall(_fun_read,n$12,(n$13 - n$14),n$15),IStore(&rc,n$15)]). // @79:9
Stmt_UnaryOperator(18,[ILoad(&errno,n$9),IStore(&errno,(n$9 + 1))]). // @82:13
Stmt_Return(20,[IStore(&return,0)]). // @84:17
PruneNode(21,false,[Prune(!(n$6 == 5), false)]). // @83:17
PruneNode(23,true,[Prune((n$6 == 5), true)]). // @83:17
Stmt_BinaryOperatorStmt(19,EQ,[ILoad(&errno,n$6)]). // @83:17
Join(22,[]).  // @83:13
PruneNode(24,false,[Prune(!(n$4 == -1), false)]). // @80:13
PruneNode(26,true,[Prune((n$4 == -1), true)]). // @80:13
Stmt_BinaryOperatorStmt(17,EQ,[ILoad(&rc,n$4)]). // @80:13
Join(25,[]).  // @80:9
Stmt_BinaryOperatorStmt(27,Assign,[ILoad(&pos,n$2),ILoad(&rc,n$3),IStore(&pos,(n$2 + n$3))]). // @87:9
PruneNode(28,false,[Prune(!(n$0 < n$1), false)]). // @77:12
PruneNode(29,true,[Prune((n$0 < n$1), true)]). // @77:12
Stmt_BinaryOperatorStmt(30,LT,[ILoad(&pos,n$0),ILoad(&size,n$1)]). // @77:12
Join(15,[]).  // @77:5
Stmt_Return(0,[IStore(&return,0)]). // @89:5
Exit(1).  // @90:1
Start(2). // @69:1
//-- Facts for Procedure <read> 

Flow(2,31). //@35:1-37:5
Flow(0,15). //@65:5-65:5
Flow(15,1). //@65:5-66:1
Flow(30,29). //@40:5-40:12
Flow(29,27). //@40:12-40:12
Flow(29,28). //@40:12-40:12
Flow(28,5). //@40:12-42:9
Flow(27,0). //@40:12-65:5
Flow(25,30). //@43:9-40:5
Flow(17,24). //@43:13-43:13
Flow(17,26). //@43:13-43:13
Flow(26,22). //@43:13-45:13
Flow(24,11). //@43:13-49:17
Flow(22,1). //@45:13-66:1
Flow(19,25). //@53:13-43:9
Flow(23,20). //@53:17-53:17
Flow(23,21). //@53:17-53:17
Flow(21,18). //@53:17-55:17
Flow(20,7). //@53:17-60:17
Flow(18,30). //@55:17-40:5
Flow(16,10). //@61:17-61:17
Flow(10,1). //@61:17-66:1
Flow(7,16). //@60:17-61:17
Flow(14,23). //@52:13-53:17
Flow(13,14). //@51:13-52:13
Flow(12,13). //@49:13-51:13
Flow(11,8). //@49:17-49:17
Flow(11,9). //@49:17-49:17
Flow(9,6). //@49:17-50:17
Flow(8,12). //@49:17-49:13
Flow(6,12). //@50:17-49:13
Flow(5,17). //@42:9-43:13
Flow(4,30). //@38:5-40:5
Flow(3,33). //@38:9-38:9
Flow(3,34). //@38:9-38:9
Flow(34,32). //@38:9-39:9
Flow(33,4). //@38:9-38:5
Flow(32,1). //@39:9-66:1
Flow(31,3). //@37:5-38:9
Stmt_Decl(31,[IStore(&count,0)]). // @37:5
Stmt_Return(32,[IStore(&return,0)]). // @39:9
PruneNode(33,false,[Prune(!(n$18 == 1), false)]). // @38:9
PruneNode(34,true,[Prune((n$18 == 1), true)]). // @38:9
Stmt_BinaryOperatorStmt(3,EQ,[ILoad(&#GB<benchmark/termination/3_cmus_Adding_Subtracting_Zero_3_NT.c|ice>$flag,n$18)]). // @38:9
Join(4,[]).  // @38:5
Stmt_Decl(5,[ICall(_fun___VERIFIER_nondet_int,,n$16),IStore(&num,n$16)]). // @42:9
Stmt_BinaryOperatorStmt(6,Assign,[ILoad(&num,n$12),IStore(&num,-n$12)]). // @50:17
PruneNode(8,false,[Prune(!(n$11 < 0), false)]). // @49:17
PruneNode(9,true,[Prune((n$11 < 0), true)]). // @49:17
Stmt_BinaryOperatorStmt(11,LT,[ILoad(&num,n$11)]). // @49:17
Join(12,[]).  // @49:13
Stmt_BinaryOperatorStmt(13,Assign,[ILoad(&num,n$10),IStore(&num,(n$10 % 1000))]). // @51:13
Stmt_UnaryOperator(14,[ILoad(&count,n$9),IStore(&count,(n$9 + 1))]). // @52:13
Stmt_BinaryOperatorStmt(7,Assign,[IStore(&#GB<benchmark/termination/3_cmus_Adding_Subtracting_Zero_3_NT.c|ice>$flag,1)]). // @60:17
Stmt_Return(10,[IStore(&return,n$7)]). // @61:17
Stmt_Return(16,[ILoad(&count,n$7)]). // @61:17
Stmt_UnaryOperator(18,[ILoad(&loc,n$6),IStore(&loc,(n$6 + 1))]). // @55:17
PruneNode(20,false,[Prune(!(n$4 < 995), false)]). // @53:17
PruneNode(21,true,[Prune((n$4 < 995), true)]). // @53:17
Stmt_BinaryOperatorStmt(23,LT,[ILoad(&num,n$4)]). // @53:17
Join(19,[]).  // @53:13
Stmt_Return(22,[IStore(&return,-1)]). // @45:13
PruneNode(24,false,[Prune(!(n$3 == 0), false)]). // @43:13
PruneNode(26,true,[Prune((n$3 == 0), true)]). // @43:13
Stmt_BinaryOperatorStmt(17,EQ,[ILoad(&num,n$3)]). // @43:13
Join(25,[]).  // @43:9
PruneNode(27,false,[Prune(!(n$1 < n$2), false)]). // @40:12
PruneNode(28,true,[Prune((n$1 < n$2), true)]). // @40:12
Stmt_BinaryOperatorStmt(29,LT,[ILoad(&loc,n$1),ILoad(&len,n$2)]). // @40:12
Join(30,[]).  // @40:5
Stmt_Return(15,[IStore(&return,n$0)]). // @65:5
Stmt_Return(0,[ILoad(&count,n$0)]). // @65:5
Exit(1).  // @66:1
Start(2). // @35:1
*/

