/*(Join())@36*/

flow(36,36).
State(36).

/*(Start())@37 · (flag=0)@38 · (EXIT())@39*/

flow(37,38).
flow(38,39).
flow(39,39).
Start(37).
State(37).
State(38).
EXIT(39).
State(39).

/*(Start())@46 · (pos=0)@47 · (size=_)@48 · (flag=0)@49 · (errno=0)@50 · (([size<=0]@51 · (Return(0))@52) \/ ([size>0]@53 · (([size>65536]@54 · (Return(0))@55) \/ ([size<=65536]@56 · (([pos>=size]@57 · (Return(0))@58) \/ ((([pos<size]@59 · [rc>0]@60 · [size>pos]@61 · ((size-pos)=0)@62 · (rc=_)@63 · (pos=(pos+rc))@64 · (Return(0))@65) \/ (([rc<=0]@66 · (rc<=0)@67)^w))))))))*/

flow(46,47).
flow(47,48).
flow(48,49).
flow(49,50).
flow(52,52).
flow(55,55).
flow(58,58).
flow(65,65).
flow(67,67).
flow(67,66).
Start(46).
LtEq("size",46,0).
Gt("size",46,65536).
GtEqVar("pos",46,"size").
LtVar("pos",46,"size").
Gt("rc",46,0).
GtVar("size",46,"pos").
Gt("size",46,0).
LtEq("size",46,65536).
LtEq("rc",46,0). // delete this fact 
State(46).
State(47).
State(48).
State(49).
State(51).
Return(0,52).
State(52).
State(50).
State(54).
Return(0,55).
State(55).
State(53).
State(57).
Return(0,58).
State(58).
State(59).
State(60).
State(61).
State(62).
State(63).
State(64).
Return(0,65).
State(65).
State(56).
State(66).
State(67).
control_flow(50,51) :- LtEqD("size",50,0).
control_flow(51,52) :- LtEqD("size",50,0).
control_flow(50,53) :- GtD("size",50,0).
control_flow(53,54) :- GtD("size",50,0), GtD("size",53,65536).
control_flow(54,55) :- GtD("size",50,0), GtD("size",53,65536).
control_flow(53,56) :- GtD("size",50,0), LtEqD("size",53,65536).
control_flow(56,57) :- GtD("size",50,0), LtEqD("size",53,65536), GtEqVarD("pos",56,"size").
control_flow(57,58) :- GtD("size",50,0), LtEqD("size",53,65536), GtEqVarD("pos",56,"size").
control_flow(56,59) :- GtD("size",50,0), LtEqD("size",53,65536), LtVarD("pos",56,"size").
control_flow(59,60) :- GtD("size",50,0), LtEqD("size",53,65536), LtVarD("pos",56,"size"), GtD("rc",59,0).
control_flow(60,61) :- GtD("size",50,0), LtEqD("size",53,65536), LtVarD("pos",56,"size"), GtD("rc",59,0), GtVarD("size",60,"pos").
control_flow(61,62) :- GtD("size",50,0), LtEqD("size",53,65536), LtVarD("pos",56,"size"), GtD("rc",59,0), GtVarD("size",60,"pos").
control_flow(62,63) :- GtD("size",50,0), LtEqD("size",53,65536), LtVarD("pos",56,"size"), GtD("rc",59,0), GtVarD("size",60,"pos").
control_flow(63,64) :- GtD("size",50,0), LtEqD("size",53,65536), LtVarD("pos",56,"size"), GtD("rc",59,0), GtVarD("size",60,"pos").
control_flow(64,65) :- GtD("size",50,0), LtEqD("size",53,65536), LtVarD("pos",56,"size"), GtD("rc",59,0), GtVarD("size",60,"pos").
control_flow(56,66) :- GtD("size",50,0), LtEqD("size",53,65536), LtEqD("rc",56,0).
control_flow(66,67) :- GtD("size",50,0), LtEqD("size",53,65536), LtEqD("rc",56,0).
/*(Start())@80 · (count=0)@81 · (([flag=1]@82 · (Return(0))@83) \/ ([(flag!=1)]@84 · (([loc>=len]@85 · (Return(0))@86) \/ ((([loc<len]@87 · [len>loc]@89 · ((len-loc)=0)@90 · (num=_)@91 · (count=(count+1))@92 · (loc=(loc+1))@93 · (Return(0))@94) \/ ([loc<len]@97 · [len>loc]@99 · ((len-loc)=0)@100 · (num=_)@101 · (count=(count+1))@102 · (loc=(loc+1))@103 · (Return(0))@104))))))*/

flow(80,81).
flow(83,83).
flow(86,86).
flow(94,94).
flow(104,104).
Start(80).
Eq("flag",80,1).
GtEqVar("loc",80,"len").
NotEq("flag",80,1).
LtVar("loc",80,"len").
GtVar("len",80,"loc").
State(80).
State(82).
Return(0,83).
State(83).
State(81).
State(85).
Return(0,86).
State(86).
State(87).
State(89).
State(90).
State(91).
State(92).
State(93).
Return(0,94).
State(94).
State(84).
State(97).
State(99).
State(100).
State(101).
State(102).
State(103).
Return(0,104).
State(104).
control_flow(81,82) :- EqD("flag",81,1).
control_flow(82,83) :- EqD("flag",81,1).
control_flow(81,84) :- NotEqD("flag",81,1).
control_flow(84,85) :- NotEqD("flag",81,1), GtEqVarD("loc",84,"len").
control_flow(85,86) :- NotEqD("flag",81,1), GtEqVarD("loc",84,"len").
control_flow(84,87) :- NotEqD("flag",81,1), LtVarD("loc",84,"len").
control_flow(87,89) :- NotEqD("flag",81,1), LtVarD("loc",84,"len"), GtVarD("len",87,"loc").
control_flow(89,90) :- NotEqD("flag",81,1), LtVarD("loc",84,"len"), GtVarD("len",87,"loc").
control_flow(90,91) :- NotEqD("flag",81,1), LtVarD("loc",84,"len"), GtVarD("len",87,"loc").
control_flow(91,92) :- NotEqD("flag",81,1), LtVarD("loc",84,"len"), GtVarD("len",87,"loc").
control_flow(92,93) :- NotEqD("flag",81,1), LtVarD("loc",84,"len"), GtVarD("len",87,"loc").
control_flow(93,94) :- NotEqD("flag",81,1), LtVarD("loc",84,"len"), GtVarD("len",87,"loc").
control_flow(84,97) :- NotEqD("flag",81,1), LtVarD("loc",84,"len").
control_flow(97,99) :- NotEqD("flag",81,1), LtVarD("loc",84,"len"), GtVarD("len",97,"loc").
control_flow(99,100) :- NotEqD("flag",81,1), LtVarD("loc",84,"len"), GtVarD("len",97,"loc").
control_flow(100,101) :- NotEqD("flag",81,1), LtVarD("loc",84,"len"), GtVarD("len",97,"loc").
control_flow(101,102) :- NotEqD("flag",81,1), LtVarD("loc",84,"len"), GtVarD("len",97,"loc").
control_flow(102,103) :- NotEqD("flag",81,1), LtVarD("loc",84,"len"), GtVarD("len",97,"loc").
control_flow(103,104) :- NotEqD("flag",81,1), LtVarD("loc",84,"len"), GtVarD("len",97,"loc").
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl LtEqVar(x:symbol,loc:number,y:symbol)
.decl NotEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl GtVar(x:symbol,loc:number,y:symbol)
.decl LtVar(x:symbol,loc:number,y:symbol)
.decl GtEqVar(x:symbol,loc:number,y:symbol)
.decl Gt(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl NotEqD(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl GtVarD(x:symbol,loc:number,y:symbol)
.decl LtVarD(x:symbol,loc:number,y:symbol)
.decl GtEqVarD(x:symbol,loc:number,y:symbol)
.decl GtD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl EXIT(loc:number)
.decl AF_EXIT_T(interm_state:number,loc:number)
.decl AF_EXIT_S(loc:number)
.decl AF_EXIT(loc:number)
.decl AF_EXIT_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
NotEqD(x,loc,n) :- NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEqD(x,locI,n), control_flow(locI,loc), !NotEq(x,loc,_), !Eq(x,loc,_).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,_), !NotEq(x,loc,_).
GtVarD(x,loc,n) :- GtVar(x,loc,n).
GtVarD(x,loc,n) :- GtVarD(x,locI,n), control_flow(locI,loc), !GtVar(x,loc,_), !LtEqVar(x,loc,_).
LtVarD(x,loc,n) :- LtVar(x,loc,n).
LtVarD(x,loc,n) :- LtVarD(x,locI,n), control_flow(locI,loc), !LtVar(x,loc,_), !GtEqVar(x,loc,_).
GtEqVarD(x,loc,n) :- GtEqVar(x,loc,n).
GtEqVarD(x,loc,n) :- GtEqVarD(x,locI,n), control_flow(locI,loc), !GtEqVar(x,loc,_), !LtVar(x,loc,_).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,_), !LtEq(x,loc,_).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,_), !Gt(x,loc,_).
EXIT(loc) :- Return(_,loc).
AF_EXIT_T(interm_state,loc) :- AF_EXIT_T(tempOne,loc), !EXIT(tempOne), control_flow(tempOne,interm_state).
AF_EXIT_T(interm_state,loc) :- !EXIT(loc), control_flow(loc,interm_state).
AF_EXIT_S(loc) :- !EXIT(loc), control_flow(loc,tempOne), AF_EXIT_S(tempOne).
AF_EXIT_S(loc) :- AF_EXIT_T(loc,loc).
AF_EXIT(loc) :- State(loc), !AF_EXIT_S(loc).
AF_EXIT_Final(loc) :- Start(loc), AF_EXIT(loc), !NotTotal(loc).
.output LtEqVar
.output NotEq
.output Eq
.output GtVar
.output LtVar
.output GtEqVar
.output Gt
.output LtEq
.output Start
.output State
.output flow
.output Return
.output AF_EXIT_Final(IO=stdout)

/* Other information 

//-- Facts for Procedure <__VERIFIER_nondet_int> 

//-- Facts for Procedure <__infer_globals_initializer_flag> 

Flow(2,0). //@34:1-34:1
Flow(0,1). //@34:1-34:12
Stmt_Decl(0,[IStore(&#GB<benchmark/termination/3_cmus_Adding_Subtracting_Zero_3_NT.c|ice>$flag,0)]). // @34:1
Exit(1).  // @34:12
Start(2). // @34:1
//-- Facts for Procedure <main> 

Flow(2,3). //@69:1-71:5
Flow(0,1). //@83:5-84:1
Flow(15,20). //@77:5-77:12
Flow(20,18). //@77:12-77:12
Flow(20,19). //@77:12-77:12
Flow(19,16). //@77:12-79:9
Flow(18,0). //@77:12-83:5
Flow(17,15). //@81:9-77:5
Flow(16,17). //@79:9-81:9
Flow(10,15). //@75:5-77:5
Flow(7,13). //@75:9-75:9
Flow(7,14). //@75:9-75:9
Flow(14,8). //@75:9-76:9
Flow(13,12). //@75:9-75:22
Flow(12,9). //@75:22-75:22
Flow(12,11). //@75:22-75:22
Flow(11,8). //@75:22-76:9
Flow(9,10). //@75:22-75:5
Flow(8,1). //@76:9-84:1
Flow(6,7). //@74:5-75:9
Flow(5,6). //@73:5-74:5
Flow(4,5). //@72:5-73:5
Flow(3,4). //@71:5-72:5
Stmt_Decl(3,[IStore(&pos,0)]). // @71:5
Stmt_Decl(4,[ICall(_fun___VERIFIER_nondet_int,,n$13),IStore(&size,n$13)]). // @72:5
Stmt_BinaryOperatorStmt(5,Assign,[IStore(&#GB<benchmark/termination/3_cmus_Adding_Subtracting_Zero_3_NT.c|ice>$flag,0)]). // @73:5
Stmt_Decl(6,[IStore(&errno,0)]). // @74:5
Stmt_Return(8,[IStore(&return,0)]). // @76:9
PruneNode(9,false,[Prune(!(n$10 > 65536), false)]). // @75:22
PruneNode(11,true,[Prune((n$10 > 65536), true)]). // @75:22
Stmt_BinaryOperatorStmt(12,GT,[ILoad(&size,n$10)]). // @75:22
PruneNode(13,false,[Prune(!(n$9 <= 0), false)]). // @75:9
PruneNode(14,true,[Prune((n$9 <= 0), true)]). // @75:9
Stmt_BinaryOperatorStmt(7,LE,[ILoad(&size,n$9)]). // @75:9
Join(10,[]).  // @75:5
Stmt_Decl(16,[ILoad(&pos,n$4),ILoad(&size,n$5),ILoad(&pos,n$6),ICall(_fun_read,n$4,(n$5 - n$6),n$7),IStore(&rc,n$7)]). // @79:9
Stmt_BinaryOperatorStmt(17,Assign,[ILoad(&pos,n$2),ILoad(&rc,n$3),IStore(&pos,(n$2 + n$3))]). // @81:9
PruneNode(18,false,[Prune(!(n$0 < n$1), false)]). // @77:12
PruneNode(19,true,[Prune((n$0 < n$1), true)]). // @77:12
Stmt_BinaryOperatorStmt(20,LT,[ILoad(&pos,n$0),ILoad(&size,n$1)]). // @77:12
Join(15,[]).  // @77:5
Stmt_Return(0,[IStore(&return,0)]). // @83:5
Exit(1).  // @84:1
Start(2). // @69:1
//-- Facts for Procedure <read> 

Flow(2,21). //@35:1-37:5
Flow(0,15). //@65:5-65:5
Flow(15,1). //@65:5-66:1
Flow(20,19). //@40:5-40:12
Flow(19,17). //@40:12-40:12
Flow(19,18). //@40:12-40:12
Flow(18,27). //@40:12-42:9
Flow(17,0). //@40:12-65:5
Flow(16,20). //@43:9-40:5
Flow(10,14). //@43:13-43:13
Flow(10,7). //@43:13-43:13
Flow(7,13). //@43:13-45:13
Flow(14,32). //@43:13-49:17
Flow(13,1). //@45:13-66:1
Flow(12,16). //@53:13-43:9
Flow(11,8). //@53:17-53:17
Flow(11,9). //@53:17-53:17
Flow(9,6). //@53:17-55:17
Flow(8,3). //@53:17-60:17
Flow(6,20). //@55:17-40:5
Flow(5,4). //@61:17-61:17
Flow(4,1). //@61:17-66:1
Flow(3,5). //@60:17-61:17
Flow(34,11). //@52:13-53:17
Flow(33,34). //@51:13-52:13
Flow(29,33). //@49:13-51:13
Flow(32,30). //@49:17-49:17
Flow(32,31). //@49:17-49:17
Flow(31,28). //@49:17-50:17
Flow(30,29). //@49:17-49:13
Flow(28,29). //@50:17-49:13
Flow(27,10). //@42:9-43:13
Flow(25,20). //@38:5-40:5
Flow(22,24). //@38:9-38:9
Flow(22,26). //@38:9-38:9
Flow(26,23). //@38:9-39:9
Flow(24,25). //@38:9-38:5
Flow(23,1). //@39:9-66:1
Flow(21,22). //@37:5-38:9
Stmt_Decl(21,[IStore(&count,0)]). // @37:5
Stmt_Return(23,[IStore(&return,0)]). // @39:9
PruneNode(24,false,[Prune(!(n$18 == 1), false)]). // @38:9
PruneNode(26,true,[Prune((n$18 == 1), true)]). // @38:9
Stmt_BinaryOperatorStmt(22,EQ,[ILoad(&#GB<benchmark/termination/3_cmus_Adding_Subtracting_Zero_3_NT.c|ice>$flag,n$18)]). // @38:9
Join(25,[]).  // @38:5
Stmt_Decl(27,[ICall(_fun___VERIFIER_nondet_int,,n$16),IStore(&num,n$16)]). // @42:9
Stmt_BinaryOperatorStmt(28,Assign,[ILoad(&num,n$12),IStore(&num,-n$12)]). // @50:17
PruneNode(30,false,[Prune(!(n$11 < 0), false)]). // @49:17
PruneNode(31,true,[Prune((n$11 < 0), true)]). // @49:17
Stmt_BinaryOperatorStmt(32,LT,[ILoad(&num,n$11)]). // @49:17
Join(29,[]).  // @49:13
Stmt_BinaryOperatorStmt(33,Assign,[ILoad(&num,n$10),IStore(&num,(n$10 % 1000))]). // @51:13
Stmt_UnaryOperator(34,[ILoad(&count,n$9),IStore(&count,(n$9 + 1))]). // @52:13
Stmt_BinaryOperatorStmt(3,Assign,[IStore(&#GB<benchmark/termination/3_cmus_Adding_Subtracting_Zero_3_NT.c|ice>$flag,1)]). // @60:17
Stmt_Return(4,[IStore(&return,n$7)]). // @61:17
Stmt_Return(5,[ILoad(&count,n$7)]). // @61:17
Stmt_UnaryOperator(6,[ILoad(&loc,n$6),IStore(&loc,(n$6 + 1))]). // @55:17
PruneNode(8,false,[Prune(!(n$4 < 995), false)]). // @53:17
PruneNode(9,true,[Prune((n$4 < 995), true)]). // @53:17
Stmt_BinaryOperatorStmt(11,LT,[ILoad(&num,n$4)]). // @53:17
Join(12,[]).  // @53:13
Stmt_Return(13,[IStore(&return,-1)]). // @45:13
PruneNode(14,false,[Prune(!(n$3 == 0), false)]). // @43:13
PruneNode(7,true,[Prune((n$3 == 0), true)]). // @43:13
Stmt_BinaryOperatorStmt(10,EQ,[ILoad(&num,n$3)]). // @43:13
Join(16,[]).  // @43:9
PruneNode(17,false,[Prune(!(n$1 < n$2), false)]). // @40:12
PruneNode(18,true,[Prune((n$1 < n$2), true)]). // @40:12
Stmt_BinaryOperatorStmt(19,LT,[ILoad(&loc,n$1),ILoad(&len,n$2)]). // @40:12
Join(20,[]).  // @40:5
Stmt_Return(15,[IStore(&return,n$0)]). // @65:5
Stmt_Return(0,[ILoad(&count,n$0)]). // @65:5
Exit(1).  // @66:1
Start(2). // @35:1
*/

