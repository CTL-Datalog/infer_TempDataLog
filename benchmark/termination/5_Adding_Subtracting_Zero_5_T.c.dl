/*𝝐 */


/*(Start())@2 · ("head"=_)@3 · ("cyclic"="head")@4 · ("i"=_)@5 · ("i"=2)@6 · ((["i">"n"]@7 · ("i">"n")@8 · (Return(0))@9) \/ (["i"<="n"]@10 · ("i"<="n")@11 · (("n"-"i")<0)@12 · (Return(0))@13))*/

flow(2,3).
flow(3,4).
flow(4,5).
flow(5,6).
flow(7,8).
flow(8,9).
flow(9,9).
flow(10,11).
flow(11,12).
flow(12,13).
flow(13,13).
Start(2).
State(2).
State(3).
State(4).
LtEqVar("i",5,"n").
GtVar("i",5,"n").
State(5).
State(7).
GtVar("i",8,"n").
State(8).
Return(0,9).
State(9).
State(6).
State(10).
LtEqVar("i",11,"n").
State(11).
State(12).
Return(0,13).
State(13).
control_flow(6,7) :- GtVarD("i",6,"n").
control_flow(6,10) :- LtEqVarD("i",6,"n").
/*(Start())@16 · ("num"=_)@17 · ((["num"<=0]@18 · ("num"<=0)@19 · (Return(0))@20) \/ (["num">0]@21 · ("num">0)@22 · ((["num">65534]@23 · ("num">65534)@24 · (Return(0))@25) \/ (["num"<=65534]@26 · ("num"<=65534)@27 · ("list"=_)@28 · ("ip"=_)@29 · ((["ip"=0]@30 · ("ip"=0)@31 · (Return(0))@32) \/ ([("ip"!=0)]@33 · (("ip"!=0))@34 · ("nxt"="ip")@35 · ("nxt"="&ip.nxtact")@36 · (Return(0))@37))))))*/

flow(16,17).
flow(18,19).
flow(19,20).
flow(20,20).
flow(21,22).
flow(23,24).
flow(24,25).
flow(25,25).
flow(26,27).
flow(27,28).
flow(28,29).
flow(30,31).
flow(31,32).
flow(32,32).
flow(33,34).
flow(34,35).
flow(35,36).
flow(36,37).
flow(37,37).
Start(16).
State(16).
LtEq("num",17,65534).
Gt("num",17,65534).
LtEq("num",17,0).
Gt("num",17,0).
State(18).
LtEq("num",19,0).
LtEq("num",19,65534).
State(19).
Return(0,20).
State(20).
State(17).
State(21).
Gt("num",22,0).
State(23).
Gt("num",24,65534).
Gt("num",24,0).
State(24).
Return(0,25).
State(25).
State(22).
State(26).
LtEq("num",27,65534).
State(27).
State(28).
NotEq("ip",29,0).
Eq("ip",29,0).
State(30).
Eq("ip",31,0).
State(31).
Return(0,32).
State(32).
State(29).
State(33).
NotEq("ip",34,0).
State(34).
State(35).
State(36).
Return(0,37).
State(37).
control_flow(17,18) :- LtEqD("num",17,0).
control_flow(17,21) :- GtD("num",17,0).
control_flow(22,23) :- GtD("num",22,65534).
control_flow(22,26) :- LtEqD("num",22,65534).
control_flow(29,30) :- EqD("ip",29,0).
control_flow(29,33) :- NotEqD("ip",29,0).
/*𝝐 */


//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl Gt(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl LtEqVar(x:symbol,loc:number,y:symbol)
.decl GtVar(x:symbol,loc:number,y:symbol)
.decl NotEqD(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl GtD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl LtEqVarD(x:symbol,loc:number,y:symbol)
.decl GtVarD(x:symbol,loc:number,y:symbol)
.decl EXITPred(loc:number)
.decl AF_EXITPred_T(interm_state:number,loc:number)
.decl AF_EXITPred_S(loc:number)
.decl AF_EXITPred(loc:number)
.decl AF_EXITPred_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
NotEqD(x,loc,n) :- NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEqD(x,locI,n), control_flow(locI,loc), !NotEq(x,loc,n), !Eq(x,loc,n).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,n), !NotEq(x,loc,n).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,n), !LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,n), !Gt(x,loc,n).
LtEqVarD(x,loc,n) :- LtEqVar(x,loc,n).
LtEqVarD(x,loc,n) :- LtEqVarD(x,locI,n), control_flow(locI,loc), !LtEqVar(x,loc,n), !GtVar(x,loc,n).
GtVarD(x,loc,n) :- GtVar(x,loc,n).
GtVarD(x,loc,n) :- GtVarD(x,locI,n), control_flow(locI,loc), !GtVar(x,loc,n), !LtEqVar(x,loc,n).
EXITPred(loc) :- Return(_,loc).
AF_EXITPred_T(interm_state,loc) :- AF_EXITPred_T(tempOne,loc), !EXITPred(tempOne), control_flow(tempOne,interm_state).
AF_EXITPred_T(interm_state,loc) :- !EXITPred(loc), control_flow(loc,interm_state).
AF_EXITPred_S(loc) :- !EXITPred(loc), control_flow(loc,tempOne), AF_EXITPred_S(tempOne).
AF_EXITPred_S(loc) :- AF_EXITPred_T(loc,loc).
AF_EXITPred(loc) :- State(loc), !AF_EXITPred_S(loc).
AF_EXITPred_Final(loc) :- Start(loc), AF_EXITPred(loc), !NotTotal(loc).
.output NotEq
.output Eq
.output Gt
.output LtEq
.output LtEqVar
.output GtVar
.output Start
.output State
.output flow
.output Return
.output AF_EXITPred_Final(IO=stdout)

.output NotTotal(IO=stdout)

