/*(Join())@16*/

flow(16,16).
State(16).

/*(Start())@28 · (val=_)@29 · (([val=0]@30 · (Return(0))@31) \/ ([(val!=0)]@32 · (bits=0)@33 · (([val=0]@34 · (Return(0))@35) \/ (((([(val!=0)]@36 · [val<0]@37 · ((val!=0))@38 · (val>0)@39)^w) \/ ([(val!=0)]@40 · [val>0]@42 · (val=0)@43 · (val=(val-1))@44 · (bits=(bits+1))@45 · (Return(0))@46))))))*/

flow(28,29).
flow(31,31).
flow(35,35).
flow(39,39).
flow(39,36).
flow(46,46).
Start(28).
Eq("val",28,0).
Lt("val",28,0).
NotEq("val",28,0). // delete this line 
Gt("val",28,0).
State(28).
State(30).
Return(0,31).
State(31).
State(29).
State(32).
State(34).
Return(0,35).
State(35).
State(36).
State(37).
State(38).
State(39).
State(33).
State(40).
State(42).
Eq("val",43,0).
State(43).
Lt("val",44,0).
NotEq("val",44,0).
State(44).
State(45).
Return(0,46).
State(46).
control_flow(29,30) :- EqD("val",29,0).
control_flow(30,31) :- EqD("val",29,0).
control_flow(29,32) :- NotEqD("val",29,0).
control_flow(32,33) :- NotEqD("val",29,0).
control_flow(33,34) :- NotEqD("val",29,0), EqD("val",33,0).
control_flow(34,35) :- NotEqD("val",29,0), EqD("val",33,0).
control_flow(33,36) :- NotEqD("val",29,0), NotEqD("val",33,0).
control_flow(36,37) :- NotEqD("val",29,0), NotEqD("val",33,0), LtD("val",36,0).
control_flow(37,38) :- NotEqD("val",29,0), NotEqD("val",33,0), LtD("val",36,0).
control_flow(38,39) :- NotEqD("val",29,0), NotEqD("val",33,0), LtD("val",36,0).
control_flow(33,40) :- NotEqD("val",29,0), NotEqD("val",33,0).
control_flow(40,42) :- NotEqD("val",29,0), NotEqD("val",33,0), GtD("val",40,0).
control_flow(42,43) :- NotEqD("val",29,0), NotEqD("val",33,0), GtD("val",40,0).
control_flow(43,44) :- NotEqD("val",29,0), NotEqD("val",33,0), GtD("val",40,0).
control_flow(44,45) :- NotEqD("val",29,0), NotEqD("val",33,0), GtD("val",40,0).
control_flow(45,46) :- NotEqD("val",29,0), NotEqD("val",33,0), GtD("val",40,0).
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl GtEq(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl Gt(x:symbol,loc:number,n:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl Lt(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl GtD(x:symbol,loc:number,n:number)
.decl LtD(x:symbol,loc:number,n:number)
.decl NotEqD(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl EXIT(loc:number)
.decl AF_EXIT_T(interm_state:number,loc:number)
.decl AF_EXIT_S(loc:number)
.decl AF_EXIT(loc:number)
.decl AF_EXIT_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,_), !LtEq(x,loc,_).
LtD(x,loc,n) :- Lt(x,loc,n).
LtD(x,loc,n) :- LtD(x,locI,n), control_flow(locI,loc), !Lt(x,loc,_), !GtEq(x,loc,_).
NotEqD(x,loc,n) :- NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEqD(x,locI,n), control_flow(locI,loc), !NotEq(x,loc,_), !Eq(x,loc,_).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,_), !NotEq(x,loc,_).
EXIT(loc) :- Return(_,loc).
AF_EXIT_T(interm_state,loc) :- AF_EXIT_T(tempOne,loc), !EXIT(tempOne), control_flow(tempOne,interm_state).
AF_EXIT_T(interm_state,loc) :- !EXIT(loc), control_flow(loc,interm_state).
AF_EXIT_S(loc) :- !EXIT(loc), control_flow(loc,tempOne), AF_EXIT_S(tempOne).
AF_EXIT_S(loc) :- AF_EXIT_T(loc,loc).
AF_EXIT(loc) :- State(loc), !AF_EXIT_S(loc).
AF_EXIT_Final(loc) :- Start(loc), AF_EXIT(loc), !NotTotal(loc).
.output GtEq
.output LtEq
.output Gt
.output NotEq
.output Lt
.output Eq
.output Start
.output State
.output flow
.output Return
.output AF_EXIT_Final(IO=stdout)

/* Other information 

//-- Facts for Procedure <__VERIFIER_nondet_int> 

//-- Facts for Procedure <main> 

Flow(14,0). //@12:1-14:5
Flow(10,4). //@20:5-21:1
Flow(13,12). //@18:5-18:21
Flow(6,13). //@18:10-18:5
Flow(8,13). //@18:32-18:5
Flow(12,9). //@18:21-18:21
Flow(12,11). //@18:21-18:21
Flow(11,7). //@18:21-19:9
Flow(9,10). //@18:21-20:5
Flow(7,8). //@19:9-18:32
Flow(5,6). //@15:5-18:10
Flow(1,3). //@15:10-16:9
Flow(2,5). //@15:10-15:5
Flow(3,4). //@16:9-21:1
Flow(0,2). //@14:5-15:10
Flow(0,1). //@14:5-15:10
Stmt_Decl(0,[ICall(_fun___VERIFIER_nondet_int,,n$7),IStore(&val,n$7)]). // @14:5
Stmt_Return(3,[IStore(&return,0)]). // @16:9
PruneNode(2,false,[ILoad(&val,n$4),Prune(n$4, false)]). // @15:10
PruneNode(1,true,[ILoad(&val,n$4),Prune(!n$4, true)]). // @15:10
Join(5,[]).  // @15:5
Stmt_BinaryOperatorStmt(7,ShrAssign,[ILoad(&val,n$2),IStore(&val,(n$2 >> 1))]). // @19:9
PruneNode(9,false,[Prune(!(n$1 != 0), false)]). // @18:21
PruneNode(11,true,[Prune((n$1 != 0), true)]). // @18:21
Stmt_BinaryOperatorStmt(12,NE,[ILoad(&val,n$1)]). // @18:21
Stmt_UnaryOperator(8,[ILoad(&bits,n$0),IStore(&bits,(n$0 + 1))]). // @18:32
Stmt_BinaryOperatorStmt(6,Assign,[IStore(&bits,0)]). // @18:10
Join(13,[]).  // @18:5
Stmt_Return(10,[IStore(&return,0)]). // @20:5
Exit(4).  // @21:1
Start(14). // @12:1
*/

