/*𝝐 */


/*(Start())@3 · ("val"=_)@4 · ((["val"=0]@5 · ("val"=0)@6 · (Return(0))@7) \/ ([("val"!=0)]@8 · (("val"!=0))@9 · ("bits"=0)@10 · ((["val"=0]@11 · ("val"=0)@12 · (Return(0))@13) \/ ([("val"!=0)]@14 · (("val"!=0))@15 · ((("val"!=0))@16)^w))))*/

flow(3,4).
flow(5,6).
flow(6,7).
flow(7,7).
flow(8,9).
flow(9,10).
flow(11,12).
flow(12,13).
flow(13,13).
flow(14,15).
flow(15,16).
flow(16,16).
Start(3).
State(3).
NotEq("val",4,0).
Eq("val",4,0).
State(5).
Eq("val",6,0).
State(6).
Return(0,7).
State(7).
State(4).
State(8).
NotEq("val",9,0).
State(9).
State(11).
Eq("val",12,0).
State(12).
Return(0,13).
State(13).
State(10).
State(14).
NotEq("val",15,0).
State(15).
NotEq("val",16,0).
State(16).
control_flow(4,5) :- EqD("val",4,0).
control_flow(4,8) :- NotEqD("val",4,0).
control_flow(10,11) :- EqD("val",10,0).
control_flow(10,14) :- NotEqD("val",10,0).
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl NotEqD(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl EXITPred(loc:number)
.decl AF_EXITPred_T(interm_state:number,loc:number)
.decl AF_EXITPred_S(loc:number)
.decl AF_EXITPred(loc:number)
.decl AF_EXITPred_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
NotEqD(x,loc,n) :- NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEqD(x,locI,n), control_flow(locI,loc), !NotEq(x,loc,n), !Eq(x,loc,n).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,n), !NotEq(x,loc,n).
EXITPred(loc) :- Return(_,loc).
AF_EXITPred_T(interm_state,loc) :- AF_EXITPred_T(tempOne,loc), !EXITPred(tempOne), control_flow(tempOne,interm_state).
AF_EXITPred_T(interm_state,loc) :- !EXITPred(loc), control_flow(loc,interm_state).
AF_EXITPred_S(loc) :- !EXITPred(loc), control_flow(loc,tempOne), AF_EXITPred_S(tempOne).
AF_EXITPred_S(loc) :- AF_EXITPred_T(loc,loc).
AF_EXITPred(loc) :- State(loc), !AF_EXITPred_S(loc).
AF_EXITPred_Final(loc) :- Start(loc), AF_EXITPred(loc), !NotTotal(loc).
.output NotEq
.output Eq
.output Start
.output State
.output flow
.output Return
.output AF_EXITPred_Final(IO=stdout)

.output NotTotal(IO=stdout)

