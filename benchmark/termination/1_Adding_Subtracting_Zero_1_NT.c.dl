/*(⊤)@0*/

State(0).

/*(Start())@1 · (linesToRead=_)@2 · (([linesToRead<0]@4 · ((Return(0))@5)^w) \/ ([!(linesToRead<0)]@7 · (h=_)@9 · (((([(h<=0)]@12 · ((h<=0))@21 · ((Return(0))@20)^w) \/ ([h>0∧linesToRead>0]@23 · ((h<=0))@21 · ((Return(0))@20)^w))) \/ (([h>0∧(linesToRead<=0)]@24 · [h>0]@22)^w))))*/

flow(1,2).
flow(5,5).
flow(20,20).
flow(22,24).
Start(1).
State(1).
Lt("linesToRead",2,0).
Gt("linesToRead",2,0).
GtEq("linesToRead",2,0).
LtEq("linesToRead",2,0). // Repair is to delete this fact
State(4).
Return(0,5).
State(5).
State(2).
State(7).
LtEq("h",9,0).
Gt("h",9,0).
State(12).
State(23).
LtEq("h",21,0).
State(21).
Return(0,20).
State(20).
State(9).
State(24).
State(22).
flow(2,4) :- LtD("linesToRead",2,0).
flow(4,5) :- LtD("linesToRead",2,0).
flow(2,7) :- GtEqD("linesToRead",2,0).
flow(7,9) :- GtEqD("linesToRead",2,0).
flow(9,12) :- GtEqD("linesToRead",2,0), LtEqD("h",9,0).
flow(12,21) :- GtEqD("linesToRead",2,0), LtEqD("h",9,0).
flow(21,20) :- GtEqD("linesToRead",2,0), LtEqD("h",9,0).
flow(9,23) :- GtEqD("linesToRead",2,0), GtD("h",9,0), GtD("linesToRead",9,0).
flow(23,21) :- GtEqD("linesToRead",2,0), GtD("h",9,0), GtD("linesToRead",9,0).
flow(21,20) :- GtEqD("linesToRead",2,0), GtD("h",9,0), GtD("linesToRead",9,0).
flow(9,24) :- GtEqD("linesToRead",2,0), GtD("h",9,0), LtEqD("linesToRead",9,0).
flow(24,22) :- GtEqD("linesToRead",2,0), GtD("h",9,0), LtEqD("linesToRead",9,0), GtD("h",24,0).
//AF(EXIT())
.decl Start(x:number)
.decl valuation(x:symbol,loc:number,n:number)
.decl GtD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl LtD(x:symbol,loc:number,n:number)
.decl GtEqD(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl Gt(x:symbol,loc:number,n:number)
.decl Lt(x:symbol,loc:number,n:number)
.decl GtEq(x:symbol,loc:number,n:number)
.decl Return(n:number,x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl EXIT(loc:number)
.decl AF_EXIT_T(interm_state:number,loc:number)
.decl AF_EXIT_S(loc:number)
.decl AF_EXIT(loc:number)
.decl AF_EXIT_Final(loc:number)transFlow(x,y) :- flow(x,y).
transFlow(x,z) :- flow(x,y), transFlow(y,z).
valuation(x,loc,n) :- Eq(x,loc,n).
valuation(x,loc,n) :- valuation(x,locI,n), flow(locI,loc), !Eq(x,loc,_).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), flow(locI,loc), !Eq(x,loc,_).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), flow(locI,loc), !Eq(x,loc,_).
LtD(x,loc,n) :- Lt(x,loc,n).
LtD(x,loc,n) :- LtD(x,locI,n), flow(locI,loc), !Eq(x,loc,_).
GtEqD(x,loc,n) :- GtEq(x,loc,n).
GtEqD(x,loc,n) :- GtEqD(x,locI,n), flow(locI,loc), !Eq(x,loc,_).
EXIT(loc) :- Return(_,loc).
AF_EXIT_T(interm_state,loc) :- AF_EXIT_T(tempOne,loc), !EXIT(tempOne), flow(tempOne,interm_state).
AF_EXIT_T(interm_state,loc) :- !EXIT(loc), flow(loc,interm_state).
AF_EXIT_S(loc) :- !EXIT(loc), flow(loc,tempOne), AF_EXIT_S(tempOne).
AF_EXIT_S(loc) :- AF_EXIT_T(loc,loc).
AF_EXIT(loc) :- State(loc), !AF_EXIT_S(loc).
AF_EXIT_Final(loc) :- Start(loc), AF_EXIT(loc).
.output AF_EXIT_Final(IO=stdout)

/* Other information 

//-- Facts for Procedure <__VERIFIER_nondet_int> 

//-- Facts for Procedure <main> 

Flow(1,2). //@11:1-13:5
Flow(20,6). //@23:5-24:1
Flow(10,11). //@17:5-17:12
Flow(11,19). //@17:12-17:12
Flow(11,12). //@17:12-17:12
Flow(12,13). //@17:12-19:13
Flow(19,20). //@17:12-23:5
Flow(17,10). //@21:9-17:5
Flow(16,17). //@19:9-21:9
Flow(13,18). //@19:13-19:13
Flow(13,14). //@19:13-19:13
Flow(14,15). //@19:13-20:13
Flow(18,16). //@19:13-19:9
Flow(15,16). //@20:13-19:9
Flow(9,10). //@16:5-17:5
Flow(8,9). //@14:5-16:5
Flow(3,7). //@14:9-14:9
Flow(3,4). //@14:9-14:9
Flow(4,5). //@14:9-15:9
Flow(7,8). //@14:9-14:5
Flow(5,6). //@15:9-24:1
Flow(2,3). //@13:5-14:9
Stmt_Decl(2,[ICall(_fun___VERIFIER_nondet_int,,n$13),IStore(&linesToRead,n$13)]). // @13:5
Stmt_Return(5,[IStore(&return,0)]). // @15:9
PruneNode(7,false,[Prune(!(n$10 < 0), false)]). // @14:9
PruneNode(4,true,[Prune((n$10 < 0), true)]). // @14:9
Stmt_BinaryOperatorStmt(3,LT,[ILoad(&linesToRead,n$10)]). // @14:9
Join(8,[]).  // @14:5
Stmt_Decl(9,[ICall(_fun___VERIFIER_nondet_int,,n$9),IStore(&h,n$9)]). // @16:5
Stmt_BinaryOperatorStmt(15,Assign,[ILoad(&h,n$5),IStore(&linesToRead,n$5)]). // @20:13
PruneNode(18,false,[Prune(!(n$3 > n$4), false)]). // @19:13
PruneNode(14,true,[Prune((n$3 > n$4), true)]). // @19:13
Stmt_BinaryOperatorStmt(13,GT,[ILoad(&linesToRead,n$3),ILoad(&h,n$4)]). // @19:13
Join(16,[]).  // @19:9
Stmt_BinaryOperatorStmt(17,SubAssign,[ILoad(&linesToRead,n$1),ILoad(&h,n$2),IStore(&h,(n$2 - n$1))]). // @21:9
PruneNode(19,false,[Prune(!(n$0 > 0), false)]). // @17:12
PruneNode(12,true,[Prune((n$0 > 0), true)]). // @17:12
Stmt_BinaryOperatorStmt(11,GT,[ILoad(&h,n$0)]). // @17:12
Join(10,[]).  // @17:5
Stmt_Return(20,[IStore(&return,0)]). // @23:5
Exit(6).  // @24:1
Start(1). // @11:1
*/

