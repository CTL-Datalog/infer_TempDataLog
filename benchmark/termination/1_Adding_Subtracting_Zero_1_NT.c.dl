/*(Join())@0*/

State(0).

/*(Start())@1 · (linesToRead=_)@2 · (([linesToRead<=0]@4 · ((Return(0))@5)^w) \/ ([!(linesToRead<=0)]@7 · (Join())@8 · (h=_)@9 · [(h<=0)]@12 · ((h<=0))@21 · ((Return(0))@20)^w))*/

flow(1,2).
flow(5,5).
flow(8,9).
flow(20,20).
Start(1).
LtEq("linesToRead",1,0).
Gt("linesToRead",1,0).
LtEq("h",1,0).
State(1).
State(4).
Return(0,5).
State(5).
State(2).
State(7).
State(8).
State(9).
State(12).
State(21).
Return(0,20).
State(20).
control_flow(2,4) :- LtEqD("linesToRead",2,0).
control_flow(4,5) :- LtEqD("linesToRead",4,0).
control_flow(2,7) :- GtD("linesToRead",2,0).
control_flow(7,8) :- GtD("linesToRead",7,0).
control_flow(9,12) :- LtEqD("h",9,0).
control_flow(12,21) :- LtEqD("h",12,0).
control_flow(21,20) :- LtEqD("h",21,0).
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl Gt(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl GtD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl EXIT(loc:number)
.decl AF_EXIT_T(interm_state:number,loc:number)
.decl AF_EXIT_S(loc:number)
.decl AF_EXIT(loc:number)
.decl AF_EXIT_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,_).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,_).
EXIT(loc) :- Return(_,loc).
AF_EXIT_T(interm_state,loc) :- AF_EXIT_T(tempOne,loc), !EXIT(tempOne), control_flow(tempOne,interm_state).
AF_EXIT_T(interm_state,loc) :- !EXIT(loc), control_flow(loc,interm_state).
AF_EXIT_S(loc) :- !EXIT(loc), control_flow(loc,tempOne), AF_EXIT_S(tempOne).
AF_EXIT_S(loc) :- AF_EXIT_T(loc,loc).
AF_EXIT(loc) :- State(loc), !AF_EXIT_S(loc).
AF_EXIT_Final(loc) :- Start(loc), AF_EXIT(loc), !NotTotal(loc).
.output Gt
.output LtEq
.output Start
.output State
.output flow
.output Return
.output AF_EXIT_Final(IO=stdout)

