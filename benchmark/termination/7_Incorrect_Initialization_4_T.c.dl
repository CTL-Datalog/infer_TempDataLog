/*𝝐 */


/*(Start())@2 · ("h"=_)@3 · ("hash"=_)@4 · ("rehash"=_)@5 · ((["h"<0]@6 · ("h"<0)@7 · (Return(0))@8) \/ (["h">=0]@9 · ("h">=0)@10 · ((["hash"<=0]@11 · ("hash"<=0)@12 · (Return(0))@13) \/ (["hash">0]@14 · ("hash">0)@15 · ((["rehash"<=0]@16 · ("rehash"<=0)@17 · (Return(0))@18) \/ (["rehash">0]@19 · ("rehash">0)@20 · ((["rehash">"hash"]@21 · ("rehash">"hash")@22 · (Return(0))@23) \/ (["rehash"<="hash"]@24 · ("rehash"<="hash")@25 · ((["hash">65534]@26 · ("hash">65534)@27 · (Return(0))@28) \/ (["hash"<=65534]@29 · ("hash"<=65534)@30 · ("r"=0)@31 · ((["i">="hash"]@32 · ("i">="hash")@33 · (Return(0))@34) \/ (["i"<"hash"]@35 · ("i"<"hash")@36 · ("hash"="i")@37 · (Return(0))@38))))))))))))*/

flow(2,3).
flow(3,4).
flow(4,5).
flow(6,7).
flow(7,8).
flow(8,8).
flow(9,10).
flow(11,12).
flow(12,13).
flow(13,13).
flow(14,15).
flow(16,17).
flow(17,18).
flow(18,18).
flow(19,20).
flow(21,22).
flow(22,23).
flow(23,23).
flow(24,25).
flow(26,27).
flow(27,28).
flow(28,28).
flow(29,30).
flow(30,31).
flow(32,33).
flow(33,34).
flow(34,34).
flow(35,36).
flow(36,37).
flow(37,38).
flow(38,38).
Start(2).
State(2).
GtEq("h",3,0).
Lt("h",3,0).
State(3).
GtEqVar("i",4,"hash").
LtVar("i",4,"hash").
LtEq("hash",4,65534).
Gt("hash",4,65534).
LtEqVar("rehash",4,"hash").
GtVar("rehash",4,"hash").
LtEq("hash",4,0).
Gt("hash",4,0).
State(4).
LtEqVar("rehash",5,"hash").
GtVar("rehash",5,"hash").
LtEq("rehash",5,0).
Gt("rehash",5,0).
State(6).
Lt("h",7,0).
State(7).
Return(0,8).
State(8).
State(5).
State(9).
GtEq("h",10,0).
State(11).
LtEq("hash",12,0).
LtEq("hash",12,65534).
State(12).
Return(0,13).
State(13).
State(10).
State(14).
Gt("hash",15,0).
State(16).
LtEq("rehash",17,0).
State(17).
Return(0,18).
State(18).
State(15).
State(19).
Gt("rehash",20,0).
State(21).
GtVar("rehash",22,"hash").
State(22).
Return(0,23).
State(23).
State(20).
State(24).
LtEqVar("rehash",25,"hash").
State(26).
Gt("hash",27,65534).
Gt("hash",27,0).
State(27).
Return(0,28).
State(28).
State(25).
State(29).
LtEq("hash",30,65534).
State(30).
State(32).
GtEqVar("i",33,"hash").
State(33).
Return(0,34).
State(34).
State(31).
State(35).
LtVar("i",36,"hash").
State(36).
GtEqVar("i",37,"hash").
State(37).
Return(0,38).
State(38).
control_flow(5,6) :- LtD("h",5,0).
control_flow(5,9) :- GtEqD("h",5,0).
control_flow(10,11) :- LtEqD("hash",10,0).
control_flow(10,14) :- GtD("hash",10,0).
control_flow(15,16) :- LtEqD("rehash",15,0).
control_flow(15,19) :- GtD("rehash",15,0).
control_flow(20,21) :- GtVarD("rehash",20,"hash").
control_flow(20,24) :- LtEqVarD("rehash",20,"hash").
control_flow(25,26) :- GtD("hash",25,65534).
control_flow(25,29) :- LtEqD("hash",25,65534).
control_flow(31,32) :- GtEqVarD("i",31,"hash").
control_flow(31,35) :- LtVarD("i",31,"hash").
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl LtVar(x:symbol,loc:number,y:symbol)
.decl GtEqVar(x:symbol,loc:number,y:symbol)
.decl LtEqVar(x:symbol,loc:number,y:symbol)
.decl GtVar(x:symbol,loc:number,y:symbol)
.decl Gt(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl GtEq(x:symbol,loc:number,n:number)
.decl Lt(x:symbol,loc:number,n:number)
.decl LtVarD(x:symbol,loc:number,y:symbol)
.decl GtEqVarD(x:symbol,loc:number,y:symbol)
.decl LtEqVarD(x:symbol,loc:number,y:symbol)
.decl GtVarD(x:symbol,loc:number,y:symbol)
.decl GtD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl GtEqD(x:symbol,loc:number,n:number)
.decl LtD(x:symbol,loc:number,n:number)
.decl EXITPred(loc:number)
.decl AF_EXITPred_T(interm_state:number,loc:number)
.decl AF_EXITPred_S(loc:number)
.decl AF_EXITPred(loc:number)
.decl AF_EXITPred_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
LtVarD(x,loc,n) :- LtVar(x,loc,n).
LtVarD(x,loc,n) :- LtVarD(x,locI,n), control_flow(locI,loc), !LtVar(x,loc,n), !GtEqVar(x,loc,n).
GtEqVarD(x,loc,n) :- GtEqVar(x,loc,n).
GtEqVarD(x,loc,n) :- GtEqVarD(x,locI,n), control_flow(locI,loc), !GtEqVar(x,loc,n), !LtVar(x,loc,n).
LtEqVarD(x,loc,n) :- LtEqVar(x,loc,n).
LtEqVarD(x,loc,n) :- LtEqVarD(x,locI,n), control_flow(locI,loc), !LtEqVar(x,loc,n), !GtVar(x,loc,n).
GtVarD(x,loc,n) :- GtVar(x,loc,n).
GtVarD(x,loc,n) :- GtVarD(x,locI,n), control_flow(locI,loc), !GtVar(x,loc,n), !LtEqVar(x,loc,n).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,n), !LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,n), !Gt(x,loc,n).
GtEqD(x,loc,n) :- GtEq(x,loc,n).
GtEqD(x,loc,n) :- GtEqD(x,locI,n), control_flow(locI,loc), !GtEq(x,loc,n), !Lt(x,loc,n).
LtD(x,loc,n) :- Lt(x,loc,n).
LtD(x,loc,n) :- LtD(x,locI,n), control_flow(locI,loc), !Lt(x,loc,n), !GtEq(x,loc,n).
EXITPred(loc) :- Return(_,loc).
AF_EXITPred_T(interm_state,loc) :- AF_EXITPred_T(tempOne,loc), !EXITPred(tempOne), control_flow(tempOne,interm_state).
AF_EXITPred_T(interm_state,loc) :- !EXITPred(loc), control_flow(loc,interm_state).
AF_EXITPred_S(loc) :- !EXITPred(loc), control_flow(loc,tempOne), AF_EXITPred_S(tempOne).
AF_EXITPred_S(loc) :- AF_EXITPred_T(loc,loc).
AF_EXITPred(loc) :- State(loc), !AF_EXITPred_S(loc).
AF_EXITPred_Final(loc) :- Start(loc), AF_EXITPred(loc), !NotTotal(loc).
.output LtVar
.output GtEqVar
.output LtEqVar
.output GtVar
.output Gt
.output LtEq
.output GtEq
.output Lt
.output Start
.output State
.output flow
.output Return
.output AF_EXITPred_Final(IO=stdout)

.output NotTotal(IO=stdout)

/* Other information 

//-- Facts for Procedure <__VERIFIER_nondet_int> 

//-- Facts for Procedure <main> 

Flow(33,0). //@12:1-14:5
Flow(30,5). //@26:5-27:1
Flow(23,32). //@21:5-21:12
Flow(32,29). //@21:12-21:12
Flow(32,31). //@21:12-21:12
Flow(31,26). //@21:12-23:14
Flow(31,27). //@21:12-23:14
Flow(29,30). //@21:12-26:5
Flow(28,23). //@24:9-21:5
Flow(25,28). //@23:9-24:9
Flow(27,24). //@23:14-23:18
Flow(26,25). //@23:14-23:9
Flow(24,25). //@23:18-23:9
Flow(22,23). //@20:5-21:5
Flow(21,22). //@19:5-20:5
Flow(7,21). //@17:5-19:5
Flow(3,19). //@17:9-17:9
Flow(3,20). //@17:9-17:9
Flow(20,4). //@17:9-18:9
Flow(19,18). //@17:9-17:18
Flow(18,16). //@17:18-17:18
Flow(18,17). //@17:18-17:18
Flow(17,4). //@17:18-18:9
Flow(16,15). //@17:18-17:31
Flow(15,13). //@17:31-17:31
Flow(15,14). //@17:31-17:31
Flow(14,4). //@17:31-18:9
Flow(13,12). //@17:31-17:46
Flow(12,10). //@17:46-17:46
Flow(12,11). //@17:46-17:46
Flow(11,4). //@17:46-18:9
Flow(10,9). //@17:46-17:63
Flow(9,6). //@17:63-17:63
Flow(9,8). //@17:63-17:63
Flow(8,4). //@17:63-18:9
Flow(6,7). //@17:63-17:5
Flow(4,5). //@18:9-27:1
Flow(2,3). //@16:5-17:9
Flow(1,2). //@15:5-16:5
Flow(0,1). //@14:5-15:5
Stmt_Decl(0,[ICall(_fun___VERIFIER_nondet_int,,n$21),IStore(&h,n$21)]). // @14:5
Stmt_Decl(1,[ICall(_fun___VERIFIER_nondet_int,,n$20),IStore(&hash,n$20)]). // @15:5
Stmt_Decl(2,[ICall(_fun___VERIFIER_nondet_int,,n$19),IStore(&rehash,n$19)]). // @16:5
Stmt_Return(4,[IStore(&return,0)]). // @18:9
PruneNode(6,false,[Prune(!(n$16 > 65534), false)]). // @17:63
PruneNode(8,true,[Prune((n$16 > 65534), true)]). // @17:63
Stmt_BinaryOperatorStmt(9,GT,[ILoad(&hash,n$16)]). // @17:63
PruneNode(10,false,[Prune(!(n$14 > n$15), false)]). // @17:46
PruneNode(11,true,[Prune((n$14 > n$15), true)]). // @17:46
Stmt_BinaryOperatorStmt(12,GT,[ILoad(&rehash,n$14),ILoad(&hash,n$15)]). // @17:46
PruneNode(13,false,[Prune(!(n$13 <= 0), false)]). // @17:31
PruneNode(14,true,[Prune((n$13 <= 0), true)]). // @17:31
Stmt_BinaryOperatorStmt(15,LE,[ILoad(&rehash,n$13)]). // @17:31
PruneNode(16,false,[Prune(!(n$12 <= 0), false)]). // @17:18
PruneNode(17,true,[Prune((n$12 <= 0), true)]). // @17:18
Stmt_BinaryOperatorStmt(18,LE,[ILoad(&hash,n$12)]). // @17:18
PruneNode(19,false,[Prune(!(n$11 < 0), false)]). // @17:9
PruneNode(20,true,[Prune((n$11 < 0), true)]). // @17:9
Stmt_BinaryOperatorStmt(3,LT,[ILoad(&h,n$11)]). // @17:9
Join(7,[]).  // @17:5
Stmt_Decl(21,[ILoad(&h,n$9),ILoad(&hash,n$10),IStore(&i,(n$9 % n$10))]). // @19:5
Stmt_Decl(22,[IStore(&r,0)]). // @20:5
Stmt_BinaryOperatorStmt(24,Assign,[ILoad(&h,n$4),ILoad(&rehash,n$5),IStore(&r,((n$4 % n$5) + 1))]). // @23:18
PruneNode(26,false,[ILoad(&r,n$3),Prune(n$3, false)]). // @23:14
PruneNode(27,true,[ILoad(&r,n$3),Prune(!n$3, true)]). // @23:14
Join(25,[]).  // @23:9
Stmt_BinaryOperatorStmt(28,AddAssign,[ILoad(&i,n$2),IStore(&i,(n$2 + 1))]). // @24:9
PruneNode(29,false,[Prune(!(n$0 < n$1), false)]). // @21:12
PruneNode(31,true,[Prune((n$0 < n$1), true)]). // @21:12
Stmt_BinaryOperatorStmt(32,LT,[ILoad(&i,n$0),ILoad(&hash,n$1)]). // @21:12
Join(23,[]).  // @21:5
Stmt_Return(30,[IStore(&return,0)]). // @26:5
Exit(5).  // @27:1
Start(33). // @12:1
*/

