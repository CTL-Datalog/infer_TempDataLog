/*𝝐 */


/*(Start())@2 · ("h"=_)@3 · ("hash"=_)@4 · ("rehash"=_)@5 · ((["h"<0]@6 · ("h"<0)@7 · (Return(0))@8) \/ (["h">=0]@9 · ("h">=0)@10 · ((["hash"<=0]@11 · ("hash"<=0)@12 · (Return(0))@13) \/ (["hash">0]@14 · ("hash">0)@15 · ((["rehash"<=0]@16 · ("rehash"<=0)@17 · (Return(0))@18) \/ (["rehash">0]@19 · ("rehash">0)@20 · ((["rehash">"hash"]@21 · ("rehash">"hash")@22 · (Return(0))@23) \/ (["rehash"<="hash"]@24 · ("rehash"<="hash")@25 · ((["hash">65534]@26 · ("hash">65534)@27 · (Return(0))@28) \/ (["hash"<=65534]@29 · ("hash"<=65534)@30 · ("r"=0)@31 · ((["i">="hash"]@32 · ("i">="hash")@33 · (Return(0))@34) \/ (["i"<"hash"]@35 · ("i"<"hash")@36 · ("hash"="i")@37 · (Return(0))@38))))))))))))*/

flow(2,3).
flow(3,4).
flow(4,5).
flow(6,7).
flow(7,8).
flow(8,8).
flow(9,10).
flow(11,12).
flow(12,13).
flow(13,13).
flow(14,15).
flow(16,17).
flow(17,18).
flow(18,18).
flow(19,20).
flow(21,22).
flow(22,23).
flow(23,23).
flow(24,25).
flow(26,27).
flow(27,28).
flow(28,28).
flow(29,30).
flow(30,31).
flow(32,33).
flow(33,34).
flow(34,34).
flow(35,36).
flow(36,37).
flow(37,38).
flow(38,38).
Start(2).
State(2).
GtEq("h",3,0).
Lt("h",3,0).
State(3).
GtEqVar("i",4,"hash").
LtVar("i",4,"hash").
LtEq("hash",4,65534).
Gt("hash",4,65534).
LtEqVar("rehash",4,"hash").
GtVar("rehash",4,"hash").
LtEq("hash",4,0).
Gt("hash",4,0).
State(4).
LtEqVar("rehash",5,"hash").
GtVar("rehash",5,"hash").
LtEq("rehash",5,0).
Gt("rehash",5,0).
State(6).
Lt("h",7,0).
State(7).
Return(0,8).
State(8).
State(5).
State(9).
GtEq("h",10,0).
State(11).
LtEq("hash",12,0).
LtEq("hash",12,65534).
State(12).
Return(0,13).
State(13).
State(10).
State(14).
Gt("hash",15,0).
State(16).
LtEq("rehash",17,0).
State(17).
Return(0,18).
State(18).
State(15).
State(19).
Gt("rehash",20,0).
State(21).
GtVar("rehash",22,"hash").
State(22).
Return(0,23).
State(23).
State(20).
State(24).
LtEqVar("rehash",25,"hash").
State(26).
Gt("hash",27,65534).
Gt("hash",27,0).
State(27).
Return(0,28).
State(28).
State(25).
State(29).
LtEq("hash",30,65534).
State(30).
State(32).
GtEqVar("i",33,"hash").
State(33).
Return(0,34).
State(34).
State(31).
State(35).
LtVar("i",36,"hash").
State(36).
GtEqVar("i",37,"hash").
State(37).
Return(0,38).
State(38).
control_flow(5,6) :- LtD("h",5,0).
control_flow(5,9) :- GtEqD("h",5,0).
control_flow(10,11) :- LtEqD("hash",10,0).
control_flow(10,14) :- GtD("hash",10,0).
control_flow(15,16) :- LtEqD("rehash",15,0).
control_flow(15,19) :- GtD("rehash",15,0).
control_flow(20,21) :- GtVarD("rehash",20,"hash").
control_flow(20,24) :- LtEqVarD("rehash",20,"hash").
control_flow(25,26) :- GtD("hash",25,65534).
control_flow(25,29) :- LtEqD("hash",25,65534).
control_flow(31,32) :- GtEqVarD("i",31,"hash").
control_flow(31,35) :- LtVarD("i",31,"hash").
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl LtVar(x:symbol,loc:number,y:symbol)
.decl GtEqVar(x:symbol,loc:number,y:symbol)
.decl LtEqVar(x:symbol,loc:number,y:symbol)
.decl GtVar(x:symbol,loc:number,y:symbol)
.decl Gt(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl GtEq(x:symbol,loc:number,n:number)
.decl Lt(x:symbol,loc:number,n:number)
.decl LtVarD(x:symbol,loc:number,y:symbol)
.decl GtEqVarD(x:symbol,loc:number,y:symbol)
.decl LtEqVarD(x:symbol,loc:number,y:symbol)
.decl GtVarD(x:symbol,loc:number,y:symbol)
.decl GtD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl GtEqD(x:symbol,loc:number,n:number)
.decl LtD(x:symbol,loc:number,n:number)
.decl EXITPred(loc:number)
.decl AF_EXITPred_T(interm_state:number,loc:number)
.decl AF_EXITPred_S(loc:number)
.decl AF_EXITPred(loc:number)
.decl AF_EXITPred_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
LtVarD(x,loc,n) :- LtVar(x,loc,n).
LtVarD(x,loc,n) :- LtVarD(x,locI,n), control_flow(locI,loc), !LtVar(x,loc,n), !GtEqVar(x,loc,n).
GtEqVarD(x,loc,n) :- GtEqVar(x,loc,n).
GtEqVarD(x,loc,n) :- GtEqVarD(x,locI,n), control_flow(locI,loc), !GtEqVar(x,loc,n), !LtVar(x,loc,n).
LtEqVarD(x,loc,n) :- LtEqVar(x,loc,n).
LtEqVarD(x,loc,n) :- LtEqVarD(x,locI,n), control_flow(locI,loc), !LtEqVar(x,loc,n), !GtVar(x,loc,n).
GtVarD(x,loc,n) :- GtVar(x,loc,n).
GtVarD(x,loc,n) :- GtVarD(x,locI,n), control_flow(locI,loc), !GtVar(x,loc,n), !LtEqVar(x,loc,n).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,n), !LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,n), !Gt(x,loc,n).
GtEqD(x,loc,n) :- GtEq(x,loc,n).
GtEqD(x,loc,n) :- GtEqD(x,locI,n), control_flow(locI,loc), !GtEq(x,loc,n), !Lt(x,loc,n).
LtD(x,loc,n) :- Lt(x,loc,n).
LtD(x,loc,n) :- LtD(x,locI,n), control_flow(locI,loc), !Lt(x,loc,n), !GtEq(x,loc,n).
EXITPred(loc) :- Return(_,loc).
AF_EXITPred_T(interm_state,loc) :- AF_EXITPred_T(tempOne,loc), !EXITPred(tempOne), control_flow(tempOne,interm_state).
AF_EXITPred_T(interm_state,loc) :- !EXITPred(loc), control_flow(loc,interm_state).
AF_EXITPred_S(loc) :- !EXITPred(loc), control_flow(loc,tempOne), AF_EXITPred_S(tempOne).
AF_EXITPred_S(loc) :- AF_EXITPred_T(loc,loc).
AF_EXITPred(loc) :- State(loc), !AF_EXITPred_S(loc).
AF_EXITPred_Final(loc) :- Start(loc), AF_EXITPred(loc), !NotTotal(loc).
.output LtVar
.output GtEqVar
.output LtEqVar
.output GtVar
.output Gt
.output LtEq
.output GtEq
.output Lt
.output Start
.output State
.output flow
.output Return
.output AF_EXITPred_Final(IO=stdout)

.output NotTotal(IO=stdout)

