/*ùùê */


/*(Start())@0 ¬∑ ("n"=_)@1 ¬∑ ("ptr"=("ptr"+"n"))@2 ¬∑ ((["ptr"=13]@3 ¬∑ ("ptr"=13)@4 ¬∑ ("ptr"=("ptr"+1))@5 ¬∑ ("n"=("n"+1))@6 ¬∑ ((["ptr"=10]@7 ¬∑ ("ptr"=10)@8 ¬∑ ("n"=("n"+1))@9 ¬∑ (Return(0))@10) \/ ([("ptr"!=10)]@11 ¬∑ (("ptr"!=10))@12 ¬∑ (Return(0))@13))) \/ ([("ptr"!=13)]@14 ¬∑ (("ptr"!=13))@15 ¬∑ ((["ptr"=10]@16 ¬∑ ("ptr"=10)@17 ¬∑ ("n"=("n"+1))@18 ¬∑ (Return(0))@19) \/ ([("ptr"!=10)]@20 ¬∑ (("ptr"!=10))@21 ¬∑ (Return(0))@22))))*/

flow(0,1).
flow(1,2).
flow(3,4).
flow(4,5).
flow(5,6).
flow(7,8).
flow(8,9).
flow(9,10).
flow(10,10).
flow(11,12).
flow(12,13).
flow(13,13).
flow(14,15).
flow(16,17).
flow(17,18).
flow(18,19).
flow(19,19).
flow(20,21).
flow(21,22).
flow(22,22).
Start(0).
State(0).
State(1).
State(3).
Eq("ptr",4,13).
NotEq("ptr",4,10).
State(4).
NotEq("ptr",5,10).
NotEq("ptr",5,13).
State(5).
State(7).
Eq("ptr",8,10).
NotEq("ptr",8,13).
State(8).
State(9).
Return(0,10).
State(10).
State(6).
State(11).
NotEq("ptr",12,10).
State(12).
Return(0,13).
State(13).
State(2).
State(14).
NotEq("ptr",15,13).
State(16).
Eq("ptr",17,10).
NotEq("ptr",17,13).
State(17).
State(18).
Return(0,19).
State(19).
State(15).
State(20).
NotEq("ptr",21,10).
State(21).
Return(0,22).
State(22).
control_flow(2,3) :- EqD("ptr",2,13).
control_flow(6,7) :- EqD("ptr",6,10).
control_flow(6,11) :- NotEqD("ptr",6,10).
control_flow(2,14) :- NotEqD("ptr",2,13).
control_flow(15,16) :- EqD("ptr",15,10).
control_flow(15,20) :- NotEqD("ptr",15,10).
/*(Start())@29 ¬∑ ("b"=_)@30 ¬∑ ("end"=_)@31 ¬∑ ((["b"<0]@32 ¬∑ ("b"<0)@33 ¬∑ (Return(0))@34) \/ (["b">=0]@35 ¬∑ ("b">=0)@36 ¬∑ ((["end"<0]@37 ¬∑ ("end"<0)@38 ¬∑ (Return(0))@39) \/ (["end">=0]@40 ¬∑ ("end">=0)@41 ¬∑ ((["b">="end"]@42 ¬∑ ("b">="end")@43 ¬∑ (Return(0))@44) \/ (["b"<"end"]@45 ¬∑ ("b"<"end")@46 ¬∑ (([("end"-"b")>("end"-("b"+"inc"))]@47 ¬∑ (("end"-"b")>("end"-("b"+"inc")))@48 ¬∑ ((("end"-"b")-1)<0)@49 ¬∑ (Return(0))@50) \/ (["b"<"end"‚àß("end"-"b")<=("end"-("b"+"inc"))‚àß("end"-"b")<=("end"-("b"+"inc"))]@51 ¬∑ ("b"<"end"‚àß("end"-"b")<=("end"-("b"+"inc"))‚àß("end"-"b")<=("end"-("b"+"inc")))@52 ¬∑ ((("end"-"b")>=1)@53)^w))))))))*/

flow(29,30).
flow(30,31).
flow(32,33).
flow(33,34).
flow(34,34).
flow(35,36).
flow(37,38).
flow(38,39).
flow(39,39).
flow(40,41).
flow(42,43).
flow(43,44).
flow(44,44).
flow(45,46).
flow(47,48).
flow(48,49).
flow(49,50).
flow(50,50).
flow(51,52).
flow(52,53).
flow(53,53).
Start(29).
State(29).
GtEq("b",30,0).
Lt("b",30,0).
State(30).
GtEq("end",31,0).
Lt("end",31,0).
State(32).
Lt("b",33,0).
State(33).
Return(0,34).
State(34).
State(31).
State(35).
GtEq("b",36,0).
State(37).
Lt("end",38,0).
State(38).
Return(0,39).
State(39).
State(36).
State(40).
GtEq("end",41,0).
State(42).
GtEqVar("b",43,"end").
State(43).
Return(0,44).
State(44).
State(41).
State(45).
LtVar("b",46,"end").
State(47).
State(48).
State(49).
Return(0,50).
State(50).
State(46).
State(51).
State(52).
State(53).
control_flow(31,32) :- LtD("b",31,0).
control_flow(31,35) :- GtEqD("b",31,0).
control_flow(36,37) :- LtD("end",36,0).
control_flow(36,40) :- GtEqD("end",36,0).
control_flow(41,42) :- GtEqVarD("b",41,"end").
control_flow(41,45) :- LtVarD("b",41,"end").
control_flow(46,47) :- GtD(("end"-"b"),46,("end"-("b"+"inc"))).
control_flow(46,51) :- LtVarD("b",46,"end"), LtEqD(("end"-"b"),46,("end"-("b"+"inc"))), LtEqD(("end"-"b"),46,("end"-("b"+"inc"))).
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl Gt(x:symbol,loc:number,n:number)
.decl LtVar(x:symbol,loc:number,y:symbol)
.decl GtEqVar(x:symbol,loc:number,y:symbol)
.decl GtEq(x:symbol,loc:number,n:number)
.decl Lt(x:symbol,loc:number,n:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl GtD(x:symbol,loc:number,n:number)
.decl LtVarD(x:symbol,loc:number,y:symbol)
.decl GtEqVarD(x:symbol,loc:number,y:symbol)
.decl GtEqD(x:symbol,loc:number,n:number)
.decl LtD(x:symbol,loc:number,n:number)
.decl NotEqD(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl EXITPred(loc:number)
.decl AF_EXITPred_T(interm_state:number,loc:number)
.decl AF_EXITPred_S(loc:number)
.decl AF_EXITPred(loc:number)
.decl AF_EXITPred_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,_), !Gt(x,loc,_).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,_), !LtEq(x,loc,_).
LtVarD(x,loc,n) :- LtVar(x,loc,n).
LtVarD(x,loc,n) :- LtVarD(x,locI,n), control_flow(locI,loc), !LtVar(x,loc,_), !GtEqVar(x,loc,_).
GtEqVarD(x,loc,n) :- GtEqVar(x,loc,n).
GtEqVarD(x,loc,n) :- GtEqVarD(x,locI,n), control_flow(locI,loc), !GtEqVar(x,loc,_), !LtVar(x,loc,_).
GtEqD(x,loc,n) :- GtEq(x,loc,n).
GtEqD(x,loc,n) :- GtEqD(x,locI,n), control_flow(locI,loc), !GtEq(x,loc,_), !Lt(x,loc,_).
LtD(x,loc,n) :- Lt(x,loc,n).
LtD(x,loc,n) :- LtD(x,locI,n), control_flow(locI,loc), !Lt(x,loc,_), !GtEq(x,loc,_).
NotEqD(x,loc,n) :- NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEqD(x,locI,n), control_flow(locI,loc), !NotEq(x,loc,_), !Eq(x,loc,_).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,_), !NotEq(x,loc,_).
EXITPred(loc) :- Return(_,loc).
AF_EXITPred_T(interm_state,loc) :- AF_EXITPred_T(tempOne,loc), !EXITPred(tempOne), control_flow(tempOne,interm_state).
AF_EXITPred_T(interm_state,loc) :- !EXITPred(loc), control_flow(loc,interm_state).
AF_EXITPred_S(loc) :- !EXITPred(loc), control_flow(loc,tempOne), AF_EXITPred_S(tempOne).
AF_EXITPred_S(loc) :- AF_EXITPred_T(loc,loc).
AF_EXITPred(loc) :- State(loc), !AF_EXITPred_S(loc).
AF_EXITPred_Final(loc) :- Start(loc), AF_EXITPred(loc), !NotTotal(loc).
.output LtEq
.output Gt
.output LtVar
.output GtEqVar
.output GtEq
.output Lt
.output NotEq
.output Eq
.output Start
.output State
.output flow
.output Return
.output AF_EXITPred_Final(IO=stdout)

