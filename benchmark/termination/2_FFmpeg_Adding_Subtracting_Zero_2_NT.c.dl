/*𝝐 */


/*(Start())@0 · ("n"=_)@1 · ("ptr"=_)@2 · ((["ptr"=13]@3 · ("ptr"=13)@4 · ("ptr"=("ptr"+1))@5 · ("n"=("n"+1))@6 · ((["ptr"=10]@7 · ("ptr"=10)@8 · ("n"=("n"+1))@9 · (Return(0))@10) \/ ([("ptr"!=10)]@11 · (("ptr"!=10))@12 · (Return(0))@13))) \/ ([("ptr"!=13)]@14 · (("ptr"!=13))@15 · ((["ptr"=10]@16 · ("ptr"=10)@17 · ("n"=("n"+1))@18 · (Return(0))@19) \/ ([("ptr"!=10)]@20 · (("ptr"!=10))@21 · (Return(0))@22))))*/

flow(0,1).
flow(1,2).
flow(3,4).
flow(4,5).
flow(5,6).
flow(7,8).
flow(8,9).
flow(9,10).
flow(10,10).
flow(11,12).
flow(12,13).
flow(13,13).
flow(14,15).
flow(16,17).
flow(17,18).
flow(18,19).
flow(19,19).
flow(20,21).
flow(21,22).
flow(22,22).
Start(0).
State(0).
State(1).
NotEq("ptr",2,10).
Eq("ptr",2,10).
NotEq("ptr",2,13).
Eq("ptr",2,13).
State(3).
Eq("ptr",4,13).
NotEq("ptr",4,10).
State(4).
NotEq("ptr",5,10).
NotEq("ptr",5,13).
State(5).
State(7).
Eq("ptr",8,10).
NotEq("ptr",8,13).
State(8).
State(9).
Return(0,10).
State(10).
State(6).
State(11).
NotEq("ptr",12,10).
State(12).
Return(0,13).
State(13).
State(2).
State(14).
NotEq("ptr",15,13).
State(16).
Eq("ptr",17,10).
NotEq("ptr",17,13).
State(17).
State(18).
Return(0,19).
State(19).
State(15).
State(20).
NotEq("ptr",21,10).
State(21).
Return(0,22).
State(22).
control_flow(2,3) :- EqD("ptr",2,13).
control_flow(6,7) :- EqD("ptr",6,10).
control_flow(6,11) :- NotEqD("ptr",6,10).
control_flow(2,14) :- NotEqD("ptr",2,13).
control_flow(15,16) :- EqD("ptr",15,10).
control_flow(15,20) :- NotEqD("ptr",15,10).
/*(Start())@29 · ("inc"=_)@30 · ("b"=_)@31 · ("end"=_)@32 · ((["b"<0]@33 · ("b"<0)@34 · (Return(0))@35) \/ (["b">=0]@36 · ("b">=0)@37 · ((["end"<0]@38 · ("end"<0)@39 · (Return(0))@40) \/ (["end">=0]@41 · ("end">=0)@42 · ((["b">="end"]@43 · ("b">="end")@44 · (Return(0))@45) \/ (["b"<"end"]@46 · ("b"<"end")@47 · ((["inc">0]@48 · ("inc">0)@49 · ("end"="b")@50 · (Return(0))@51) \/ (["inc"<=0]@52 · ("inc"<=0)@53 · ((("end"-"b")>=1)@54)^w))))))))*/

flow(29,30).
flow(30,31).
flow(31,32).
flow(33,34).
flow(34,35).
flow(35,35).
flow(36,37).
flow(38,39).
flow(39,40).
flow(40,40).
flow(41,42).
flow(43,44).
flow(44,45).
flow(45,45).
flow(46,47).
flow(48,49).
flow(49,50).
flow(50,51).
flow(51,51).
flow(52,53).
flow(53,54).
flow(54,54).
Start(29).
State(29).
LtEq("inc",30,0).
Gt("inc",30,0).
State(30).
GtEqVar("b",31,"end").
LtVar("b",31,"end").
GtEq("b",31,0).
Lt("b",31,0).
State(31).
GtEqVar("b",32,"end").
LtVar("b",32,"end").
GtEq("end",32,0).
Lt("end",32,0).
State(33).
Lt("b",34,0).
State(34).
Return(0,35).
State(35).
State(32).
State(36).
GtEq("b",37,0).
State(38).
Lt("end",39,0).
State(39).
Return(0,40).
State(40).
State(37).
State(41).
GtEq("end",42,0).
State(43).
GtEqVar("b",44,"end").
State(44).
Return(0,45).
State(45).
State(42).
State(46).
LtVar("b",47,"end").
State(48).
Gt("inc",49,0).
State(49).
GtEqVar("b",50,"end").
State(50).
Return(0,51).
State(51).
State(47).
State(52).
LtEq("inc",53,0).
State(53).
State(54).
control_flow(32,33) :- LtD("b",32,0).
control_flow(32,36) :- GtEqD("b",32,0).
control_flow(37,38) :- LtD("end",37,0).
control_flow(37,41) :- GtEqD("end",37,0).
control_flow(42,43) :- GtEqVarD("b",42,"end").
control_flow(42,46) :- LtVarD("b",42,"end").
control_flow(47,48) :- GtD("inc",47,0).
control_flow(47,52) :- LtEqD("inc",47,0).
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl Gt(x:symbol,loc:number,n:number)
.decl LtVar(x:symbol,loc:number,y:symbol)
.decl GtEqVar(x:symbol,loc:number,y:symbol)
.decl GtEq(x:symbol,loc:number,n:number)
.decl Lt(x:symbol,loc:number,n:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl GtD(x:symbol,loc:number,n:number)
.decl LtVarD(x:symbol,loc:number,y:symbol)
.decl GtEqVarD(x:symbol,loc:number,y:symbol)
.decl GtEqD(x:symbol,loc:number,n:number)
.decl LtD(x:symbol,loc:number,n:number)
.decl NotEqD(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl EXITPred(loc:number)
.decl AF_EXITPred_T(interm_state:number,loc:number)
.decl AF_EXITPred_S(loc:number)
.decl AF_EXITPred(loc:number)
.decl AF_EXITPred_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,n), !Gt(x,loc,n).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,n), !LtEq(x,loc,n).
LtVarD(x,loc,n) :- LtVar(x,loc,n).
LtVarD(x,loc,n) :- LtVarD(x,locI,n), control_flow(locI,loc), !LtVar(x,loc,n), !GtEqVar(x,loc,n).
GtEqVarD(x,loc,n) :- GtEqVar(x,loc,n).
GtEqVarD(x,loc,n) :- GtEqVarD(x,locI,n), control_flow(locI,loc), !GtEqVar(x,loc,n), !LtVar(x,loc,n).
GtEqD(x,loc,n) :- GtEq(x,loc,n).
GtEqD(x,loc,n) :- GtEqD(x,locI,n), control_flow(locI,loc), !GtEq(x,loc,n), !Lt(x,loc,n).
LtD(x,loc,n) :- Lt(x,loc,n).
LtD(x,loc,n) :- LtD(x,locI,n), control_flow(locI,loc), !Lt(x,loc,n), !GtEq(x,loc,n).
NotEqD(x,loc,n) :- NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEqD(x,locI,n), control_flow(locI,loc), !NotEq(x,loc,n), !Eq(x,loc,n).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,n), !NotEq(x,loc,n).
EXITPred(loc) :- Return(_,loc).
AF_EXITPred_T(interm_state,loc) :- AF_EXITPred_T(tempOne,loc), !EXITPred(tempOne), control_flow(tempOne,interm_state).
AF_EXITPred_T(interm_state,loc) :- !EXITPred(loc), control_flow(loc,interm_state).
AF_EXITPred_S(loc) :- !EXITPred(loc), control_flow(loc,tempOne), AF_EXITPred_S(tempOne).
AF_EXITPred_S(loc) :- AF_EXITPred_T(loc,loc).
AF_EXITPred(loc) :- State(loc), !AF_EXITPred_S(loc).
AF_EXITPred_Final(loc) :- Start(loc), AF_EXITPred(loc), !NotTotal(loc).
.output LtEq
.output Gt
.output LtVar
.output GtEqVar
.output GtEq
.output Lt
.output NotEq
.output Eq
.output Start
.output State
.output flow
.output Return
.output AF_EXITPred_Final(IO=stdout)

.output NotTotal(IO=stdout)

/* Other information 

//-- Facts for Procedure <__VERIFIER_nondet_int> 

//-- Facts for Procedure <ff_subtitles_next_line> 

Flow(16,0). //@12:1-13:3
Flow(13,14). //@20:3-20:3
Flow(14,15). //@20:3-21:1
Flow(10,13). //@18:3-20:3
Flow(8,11). //@18:7-18:7
Flow(8,12). //@18:7-18:7
Flow(12,9). //@18:7-19:5
Flow(11,10). //@18:7-18:3
Flow(9,10). //@19:5-18:3
Flow(5,8). //@15:3-18:7
Flow(2,6). //@15:7-15:7
Flow(2,7). //@15:7-15:7
Flow(7,3). //@15:7-16:6
Flow(6,5). //@15:7-15:3
Flow(4,5). //@17:6-15:3
Flow(3,4). //@16:6-17:6
Flow(1,2). //@14:3-15:7
Flow(0,1). //@13:3-14:3
Stmt_Decl(0,[ICall(_fun___VERIFIER_nondet_int,,n$13),IStore(&n,n$13)]). // @13:3
Stmt_BinaryOperatorStmt(1,Assign,[ICall(_fun___VERIFIER_nondet_int,,n$12),IStore(&ptr,n$12)]). // @14:3
Stmt_UnaryOperator(3,[ILoad(&ptr,n$9),IStore(&ptr,(n$9 + 1))]). // @16:6
Stmt_UnaryOperator(4,[ILoad(&n,n$8),IStore(&n,(n$8 + 1))]). // @17:6
PruneNode(6,false,[Prune(!(n$7 == 13), false)]). // @15:7
PruneNode(7,true,[Prune((n$7 == 13), true)]). // @15:7
Stmt_BinaryOperatorStmt(2,EQ,[ILoad(&ptr,n$6),ILoad(n$6,n$7)]). // @15:7
Join(5,[]).  // @15:3
Stmt_UnaryOperator(9,[ILoad(&n,n$3),IStore(&n,(n$3 + 1))]). // @19:5
PruneNode(11,false,[Prune(!(n$2 == 10), false)]). // @18:7
PruneNode(12,true,[Prune((n$2 == 10), true)]). // @18:7
Stmt_BinaryOperatorStmt(8,EQ,[ILoad(&ptr,n$1),ILoad(n$1,n$2)]). // @18:7
Join(10,[]).  // @18:3
Stmt_Return(14,[IStore(&return,n$0)]). // @20:3
Stmt_Return(13,[ILoad(&n,n$0)]). // @20:3
Exit(15).  // @21:1
Start(16). // @12:1
//-- Facts for Procedure <main> 

Flow(16,17). //@23:1-25:5
Flow(13,15). //@37:5-38:1
Flow(14,10). //@30:5-30:12
Flow(10,12). //@30:12-30:12
Flow(10,8). //@30:12-30:12
Flow(8,4). //@30:12-32:9
Flow(12,13). //@30:12-37:5
Flow(11,14). //@34:9-30:5
Flow(9,2). //@34:13-34:13
Flow(9,5). //@34:13-34:13
Flow(5,7). //@34:13-35:9
Flow(2,11). //@34:13-34:9
Flow(7,15). //@35:9-38:1
Flow(6,9). //@33:9-34:13
Flow(4,6). //@32:9-33:9
Flow(3,14). //@28:5-30:5
Flow(1,24). //@28:9-28:9
Flow(1,0). //@28:9-28:9
Flow(0,20). //@28:9-29:9
Flow(24,23). //@28:9-28:18
Flow(23,21). //@28:18-28:18
Flow(23,22). //@28:18-28:18
Flow(22,20). //@28:18-29:9
Flow(21,3). //@28:18-28:5
Flow(20,15). //@29:9-38:1
Flow(19,1). //@27:5-28:9
Flow(18,19). //@26:5-27:5
Flow(17,18). //@25:5-26:5
Stmt_Decl(17,[ICall(_fun___VERIFIER_nondet_int,,n$17),IStore(&inc,n$17)]). // @25:5
Stmt_Decl(18,[ICall(_fun___VERIFIER_nondet_int,,n$16),IStore(&b,n$16)]). // @26:5
Stmt_Decl(19,[ICall(_fun___VERIFIER_nondet_int,,n$15),IStore(&end,n$15)]). // @27:5
Stmt_Return(20,[IStore(&return,0)]). // @29:9
PruneNode(21,false,[Prune(!(n$12 < 0), false)]). // @28:18
PruneNode(22,true,[Prune((n$12 < 0), true)]). // @28:18
Stmt_BinaryOperatorStmt(23,LT,[ILoad(&end,n$12)]). // @28:18
PruneNode(24,false,[Prune(!(n$11 < 0), false)]). // @28:9
PruneNode(0,true,[Prune((n$11 < 0), true)]). // @28:9
Stmt_BinaryOperatorStmt(1,LT,[ILoad(&b,n$11)]). // @28:9
Join(3,[]).  // @28:5
Stmt_BinaryOperatorStmt(4,Assign,[ILoad(&b,n$8),ICall(_fun_ff_subtitles_next_line,n$8,n$9),IStore(&inc,n$9)]). // @32:9
Stmt_BinaryOperatorStmt(6,Assign,[ILoad(&b,n$6),ILoad(&inc,n$7),IStore(&b,(n$6 + n$7))]). // @33:9
Stmt_Return(7,[IStore(&return,0)]). // @35:9
PruneNode(2,false,[Prune(!(n$2 >= (n$3 - 4)), false)]). // @34:13
PruneNode(5,true,[Prune((n$2 >= (n$3 - 4)), true)]). // @34:13
Stmt_BinaryOperatorStmt(9,GE,[ILoad(&b,n$2),ILoad(&end,n$3)]). // @34:13
Join(11,[]).  // @34:9
PruneNode(12,false,[Prune(!(n$0 < n$1), false)]). // @30:12
PruneNode(8,true,[Prune((n$0 < n$1), true)]). // @30:12
Stmt_BinaryOperatorStmt(10,LT,[ILoad(&b,n$0),ILoad(&end,n$1)]). // @30:12
Join(14,[]).  // @30:5
Stmt_Return(13,[IStore(&return,0)]). // @37:5
Exit(15).  // @38:1
Start(16). // @23:1
*/

