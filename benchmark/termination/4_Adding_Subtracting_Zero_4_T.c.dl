/*(Join())@36*/

flow(36,36).
State(36).

/*(Start())@37 · (flag=0)@38 · (EXIT())@39*/

flow(37,38).
flow(38,39).
flow(39,39).
Start(37).
State(37).
State(38).
EXIT(39).
State(39).

/*(Start())@51 · (count=_)@52 · (([count<=0]@53 · (Return(0))@54) \/ ([count>0]@55 · (buf=0)@56 · (tries=0)@57 · (([count<=0]@58 · (Return(0))@59) \/ (((([count>0]@60 · [ret<=0∧ret=0∧tries<5]@61 · (count>0)@62 · (count>0)@63 · (ret>0)@64 · (ret<0)@65)^w) \/ ([count>0]@66 · [count>0]@68 · (count=0)@69 · (ret=_)@70 · (count=(count-ret))@71 · (buf=(buf+ret))@72 · (Return(0))@73))))))*/

flow(51,52).
flow(54,54).
flow(59,59).
flow(65,65).
flow(65,60).
flow(73,73).
Start(51).
LtEq("count",51,0).
LtEq("ret",51,0).
Eq("ret",51,0).
Lt("tries",51,5).
Gt("count",51,0).
State(51).
State(53).
Return(0,54).
State(54).
State(52).
State(55).
State(56).
Lt("tries",57,5).
State(58).
Return(0,59).
State(59).
State(60).
State(61).
State(62).
State(63).
State(64).
State(65).
State(57).
State(66).
State(68).
LtEq("count",69,0).
State(69).
State(70).
State(71).
State(72).
Return(0,73).
State(73).
control_flow(52,53) :- LtEqD("count",52,0).
control_flow(53,54) :- LtEqD("count",52,0).
control_flow(52,55) :- GtD("count",52,0).
control_flow(55,56) :- GtD("count",52,0).
control_flow(56,57) :- GtD("count",52,0).
control_flow(57,58) :- GtD("count",52,0), LtEqD("count",57,0).
control_flow(58,59) :- GtD("count",52,0), LtEqD("count",57,0).
control_flow(57,60) :- GtD("count",52,0), GtD("count",57,0).
control_flow(60,61) :- GtD("count",52,0), GtD("count",57,0), LtEqD("ret",60,0), EqD("ret",60,0), LtD("tries",60,5).
control_flow(61,62) :- GtD("count",52,0), GtD("count",57,0), LtEqD("ret",60,0), EqD("ret",60,0), LtD("tries",60,5).
control_flow(62,63) :- GtD("count",52,0), GtD("count",57,0), LtEqD("ret",60,0), EqD("ret",60,0), LtD("tries",60,5).
control_flow(63,64) :- GtD("count",52,0), GtD("count",57,0), LtEqD("ret",60,0), EqD("ret",60,0), LtD("tries",60,5).
control_flow(64,65) :- GtD("count",52,0), GtD("count",57,0), LtEqD("ret",60,0), EqD("ret",60,0), LtD("tries",60,5).
control_flow(57,66) :- GtD("count",52,0), GtD("count",57,0).
control_flow(66,68) :- GtD("count",52,0), GtD("count",57,0), GtD("count",66,0).
control_flow(68,69) :- GtD("count",52,0), GtD("count",57,0), GtD("count",66,0).
control_flow(69,70) :- GtD("count",52,0), GtD("count",57,0), GtD("count",66,0).
control_flow(70,71) :- GtD("count",52,0), GtD("count",57,0), GtD("count",66,0).
control_flow(71,72) :- GtD("count",52,0), GtD("count",57,0), GtD("count",66,0).
control_flow(72,73) :- GtD("count",52,0), GtD("count",57,0), GtD("count",66,0).
/*(Start())@89 · (count=0)@90 · (([flag=1]@91 · (Return(0))@92) \/ ([(flag!=1)]@93 · (([loc>=len]@94 · (Return(0))@95) \/ ((([loc<len]@96 · [len>loc]@98 · ((len-loc)=0)@99 · (num=_)@100 · (count=(count+1))@101 · (loc=(loc+1))@102 · (Return(0))@103) \/ ([loc<len]@107 · [len>loc]@109 · ((len-loc)=0)@110 · (num=_)@111 · (count=(count+1))@112 · (loc=(loc+1))@113 · (Return(0))@114))))))*/

flow(89,90).
flow(92,92).
flow(95,95).
flow(103,103).
flow(114,114).
Start(89).
Eq("flag",89,1).
GtEqVar("loc",89,"len").
NotEq("flag",89,1).
LtVar("loc",89,"len").
GtVar("len",89,"loc").
State(89).
State(91).
Return(0,92).
State(92).
State(90).
State(94).
Return(0,95).
State(95).
State(96).
State(98).
State(99).
State(100).
State(101).
State(102).
Return(0,103).
State(103).
State(93).
State(107).
State(109).
State(110).
State(111).
State(112).
State(113).
Return(0,114).
State(114).
control_flow(90,91) :- EqD("flag",90,1).
control_flow(91,92) :- EqD("flag",90,1).
control_flow(90,93) :- NotEqD("flag",90,1).
control_flow(93,94) :- NotEqD("flag",90,1), GtEqVarD("loc",93,"len").
control_flow(94,95) :- NotEqD("flag",90,1), GtEqVarD("loc",93,"len").
control_flow(93,96) :- NotEqD("flag",90,1), LtVarD("loc",93,"len").
control_flow(96,98) :- NotEqD("flag",90,1), LtVarD("loc",93,"len"), GtVarD("len",96,"loc").
control_flow(98,99) :- NotEqD("flag",90,1), LtVarD("loc",93,"len"), GtVarD("len",96,"loc").
control_flow(99,100) :- NotEqD("flag",90,1), LtVarD("loc",93,"len"), GtVarD("len",96,"loc").
control_flow(100,101) :- NotEqD("flag",90,1), LtVarD("loc",93,"len"), GtVarD("len",96,"loc").
control_flow(101,102) :- NotEqD("flag",90,1), LtVarD("loc",93,"len"), GtVarD("len",96,"loc").
control_flow(102,103) :- NotEqD("flag",90,1), LtVarD("loc",93,"len"), GtVarD("len",96,"loc").
control_flow(93,107) :- NotEqD("flag",90,1), LtVarD("loc",93,"len").
control_flow(107,109) :- NotEqD("flag",90,1), LtVarD("loc",93,"len"), GtVarD("len",107,"loc").
control_flow(109,110) :- NotEqD("flag",90,1), LtVarD("loc",93,"len"), GtVarD("len",107,"loc").
control_flow(110,111) :- NotEqD("flag",90,1), LtVarD("loc",93,"len"), GtVarD("len",107,"loc").
control_flow(111,112) :- NotEqD("flag",90,1), LtVarD("loc",93,"len"), GtVarD("len",107,"loc").
control_flow(112,113) :- NotEqD("flag",90,1), LtVarD("loc",93,"len"), GtVarD("len",107,"loc").
control_flow(113,114) :- NotEqD("flag",90,1), LtVarD("loc",93,"len"), GtVarD("len",107,"loc").
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl GtEq(x:symbol,loc:number,n:number)
.decl LtEqVar(x:symbol,loc:number,y:symbol)
.decl GtVar(x:symbol,loc:number,y:symbol)
.decl LtVar(x:symbol,loc:number,y:symbol)
.decl NotEq(x:symbol,loc:number,n:number)
.decl GtEqVar(x:symbol,loc:number,y:symbol)
.decl Gt(x:symbol,loc:number,n:number)
.decl Lt(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl GtVarD(x:symbol,loc:number,y:symbol)
.decl LtVarD(x:symbol,loc:number,y:symbol)
.decl GtEqVarD(x:symbol,loc:number,y:symbol)
.decl NotEqD(x:symbol,loc:number,n:number)
.decl LtD(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl GtD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl EXIT(loc:number)
.decl AF_EXIT_T(interm_state:number,loc:number)
.decl AF_EXIT_S(loc:number)
.decl AF_EXIT(loc:number)
.decl AF_EXIT_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
GtVarD(x,loc,n) :- GtVar(x,loc,n).
GtVarD(x,loc,n) :- GtVarD(x,locI,n), control_flow(locI,loc), !GtVar(x,loc,_), !LtEqVar(x,loc,_).
LtVarD(x,loc,n) :- LtVar(x,loc,n).
LtVarD(x,loc,n) :- LtVarD(x,locI,n), control_flow(locI,loc), !LtVar(x,loc,_), !GtEqVar(x,loc,_).
GtEqVarD(x,loc,n) :- GtEqVar(x,loc,n).
GtEqVarD(x,loc,n) :- GtEqVarD(x,locI,n), control_flow(locI,loc), !GtEqVar(x,loc,_), !LtVar(x,loc,_).
NotEqD(x,loc,n) :- NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEqD(x,locI,n), control_flow(locI,loc), !NotEq(x,loc,_), !Eq(x,loc,_).
LtD(x,loc,n) :- Lt(x,loc,n).
LtD(x,loc,n) :- LtD(x,locI,n), control_flow(locI,loc), !Lt(x,loc,_), !GtEq(x,loc,_).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,_), !NotEq(x,loc,_).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,_), !LtEq(x,loc,_).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,_), !Gt(x,loc,_).
EXIT(loc) :- Return(_,loc).
AF_EXIT_T(interm_state,loc) :- AF_EXIT_T(tempOne,loc), !EXIT(tempOne), control_flow(tempOne,interm_state).
AF_EXIT_T(interm_state,loc) :- !EXIT(loc), control_flow(loc,interm_state).
AF_EXIT_S(loc) :- !EXIT(loc), control_flow(loc,tempOne), AF_EXIT_S(tempOne).
AF_EXIT_S(loc) :- AF_EXIT_T(loc,loc).
AF_EXIT(loc) :- State(loc), !AF_EXIT_S(loc).
AF_EXIT_Final(loc) :- Start(loc), AF_EXIT(loc), !NotTotal(loc).
.output GtEq
.output LtEqVar
.output GtVar
.output LtVar
.output NotEq
.output GtEqVar
.output Gt
.output Lt
.output Eq
.output LtEq
.output Start
.output State
.output flow
.output Return
.output AF_EXIT_Final(IO=stdout)

/* Other information 

//-- Facts for Procedure <__VERIFIER_nondet_int> 

//-- Facts for Procedure <__infer_globals_initializer_flag> 

Flow(2,0). //@12:1-12:1
Flow(0,1). //@12:1-12:12
Stmt_Decl(0,[IStore(&#GB<benchmark/termination/4_Adding_Subtracting_Zero_4_T.c|ice>$flag,0)]). // @12:1
Exit(1).  // @12:12
Start(2). // @12:1
//-- Facts for Procedure <main> 

Flow(2,3). //@45:1-47:5
Flow(0,1). //@65:5-66:1
Flow(11,29). //@53:5-53:12
Flow(29,27). //@53:12-53:12
Flow(29,28). //@53:12-53:12
Flow(28,12). //@53:12-55:9
Flow(27,0). //@53:12-65:5
Flow(26,11). //@63:9-53:5
Flow(25,26). //@62:9-63:9
Flow(23,25). //@56:9-62:9
Flow(13,22). //@56:13-56:13
Flow(13,24). //@56:13-56:13
Flow(24,20). //@56:13-58:19
Flow(22,23). //@56:13-56:9
Flow(21,1). //@60:13-66:1
Flow(15,21). //@58:13-60:13
Flow(20,18). //@58:19-58:19
Flow(20,19). //@58:19-58:19
Flow(19,17). //@58:19-58:33
Flow(18,15). //@58:19-58:13
Flow(17,14). //@58:33-58:33
Flow(17,16). //@58:33-58:33
Flow(16,11). //@58:33-53:5
Flow(14,15). //@58:33-58:13
Flow(12,13). //@55:9-56:13
Flow(10,11). //@52:5-53:5
Flow(9,10). //@51:5-52:5
Flow(7,9). //@48:5-51:5
Flow(4,6). //@48:9-48:9
Flow(4,8). //@48:9-48:9
Flow(8,5). //@48:9-49:9
Flow(6,7). //@48:9-48:5
Flow(5,1). //@49:9-66:1
Flow(3,4). //@47:5-48:9
Stmt_Decl(3,[ICall(_fun___VERIFIER_nondet_int,,n$20),IStore(&count,n$20)]). // @47:5
Stmt_Return(5,[IStore(&return,0)]). // @49:9
PruneNode(6,false,[Prune(!(n$17 <= 0), false)]). // @48:9
PruneNode(8,true,[Prune((n$17 <= 0), true)]). // @48:9
Stmt_BinaryOperatorStmt(4,LE,[ILoad(&count,n$17)]). // @48:9
Join(7,[]).  // @48:5
Stmt_Decl(9,[IStore(&buf,0)]). // @51:5
Stmt_Decl(10,[IStore(&tries,0)]). // @52:5
Stmt_BinaryOperatorStmt(12,Assign,[ILoad(&buf,n$13),ILoad(&count,n$14),ICall(_fun_read,n$13,n$14,n$15),IStore(&ret,n$15)]). // @55:9
PruneNode(14,false,[Prune(!(n$7 < 5), false)]). // @58:33
PruneNode(16,true,[Prune((n$7 < 5), true)]). // @58:33
Stmt_BinaryOperatorStmt(17,LT,[ILoad(&tries,n$7),IStore(&tries,(n$7 + 1))]). // @58:33
PruneNode(18,false,[Prune(!(n$6 == 0), false)]). // @58:19
PruneNode(19,true,[Prune((n$6 == 0), true)]). // @58:19
Stmt_BinaryOperatorStmt(20,EQ,[ILoad(&ret,n$6)]). // @58:19
Join(15,[]).  // @58:13
Stmt_Return(21,[IStore(&return,0)]). // @60:13
PruneNode(22,false,[Prune(!(n$5 <= 0), false)]). // @56:13
PruneNode(24,true,[Prune((n$5 <= 0), true)]). // @56:13
Stmt_BinaryOperatorStmt(13,LE,[ILoad(&ret,n$5)]). // @56:13
Join(23,[]).  // @56:9
Stmt_BinaryOperatorStmt(25,SubAssign,[ILoad(&ret,n$3),ILoad(&count,n$4),IStore(&count,(n$4 - n$3))]). // @62:9
Stmt_BinaryOperatorStmt(26,AddAssign,[ILoad(&ret,n$1),ILoad(&buf,n$2),IStore(&buf,(n$2 + n$1))]). // @63:9
PruneNode(27,false,[Prune(!(n$0 > 0), false)]). // @53:12
PruneNode(28,true,[Prune((n$0 > 0), true)]). // @53:12
Stmt_BinaryOperatorStmt(29,GT,[ILoad(&count,n$0)]). // @53:12
Join(11,[]).  // @53:5
Stmt_Return(0,[IStore(&return,0)]). // @65:5
Exit(1).  // @66:1
Start(2). // @45:1
//-- Facts for Procedure <read> 

Flow(2,30). //@13:1-15:5
Flow(0,11). //@43:5-43:5
Flow(11,1). //@43:5-44:1
Flow(29,28). //@18:5-18:12
Flow(28,26). //@18:12-18:12
Flow(28,27). //@18:12-18:12
Flow(27,5). //@18:12-20:9
Flow(26,0). //@18:12-43:5
Flow(25,29). //@21:9-18:5
Flow(23,24). //@21:13-21:13
Flow(23,13). //@21:13-21:13
Flow(13,22). //@21:13-23:13
Flow(24,7). //@21:13-27:17
Flow(22,1). //@23:13-44:1
Flow(21,25). //@31:13-21:9
Flow(15,19). //@31:17-31:17
Flow(15,20). //@31:17-31:17
Flow(20,18). //@31:17-33:17
Flow(19,14). //@31:17-38:17
Flow(18,29). //@33:17-18:5
Flow(17,16). //@39:17-39:17
Flow(16,1). //@39:17-44:1
Flow(14,17). //@38:17-39:17
Flow(12,15). //@30:13-31:17
Flow(10,12). //@29:13-30:13
Flow(9,10). //@27:13-29:13
Flow(7,8). //@27:17-27:17
Flow(7,4). //@27:17-27:17
Flow(4,6). //@27:17-28:17
Flow(8,9). //@27:17-27:13
Flow(6,9). //@28:17-27:13
Flow(5,23). //@20:9-21:13
Flow(3,29). //@16:5-18:5
Flow(31,33). //@16:9-16:9
Flow(31,34). //@16:9-16:9
Flow(34,32). //@16:9-17:9
Flow(33,3). //@16:9-16:5
Flow(32,1). //@17:9-44:1
Flow(30,31). //@15:5-16:9
Stmt_Decl(30,[IStore(&count,0)]). // @15:5
Stmt_Return(32,[IStore(&return,0)]). // @17:9
PruneNode(33,false,[Prune(!(n$18 == 1), false)]). // @16:9
PruneNode(34,true,[Prune((n$18 == 1), true)]). // @16:9
Stmt_BinaryOperatorStmt(31,EQ,[ILoad(&#GB<benchmark/termination/4_Adding_Subtracting_Zero_4_T.c|ice>$flag,n$18)]). // @16:9
Join(3,[]).  // @16:5
Stmt_Decl(5,[ICall(_fun___VERIFIER_nondet_int,,n$16),IStore(&num,n$16)]). // @20:9
Stmt_BinaryOperatorStmt(6,Assign,[ILoad(&num,n$12),IStore(&num,-n$12)]). // @28:17
PruneNode(8,false,[Prune(!(n$11 < 0), false)]). // @27:17
PruneNode(4,true,[Prune((n$11 < 0), true)]). // @27:17
Stmt_BinaryOperatorStmt(7,LT,[ILoad(&num,n$11)]). // @27:17
Join(9,[]).  // @27:13
Stmt_BinaryOperatorStmt(10,Assign,[ILoad(&num,n$10),IStore(&num,(n$10 % 1000))]). // @29:13
Stmt_UnaryOperator(12,[ILoad(&count,n$9),IStore(&count,(n$9 + 1))]). // @30:13
Stmt_BinaryOperatorStmt(14,Assign,[IStore(&#GB<benchmark/termination/4_Adding_Subtracting_Zero_4_T.c|ice>$flag,1)]). // @38:17
Stmt_Return(16,[IStore(&return,n$7)]). // @39:17
Stmt_Return(17,[ILoad(&count,n$7)]). // @39:17
Stmt_UnaryOperator(18,[ILoad(&loc,n$6),IStore(&loc,(n$6 + 1))]). // @33:17
PruneNode(19,false,[Prune(!(n$4 < 995), false)]). // @31:17
PruneNode(20,true,[Prune((n$4 < 995), true)]). // @31:17
Stmt_BinaryOperatorStmt(15,LT,[ILoad(&num,n$4)]). // @31:17
Join(21,[]).  // @31:13
Stmt_Return(22,[IStore(&return,-1)]). // @23:13
PruneNode(24,false,[Prune(!(n$3 == 0), false)]). // @21:13
PruneNode(13,true,[Prune((n$3 == 0), true)]). // @21:13
Stmt_BinaryOperatorStmt(23,EQ,[ILoad(&num,n$3)]). // @21:13
Join(25,[]).  // @21:9
PruneNode(26,false,[Prune(!(n$1 < n$2), false)]). // @18:12
PruneNode(27,true,[Prune((n$1 < n$2), true)]). // @18:12
Stmt_BinaryOperatorStmt(28,LT,[ILoad(&loc,n$1),ILoad(&len,n$2)]). // @18:12
Join(29,[]).  // @18:5
Stmt_Return(11,[IStore(&return,n$0)]). // @43:5
Stmt_Return(0,[ILoad(&count,n$0)]). // @43:5
Exit(1).  // @44:1
Start(2). // @13:1
*/

