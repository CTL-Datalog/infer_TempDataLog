/*𝝐 */


/*(Start())@0 · ("flag"=0)@1 · (Return(0))@2*/

flow(0,1).
flow(1,2).
flow(2,2).
Start(0).
State(0).
State(1).
Return(0,2).
State(2).

/*(Start())@5 · ("count"=_)@6 · ((["count"<=0]@7 · ("count"<=0)@8 · (Return(0))@9) \/ (["count">0]@10 · ("count">0)@11 · ("buf"=0)@12 · ("tries"=0)@13 · ((["count"<=0]@14 · ("count"<=0)@15 · (Return(0))@16) \/ (["count">0]@17 · ("count">0)@18 · ("count"<1)@19 · (Return(0))@20))))*/

flow(5,6).
flow(7,8).
flow(8,9).
flow(9,9).
flow(10,11).
flow(11,12).
flow(12,13).
flow(14,15).
flow(15,16).
flow(16,16).
flow(17,18).
flow(18,19).
flow(19,20).
flow(20,20).
Start(5).
State(5).
LtEq("count",6,0).
Gt("count",6,0).
State(7).
LtEq("count",8,0).
State(8).
Return(0,9).
State(9).
State(6).
State(10).
Gt("count",11,0).
State(11).
State(12).
State(14).
LtEq("count",15,0).
State(15).
Return(0,16).
State(16).
State(13).
State(17).
Gt("count",18,0).
State(18).
State(19).
Return(0,20).
State(20).
control_flow(6,7) :- LtEqD("count",6,0).
control_flow(6,10) :- GtD("count",6,0).
control_flow(13,14) :- LtEqD("count",13,0).
control_flow(13,17) :- GtD("count",13,0).
/*(Start())@23 · ("count"=0)@24 · ((["flag"=1]@25 · ("flag"=1)@26 · (Return(0))@27) \/ ([("flag"!=1)]@28 · (("flag"!=1))@29 · ((["loc">="len"]@30 · ("loc">="len")@31 · (Return(0))@32) \/ (["loc"<"len"]@33 · ("loc"<"len")@34 · ("len"="loc")@35 · (Return(0))@36))))*/

flow(23,24).
flow(25,26).
flow(26,27).
flow(27,27).
flow(28,29).
flow(30,31).
flow(31,32).
flow(32,32).
flow(33,34).
flow(34,35).
flow(35,36).
flow(36,36).
Start(23).
State(23).
State(25).
Eq("flag",26,1).
State(26).
Return(0,27).
State(27).
State(24).
State(28).
NotEq("flag",29,1).
State(30).
GtEqVar("loc",31,"len").
State(31).
Return(0,32).
State(32).
State(29).
State(33).
LtVar("loc",34,"len").
State(34).
GtEqVar("loc",35,"len").
State(35).
Return(0,36).
State(36).
control_flow(24,25) :- EqD("flag",24,1).
control_flow(24,28) :- NotEqD("flag",24,1).
control_flow(29,30) :- GtEqVarD("loc",29,"len").
control_flow(29,33) :- LtVarD("loc",29,"len").
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl LtVar(x:symbol,loc:number,y:symbol)
.decl GtEqVar(x:symbol,loc:number,y:symbol)
.decl NotEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl Gt(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl LtVarD(x:symbol,loc:number,y:symbol)
.decl GtEqVarD(x:symbol,loc:number,y:symbol)
.decl NotEqD(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl GtD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl EXITPred(loc:number)
.decl AF_EXITPred_T(interm_state:number,loc:number)
.decl AF_EXITPred_S(loc:number)
.decl AF_EXITPred(loc:number)
.decl AF_EXITPred_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
LtVarD(x,loc,n) :- LtVar(x,loc,n).
LtVarD(x,loc,n) :- LtVarD(x,locI,n), control_flow(locI,loc), !LtVar(x,loc,n), !GtEqVar(x,loc,n).
GtEqVarD(x,loc,n) :- GtEqVar(x,loc,n).
GtEqVarD(x,loc,n) :- GtEqVarD(x,locI,n), control_flow(locI,loc), !GtEqVar(x,loc,n), !LtVar(x,loc,n).
NotEqD(x,loc,n) :- NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEqD(x,locI,n), control_flow(locI,loc), !NotEq(x,loc,n), !Eq(x,loc,n).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,n), !NotEq(x,loc,n).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,n), !LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,n), !Gt(x,loc,n).
EXITPred(loc) :- Return(_,loc).
AF_EXITPred_T(interm_state,loc) :- AF_EXITPred_T(tempOne,loc), !EXITPred(tempOne), control_flow(tempOne,interm_state).
AF_EXITPred_T(interm_state,loc) :- !EXITPred(loc), control_flow(loc,interm_state).
AF_EXITPred_S(loc) :- !EXITPred(loc), control_flow(loc,tempOne), AF_EXITPred_S(tempOne).
AF_EXITPred_S(loc) :- AF_EXITPred_T(loc,loc).
AF_EXITPred(loc) :- State(loc), !AF_EXITPred_S(loc).
AF_EXITPred_Final(loc) :- Start(loc), AF_EXITPred(loc), !NotTotal(loc).
.output LtVar
.output GtEqVar
.output NotEq
.output Eq
.output Gt
.output LtEq
.output Start
.output State
.output flow
.output Return
.output AF_EXITPred_Final(IO=stdout)

.output NotTotal(IO=stdout)

