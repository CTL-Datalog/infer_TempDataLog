/*𝝐 */


/*(Start())@0 · ("count"=0)@1 · (Return(0))@2*/

flow(0,1).
flow(1,2).
flow(2,2).
Start(0).
State(0).
State(1).
Return(0,2).
State(2).

/*(Start())@3 · ("flag"=0)@4 · (Return(0))@5*/

flow(3,4).
flow(4,5).
flow(5,5).
Start(3).
State(3).
State(4).
Return(0,5).
State(5).

/*(Start())@12 · ((["inc">0]@15 · ("inc">0)@16 · (("res"+1)<0)@17 · ("inc"=_)@18 · ("res"=("res"-"inc"))@19 · (Return(0))@20) \/ (["inc"<=0]@21 · ("inc"<=0)@22 · ((("res"+1)>=0)@23)^w))*/

flow(15,16).
flow(16,17).
flow(17,18).
flow(18,19).
flow(19,20).
flow(20,20).
flow(21,22).
flow(22,23).
flow(23,23).
Start(12).
State(15).
Gt("inc",16,0).
State(16).
State(17).
LtEq("inc",18,0).
Gt("inc",18,0).
State(18).
State(19).
Return(0,20).
State(20).
State(12).
State(21).
LtEq("inc",22,0).
State(22).
State(23).
control_flow(12,15) :- GtD("inc",12,0).
control_flow(12,21) :- LtEqD("inc",12,0).
/*(Start())@24 · ((["flag"=1]@25 · ("flag"=1)@26 · (Return(0))@27) \/ ([("flag"!=1)]@28 · (("flag"!=1))@29 · ((["count">100]@30 · ("count">100)@31 · (Return(0))@32) \/ (["count"<=100]@33 · ("count"<=100)@34 · ("num"=_)@35 · ((["num"<=0]@36 · ("num"<=0)@37 · (Return(-1))@38) \/ (["num">0]@39 · ("num">0)@40 · ((["num"<995]@41 · ("num"<995)@42 · ("count"=("count"+1))@43 · (Return(0))@44) \/ (["num">=995]@45 · ("num">=995)@46 · ("flag"=1)@47 · (Return(0))@48))))))))*/

flow(25,26).
flow(26,27).
flow(27,27).
flow(28,29).
flow(30,31).
flow(31,32).
flow(32,32).
flow(33,34).
flow(34,35).
flow(36,37).
flow(37,38).
flow(38,38).
flow(39,40).
flow(41,42).
flow(42,43).
flow(43,44).
flow(44,44).
flow(45,46).
flow(46,47).
flow(47,48).
flow(48,48).
Start(24).
State(25).
Eq("flag",26,1).
State(26).
Return(0,27).
State(27).
State(24).
State(28).
NotEq("flag",29,1).
State(30).
Gt("count",31,100).
State(31).
Return(0,32).
State(32).
State(29).
State(33).
LtEq("count",34,100).
State(34).
GtEq("num",35,995).
Lt("num",35,995).
LtEq("num",35,0).
Gt("num",35,0).
State(36).
LtEq("num",37,0).
Lt("num",37,995).
State(37).
Return(-1,38).
State(38).
State(35).
State(39).
Gt("num",40,0).
State(41).
Lt("num",42,995).
State(42).
State(43).
Return(0,44).
State(44).
State(40).
State(45).
GtEq("num",46,995).
Gt("num",46,0).
State(46).
Eq("flag",47,1).
State(47).
Return(0,48).
State(48).
control_flow(24,25) :- EqD("flag",24,1).
control_flow(24,28) :- NotEqD("flag",24,1).
control_flow(29,30) :- GtD("count",29,100).
control_flow(29,33) :- LtEqD("count",29,100).
control_flow(35,36) :- LtEqD("num",35,0).
control_flow(35,39) :- GtD("num",35,0).
control_flow(40,41) :- LtD("num",40,995).
control_flow(40,45) :- GtEqD("num",40,995).
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl GtEq(x:symbol,loc:number,n:number)
.decl Lt(x:symbol,loc:number,n:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl Gt(x:symbol,loc:number,n:number)
.decl GtEqD(x:symbol,loc:number,n:number)
.decl LtD(x:symbol,loc:number,n:number)
.decl NotEqD(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl GtD(x:symbol,loc:number,n:number)
.decl EXITPred(loc:number)
.decl AF_EXITPred_T(interm_state:number,loc:number)
.decl AF_EXITPred_S(loc:number)
.decl AF_EXITPred(loc:number)
.decl AF_EXITPred_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
GtEqD(x,loc,n) :- GtEq(x,loc,n).
GtEqD(x,loc,n) :- GtEqD(x,locI,n), control_flow(locI,loc), !GtEq(x,loc,n), !Lt(x,loc,n).
LtD(x,loc,n) :- Lt(x,loc,n).
LtD(x,loc,n) :- LtD(x,locI,n), control_flow(locI,loc), !Lt(x,loc,n), !GtEq(x,loc,n).
NotEqD(x,loc,n) :- NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEqD(x,locI,n), control_flow(locI,loc), !NotEq(x,loc,n), !Eq(x,loc,n).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,n), !NotEq(x,loc,n).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,n), !Gt(x,loc,n).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,n), !LtEq(x,loc,n).
EXITPred(loc) :- Return(_,loc).
AF_EXITPred_T(interm_state,loc) :- AF_EXITPred_T(tempOne,loc), !EXITPred(tempOne), control_flow(tempOne,interm_state).
AF_EXITPred_T(interm_state,loc) :- !EXITPred(loc), control_flow(loc,interm_state).
AF_EXITPred_S(loc) :- !EXITPred(loc), control_flow(loc,tempOne), AF_EXITPred_S(tempOne).
AF_EXITPred_S(loc) :- AF_EXITPred_T(loc,loc).
AF_EXITPred(loc) :- State(loc), !AF_EXITPred_S(loc).
AF_EXITPred_Final(loc) :- Start(loc), AF_EXITPred(loc), !NotTotal(loc).
.output GtEq
.output Lt
.output NotEq
.output Eq
.output LtEq
.output Gt
.output Start
.output State
.output flow
.output Return
.output AF_EXITPred_Final(IO=stdout)

.output NotTotal(IO=stdout)

