/*(Join())@28*/

flow(28,28).
State(28).

/*(Start())@29 · (count=0)@30 · (EXIT())@31*/

flow(29,30).
flow(30,31).
flow(31,31).
Start(29).
State(29).
State(30).
EXIT(31).
State(31).

/*(Start())@32 · (flag=0)@33 · (EXIT())@34*/

flow(32,33).
flow(33,34).
flow(34,34).
Start(32).
State(32).
State(33).
EXIT(34).
State(34).

/*(Start())@39 · [⊤]@40 · (res=_)@41 · (([res<0]@42 · (Return(0))@43) \/ ([res>=0]@44 · (([⊤]@45 · [res=0]@46 · (0=res)@47) \/ ([res<0]@48 · ([⊤]@49 · (res<0)@50)^w))))*/

flow(40,41).
flow(43,43).
flow(47,47).
flow(50,50).
flow(50,49).
Start(39).
Eq("res",39,0).  // delete this line 
GtEq("res",39,0). //  and delete this line 
Lt("res",39,0).
State(39).
control_flow(39,40).
State(40).
State(42).
Return(0,43).
State(43).
State(41).
State(45).
State(46).
State(47).
State(44).
State(48).
State(49).
State(50).
control_flow(41,42) :- LtD("res",41,0).
control_flow(42,43) :- LtD("res",41,0).
control_flow(41,44) :- GtEqD("res",41,0).
control_flow(44,45) :- GtEqD("res",41,0).
control_flow(45,46) :- GtEqD("res",41,0), EqD("res",45,0).
control_flow(46,47) :- GtEqD("res",41,0), EqD("res",45,0).
control_flow(44,48) :- GtEqD("res",41,0), LtD("res",44,0).
control_flow(48,49) :- GtEqD("res",41,0), LtD("res",44,0).
control_flow(49,50) :- GtEqD("res",41,0), LtD("res",44,0).
/*(Start())@51 · (([flag=1]@52 · (Return(0))@53) \/ ([(flag!=1)]@54 · (([count>100]@55 · (Return(0))@56) \/ ([count<=100]@57 · (num=_)@58 · (([num<=0]@59 · (Return(-1))@60) \/ ([num>0]@61 · (([num<995]@62 · (count=(count+1))@63 · (Return(0))@64) \/ ([num>=995]@65 · (flag=1)@66 · (Return(0))@67))))))))*/

flow(53,53).
flow(56,56).
flow(60,60).
flow(64,64).
flow(67,67).
Start(51).
Eq("flag",51,1).
Gt("count",51,100).
LtEq("num",51,0).
Lt("num",51,995).
NotEq("flag",51,1).
LtEq("count",51,100).
Gt("num",51,0).
GtEq("num",51,995).
State(52).
Return(0,53).
State(53).
State(51).
State(55).
Return(0,56).
State(56).
State(54).
State(57).
State(59).
Return(-1,60).
State(60).
State(58).
State(62).
State(63).
Return(0,64).
State(64).
State(61).
State(65).
Eq("flag",66,1).
State(66).
Return(0,67).
State(67).
control_flow(51,52) :- EqD("flag",51,1).
control_flow(52,53) :- EqD("flag",51,1).
control_flow(51,54) :- NotEqD("flag",51,1).
control_flow(54,55) :- NotEqD("flag",51,1), GtD("count",54,100).
control_flow(55,56) :- NotEqD("flag",51,1), GtD("count",54,100).
control_flow(54,57) :- NotEqD("flag",51,1), LtEqD("count",54,100).
control_flow(57,58) :- NotEqD("flag",51,1), LtEqD("count",54,100).
control_flow(58,59) :- NotEqD("flag",51,1), LtEqD("count",54,100), LtEqD("num",58,0).
control_flow(59,60) :- NotEqD("flag",51,1), LtEqD("count",54,100), LtEqD("num",58,0).
control_flow(58,61) :- NotEqD("flag",51,1), LtEqD("count",54,100), GtD("num",58,0).
control_flow(61,62) :- NotEqD("flag",51,1), LtEqD("count",54,100), GtD("num",58,0), LtD("num",61,995).
control_flow(62,63) :- NotEqD("flag",51,1), LtEqD("count",54,100), GtD("num",58,0), LtD("num",61,995).
control_flow(63,64) :- NotEqD("flag",51,1), LtEqD("count",54,100), GtD("num",58,0), LtD("num",61,995).
control_flow(61,65) :- NotEqD("flag",51,1), LtEqD("count",54,100), GtD("num",58,0), GtEqD("num",61,995).
control_flow(65,66) :- NotEqD("flag",51,1), LtEqD("count",54,100), GtD("num",58,0), GtEqD("num",61,995).
control_flow(66,67) :- NotEqD("flag",51,1), LtEqD("count",54,100), GtD("num",58,0), GtEqD("num",61,995).
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl Gt(x:symbol,loc:number,n:number)
.decl Lt(x:symbol,loc:number,n:number)
.decl GtEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl GtD(x:symbol,loc:number,n:number)
.decl NotEqD(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl GtEqD(x:symbol,loc:number,n:number)
.decl LtD(x:symbol,loc:number,n:number)
.decl EXIT(loc:number)
.decl AF_EXIT_T(interm_state:number,loc:number)
.decl AF_EXIT_S(loc:number)
.decl AF_EXIT(loc:number)
.decl AF_EXIT_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,_), !Gt(x,loc,_).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,_), !LtEq(x,loc,_).
NotEqD(x,loc,n) :- NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEqD(x,locI,n), control_flow(locI,loc), !NotEq(x,loc,_), !Eq(x,loc,_).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,_), !NotEq(x,loc,_).
GtEqD(x,loc,n) :- GtEq(x,loc,n).
GtEqD(x,loc,n) :- GtEqD(x,locI,n), control_flow(locI,loc), !GtEq(x,loc,_), !Lt(x,loc,_).
LtD(x,loc,n) :- Lt(x,loc,n).
LtD(x,loc,n) :- LtD(x,locI,n), control_flow(locI,loc), !Lt(x,loc,_), !GtEq(x,loc,_).
EXIT(loc) :- Return(_,loc).
AF_EXIT_T(interm_state,loc) :- AF_EXIT_T(tempOne,loc), !EXIT(tempOne), control_flow(tempOne,interm_state).
AF_EXIT_T(interm_state,loc) :- !EXIT(loc), control_flow(loc,interm_state).
AF_EXIT_S(loc) :- !EXIT(loc), control_flow(loc,tempOne), AF_EXIT_S(tempOne).
AF_EXIT_S(loc) :- AF_EXIT_T(loc,loc).
AF_EXIT(loc) :- State(loc), !AF_EXIT_S(loc).
AF_EXIT_Final(loc) :- Start(loc), AF_EXIT(loc), !NotTotal(loc).
.output NotEq
.output LtEq
.output Gt
.output Lt
.output GtEq
.output Eq
.output Start
.output State
.output flow
.output Return
.output AF_EXIT_Final(IO=stdout)

/* Other information 

//-- Facts for Procedure <__VERIFIER_nondet_int> 

//-- Facts for Procedure <__infer_globals_initializer_count> 

Flow(2,0). //@13:1-13:1
Flow(0,1). //@13:1-13:13
Stmt_Decl(0,[IStore(&#GB<benchmark/termination/9_dpdk_Missing_Corner-case_Handling_1_NT.c|ice>$count,0)]). // @13:1
Exit(1).  // @13:13
Start(2). // @13:1
//-- Facts for Procedure <__infer_globals_initializer_flag> 

Flow(2,0). //@12:1-12:1
Flow(0,1). //@12:1-12:12
Stmt_Decl(0,[IStore(&#GB<benchmark/termination/9_dpdk_Missing_Corner-case_Handling_1_NT.c|ice>$flag,0)]). // @12:1
Exit(1).  // @12:12
Start(2). // @12:1
//-- Facts for Procedure <main> 

Flow(2,8). //@39:1-41:5
Flow(0,1). //@47:5-48:1
Flow(8,9). //@41:5-41:11
Flow(8,10). //@41:5-41:11
Flow(10,3). //@41:11-43:9
Flow(9,0). //@41:11-47:5
Flow(6,8). //@44:9-41:5
Flow(4,5). //@44:13-44:13
Flow(4,7). //@44:13-44:13
Flow(7,0). //@44:13-47:5
Flow(5,6). //@44:13-44:9
Flow(3,4). //@43:9-44:13
Stmt_Decl(3,[ICall(_fun_read,,n$4),IStore(&res,n$4)]). // @43:9
PruneNode(5,false,[Prune(!(n$0 < 0), false)]). // @44:13
PruneNode(7,true,[Prune((n$0 < 0), true)]). // @44:13
Stmt_BinaryOperatorStmt(4,LT,[ILoad(&res,n$0)]). // @44:13
Join(6,[]).  // @44:9
PruneNode(9,false,[Prune(!1, false)]). // @41:11
PruneNode(10,true,[Prune(1, true)]). // @41:11
Join(8,[]).  // @41:5
Stmt_Return(0,[IStore(&return,0)]). // @47:5
Exit(1).  // @48:1
Start(2). // @39:1
//-- Facts for Procedure <read> 

Flow(2,18). //@14:1-16:9
Flow(0,8). //@19:5-19:5
Flow(8,1). //@19:5-38:1
Flow(10,6). //@19:9-19:9
Flow(10,9). //@19:9-19:9
Flow(9,4). //@19:9-21:9
Flow(6,20). //@19:9-25:9
Flow(4,1). //@21:9-38:1
Flow(7,0). //@26:9-19:5
Flow(5,26). //@26:13-26:13
Flow(5,3). //@26:13-26:13
Flow(3,23). //@26:13-28:13
Flow(26,21). //@26:13-33:13
Flow(24,25). //@29:13-29:13
Flow(25,1). //@29:13-38:1
Flow(23,24). //@28:13-29:13
Flow(22,1). //@34:13-38:1
Flow(21,22). //@33:13-34:13
Flow(20,5). //@25:9-26:13
Flow(19,10). //@18:5-19:9
Flow(13,19). //@16:5-18:5
Flow(18,16). //@16:9-16:9
Flow(18,17). //@16:9-16:9
Flow(17,11). //@16:9-17:9
Flow(16,15). //@16:9-16:22
Flow(15,12). //@16:22-16:22
Flow(15,14). //@16:22-16:22
Flow(14,11). //@16:22-17:9
Flow(12,13). //@16:22-16:5
Flow(11,1). //@17:9-38:1
Stmt_Return(11,[IStore(&return,0)]). // @17:9
PruneNode(12,false,[Prune(!(n$9 > 100), false)]). // @16:22
PruneNode(14,true,[Prune((n$9 > 100), true)]). // @16:22
Stmt_BinaryOperatorStmt(15,GT,[ILoad(&#GB<benchmark/termination/9_dpdk_Missing_Corner-case_Handling_1_NT.c|ice>$count,n$9)]). // @16:22
PruneNode(16,false,[Prune(!(n$8 == 1), false)]). // @16:9
PruneNode(17,true,[Prune((n$8 == 1), true)]). // @16:9
Stmt_BinaryOperatorStmt(18,EQ,[ILoad(&#GB<benchmark/termination/9_dpdk_Missing_Corner-case_Handling_1_NT.c|ice>$flag,n$8)]). // @16:9
Join(13,[]).  // @16:5
Stmt_Decl(19,[ICall(_fun___VERIFIER_nondet_int,,n$7),IStore(&num,n$7)]). // @18:5
Stmt_BinaryOperatorStmt(20,Assign,[ILoad(&num,n$5),IStore(&num,(n$5 % 1000))]). // @25:9
Stmt_BinaryOperatorStmt(21,Assign,[IStore(&#GB<benchmark/termination/9_dpdk_Missing_Corner-case_Handling_1_NT.c|ice>$flag,1)]). // @33:13
Stmt_Return(22,[IStore(&return,0)]). // @34:13
Stmt_UnaryOperator(23,[ILoad(&#GB<benchmark/termination/9_dpdk_Missing_Corner-case_Handling_1_NT.c|ice>$count,n$3),IStore(&#GB<benchmark/termination/9_dpdk_Missing_Corner-case_Handling_1_NT.c|ice>$count,(n$3 + 1))]). // @28:13
Stmt_Return(25,[IStore(&return,n$2)]). // @29:13
Stmt_Return(24,[ILoad(&num,n$2)]). // @29:13
PruneNode(26,false,[Prune(!(n$1 < 995), false)]). // @26:13
PruneNode(3,true,[Prune((n$1 < 995), true)]). // @26:13
Stmt_BinaryOperatorStmt(5,LT,[ILoad(&num,n$1)]). // @26:13
Join(7,[]).  // @26:9
Stmt_Return(4,[IStore(&return,-1)]). // @21:9
PruneNode(6,false,[Prune(!(n$0 <= 0), false)]). // @19:9
PruneNode(9,true,[Prune((n$0 <= 0), true)]). // @19:9
Stmt_BinaryOperatorStmt(10,LE,[ILoad(&num,n$0)]). // @19:9
Stmt_BetweenJoinAndExit(8,[]). // @19:5
Join(0,[]).  // @19:5
Exit(1).  // @38:1
Start(2). // @14:1
*/

