/*𝝐 */


/*(Start())@0 · ("count"=0)@1 · (Return(0))@2*/

flow(0,1).
flow(1,2).
flow(2,2).
Start(0).
State(0).
State(1).
Return(0,2).
State(2).

/*(Start())@3 · ("flag"=0)@4 · (Return(0))@5*/

flow(3,4).
flow(4,5).
flow(5,5).
Start(3).
State(3).
State(4).
Return(0,5).
State(5).

/*(Start())@12 · ("inc"=_)@13 · ((["inc">0]@16 · ("inc">0)@17 · ("res"<0)@18 · ("inc"=_)@19 · ("res"=("res"-"inc"))@20 · (Return(0))@21) \/ (["inc"<=0]@22 · ("inc"<=0)@23 · (("res">=0)@24)^w))*/

flow(12,13).
flow(16,17).
flow(17,18).
flow(18,19).
flow(19,20).
flow(20,21).
flow(21,21).
flow(22,23).
flow(23,24).
flow(24,24).
Start(12).
State(12).
//LtEq("inc",13,0).
Gt("inc",13,0).
State(16).
Gt("inc",17,0).
State(17).
State(18).
LtEq("inc",19,0).
Gt("inc",19,0).
State(19).
State(20).
Return(0,21).
State(21).
State(13).
State(22).
LtEq("inc",23,0).
State(23).
State(24).
control_flow(13,16) :- GtD("inc",13,0).
control_flow(13,22) :- LtEqD("inc",13,0).
/*(Start())@25 · ((["flag"=1]@26 · ("flag"=1)@27 · (Return(0))@28) \/ ([("flag"!=1)]@29 · (("flag"!=1))@30 · ((["count">100]@31 · ("count">100)@32 · (Return(0))@33) \/ (["count"<=100]@34 · ("count"<=100)@35 · ("num"=_)@36 · ((["num"<=0]@37 · ("num"<=0)@38 · (Return(-1))@39) \/ (["num">0]@40 · ("num">0)@41 · ((["num"<995]@42 · ("num"<995)@43 · ("count"=("count"+1))@44 · (Return(0))@45) \/ (["num">=995]@46 · ("num">=995)@47 · ("flag"=1)@48 · (Return(0))@49))))))))*/

flow(26,27).
flow(27,28).
flow(28,28).
flow(29,30).
flow(31,32).
flow(32,33).
flow(33,33).
flow(34,35).
flow(35,36).
flow(37,38).
flow(38,39).
flow(39,39).
flow(40,41).
flow(42,43).
flow(43,44).
flow(44,45).
flow(45,45).
flow(46,47).
flow(47,48).
flow(48,49).
flow(49,49).
Start(25).
State(26).
Eq("flag",27,1).
State(27).
Return(0,28).
State(28).
State(25).
State(29).
NotEq("flag",30,1).
State(31).
Gt("count",32,100).
State(32).
Return(0,33).
State(33).
State(30).
State(34).
LtEq("count",35,100).
State(35).
GtEq("num",36,995).
Lt("num",36,995).
LtEq("num",36,0).
Gt("num",36,0).
State(37).
LtEq("num",38,0).
Lt("num",38,995).
State(38).
Return(-1,39).
State(39).
State(36).
State(40).
Gt("num",41,0).
State(42).
Lt("num",43,995).
State(43).
State(44).
Return(0,45).
State(45).
State(41).
State(46).
GtEq("num",47,995).
Gt("num",47,0).
State(47).
Eq("flag",48,1).
State(48).
Return(0,49).
State(49).
control_flow(25,26) :- EqD("flag",25,1).
control_flow(25,29) :- NotEqD("flag",25,1).
control_flow(30,31) :- GtD("count",30,100).
control_flow(30,34) :- LtEqD("count",30,100).
control_flow(36,37) :- LtEqD("num",36,0).
control_flow(36,40) :- GtD("num",36,0).
control_flow(41,42) :- LtD("num",41,995).
control_flow(41,46) :- GtEqD("num",41,995).
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl GtEq(x:symbol,loc:number,n:number)
.decl Lt(x:symbol,loc:number,n:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl Gt(x:symbol,loc:number,n:number)
.decl GtEqD(x:symbol,loc:number,n:number)
.decl LtD(x:symbol,loc:number,n:number)
.decl NotEqD(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl GtD(x:symbol,loc:number,n:number)
.decl EXITPred(loc:number)
.decl AF_EXITPred_T(interm_state:number,loc:number)
.decl AF_EXITPred_S(loc:number)
.decl AF_EXITPred(loc:number)
.decl AF_EXITPred_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
GtEqD(x,loc,n) :- GtEq(x,loc,n).
GtEqD(x,loc,n) :- GtEqD(x,locI,n), control_flow(locI,loc), !GtEq(x,loc,n), !Lt(x,loc,n).
LtD(x,loc,n) :- Lt(x,loc,n).
LtD(x,loc,n) :- LtD(x,locI,n), control_flow(locI,loc), !Lt(x,loc,n), !GtEq(x,loc,n).
NotEqD(x,loc,n) :- NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEqD(x,locI,n), control_flow(locI,loc), !NotEq(x,loc,n), !Eq(x,loc,n).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,n), !NotEq(x,loc,n).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,n), !Gt(x,loc,n).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,n), !LtEq(x,loc,n).
EXITPred(loc) :- Return(_,loc).
AF_EXITPred_T(interm_state,loc) :- AF_EXITPred_T(tempOne,loc), !EXITPred(tempOne), control_flow(tempOne,interm_state).
AF_EXITPred_T(interm_state,loc) :- !EXITPred(loc), control_flow(loc,interm_state).
AF_EXITPred_S(loc) :- !EXITPred(loc), control_flow(loc,tempOne), AF_EXITPred_S(tempOne).
AF_EXITPred_S(loc) :- AF_EXITPred_T(loc,loc).
AF_EXITPred(loc) :- State(loc), !AF_EXITPred_S(loc).
AF_EXITPred_Final(loc) :- Start(loc), AF_EXITPred(loc), !NotTotal(loc).
.output GtEq
.output Lt
.output NotEq
.output Eq
.output LtEq
.output Gt
.output Start
.output State
.output flow
.output Return
.output AF_EXITPred_Final(IO=stdout)

.output NotTotal(IO=stdout)

