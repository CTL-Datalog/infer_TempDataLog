/*𝝐 */


/*(Start())@0 · ("count"=0)@1 · (Return(0))@2*/

flow(0,1).
flow(1,2).
flow(2,2).
Start(0).
State(0).
State(1).
Return(0,2).
State(2).

/*(Start())@3 · ("flag"=0)@4 · (Return(0))@5*/

flow(3,4).
flow(4,5).
flow(5,5).
Start(3).
State(3).
State(4).
Return(0,5).
State(5).

/*(Start())@12 · ("inc"=_)@13 · ((["inc">0]@16 · ("inc">0)@17 · ("res"<0)@18 · ("inc"=_)@19 · ("res"=("res"-"inc"))@20 · (Return(0))@21) \/ (["inc"<=0]@22 · ("inc"<=0)@23 · (("res">=0)@24)^w))*/

flow(12,13).
flow(16,17).
flow(17,18).
flow(18,19).
flow(19,20).
flow(20,21).
flow(21,21).
flow(22,23).
flow(23,24).
flow(24,24).
Start(12).
State(12).
LtEq("inc",13,0).
Gt("inc",13,0).
State(16).
Gt("inc",17,0).
State(17).
State(18).
LtEq("inc",19,0).
Gt("inc",19,0).
State(19).
State(20).
Return(0,21).
State(21).
State(13).
State(22).
LtEq("inc",23,0).
State(23).
State(24).
control_flow(13,16) :- GtD("inc",13,0).
control_flow(13,22) :- LtEqD("inc",13,0).
/*(Start())@25 · ((["flag"=1]@26 · ("flag"=1)@27 · (Return(0))@28) \/ ([("flag"!=1)]@29 · (("flag"!=1))@30 · ((["count">100]@31 · ("count">100)@32 · (Return(0))@33) \/ (["count"<=100]@34 · ("count"<=100)@35 · ("num"=_)@36 · ((["num"<=0]@37 · ("num"<=0)@38 · (Return(-1))@39) \/ (["num">0]@40 · ("num">0)@41 · ((["num"<995]@42 · ("num"<995)@43 · ("count"=("count"+1))@44 · (Return(0))@45) \/ (["num">=995]@46 · ("num">=995)@47 · ("flag"=1)@48 · (Return(0))@49))))))))*/

flow(26,27).
flow(27,28).
flow(28,28).
flow(29,30).
flow(31,32).
flow(32,33).
flow(33,33).
flow(34,35).
flow(35,36).
flow(37,38).
flow(38,39).
flow(39,39).
flow(40,41).
flow(42,43).
flow(43,44).
flow(44,45).
flow(45,45).
flow(46,47).
flow(47,48).
flow(48,49).
flow(49,49).
Start(25).
State(26).
Eq("flag",27,1).
State(27).
Return(0,28).
State(28).
State(25).
State(29).
NotEq("flag",30,1).
State(31).
Gt("count",32,100).
State(32).
Return(0,33).
State(33).
State(30).
State(34).
LtEq("count",35,100).
State(35).
GtEq("num",36,995).
Lt("num",36,995).
LtEq("num",36,0).
Gt("num",36,0).
State(37).
LtEq("num",38,0).
Lt("num",38,995).
State(38).
Return(-1,39).
State(39).
State(36).
State(40).
Gt("num",41,0).
State(42).
Lt("num",43,995).
State(43).
State(44).
Return(0,45).
State(45).
State(41).
State(46).
GtEq("num",47,995).
Gt("num",47,0).
State(47).
Eq("flag",48,1).
State(48).
Return(0,49).
State(49).
control_flow(25,26) :- EqD("flag",25,1).
control_flow(25,29) :- NotEqD("flag",25,1).
control_flow(30,31) :- GtD("count",30,100).
control_flow(30,34) :- LtEqD("count",30,100).
control_flow(36,37) :- LtEqD("num",36,0).
control_flow(36,40) :- GtD("num",36,0).
control_flow(41,42) :- LtD("num",41,995).
control_flow(41,46) :- GtEqD("num",41,995).
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl GtEq(x:symbol,loc:number,n:number)
.decl Lt(x:symbol,loc:number,n:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl Gt(x:symbol,loc:number,n:number)
.decl GtEqD(x:symbol,loc:number,n:number)
.decl LtD(x:symbol,loc:number,n:number)
.decl NotEqD(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl GtD(x:symbol,loc:number,n:number)
.decl EXITPred(loc:number)
.decl AF_EXITPred_T(interm_state:number,loc:number)
.decl AF_EXITPred_S(loc:number)
.decl AF_EXITPred(loc:number)
.decl AF_EXITPred_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
GtEqD(x,loc,n) :- GtEq(x,loc,n).
GtEqD(x,loc,n) :- GtEqD(x,locI,n), control_flow(locI,loc), !GtEq(x,loc,n), !Lt(x,loc,n).
LtD(x,loc,n) :- Lt(x,loc,n).
LtD(x,loc,n) :- LtD(x,locI,n), control_flow(locI,loc), !Lt(x,loc,n), !GtEq(x,loc,n).
NotEqD(x,loc,n) :- NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEqD(x,locI,n), control_flow(locI,loc), !NotEq(x,loc,n), !Eq(x,loc,n).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,n), !NotEq(x,loc,n).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,n), !Gt(x,loc,n).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,n), !LtEq(x,loc,n).
EXITPred(loc) :- Return(_,loc).
AF_EXITPred_T(interm_state,loc) :- AF_EXITPred_T(tempOne,loc), !EXITPred(tempOne), control_flow(tempOne,interm_state).
AF_EXITPred_T(interm_state,loc) :- !EXITPred(loc), control_flow(loc,interm_state).
AF_EXITPred_S(loc) :- !EXITPred(loc), control_flow(loc,tempOne), AF_EXITPred_S(tempOne).
AF_EXITPred_S(loc) :- AF_EXITPred_T(loc,loc).
AF_EXITPred(loc) :- State(loc), !AF_EXITPred_S(loc).
AF_EXITPred_Final(loc) :- Start(loc), AF_EXITPred(loc), !NotTotal(loc).
.output GtEq
.output Lt
.output NotEq
.output Eq
.output LtEq
.output Gt
.output Start
.output State
.output flow
.output Return
.output AF_EXITPred_Final(IO=stdout)

.output NotTotal(IO=stdout)

/* Other information 

//-- Facts for Procedure <__VERIFIER_nondet_int> 

//-- Facts for Procedure <__infer_globals_initializer_count> 

Flow(2,0). //@13:1-13:1
Flow(0,1). //@13:1-13:13
Stmt_Decl(0,[IStore(&#GB<benchmark/termination/9_dpdk_Missing_Corner-case_Handling_1_NT.c|ice>$count,0)]). // @13:1
Exit(1).  // @13:13
Start(2). // @13:1
//-- Facts for Procedure <__infer_globals_initializer_flag> 

Flow(2,0). //@12:1-12:1
Flow(0,1). //@12:1-12:12
Stmt_Decl(0,[IStore(&#GB<benchmark/termination/9_dpdk_Missing_Corner-case_Handling_1_NT.c|ice>$flag,0)]). // @12:1
Exit(1).  // @12:12
Start(2). // @12:1
//-- Facts for Procedure <main> 

Flow(2,3). //@39:1-41:5
Flow(0,1). //@50:5-51:1
Flow(4,11). //@43:5-43:11
Flow(4,12). //@43:5-43:11
Flow(12,5). //@43:11-45:9
Flow(11,0). //@43:11-50:5
Flow(9,4). //@47:9-43:5
Flow(7,8). //@47:13-47:13
Flow(7,10). //@47:13-47:13
Flow(10,0). //@47:13-50:5
Flow(8,9). //@47:13-47:9
Flow(6,7). //@46:9-47:13
Flow(5,6). //@45:9-46:9
Flow(3,4). //@41:5-43:5
Stmt_Decl(3,[ICall(_fun___VERIFIER_nondet_int,,n$8),IStore(&inc,n$8)]). // @41:5
Stmt_Decl(5,[ICall(_fun_read,,n$6),IStore(&inc,n$6)]). // @45:9
Stmt_Decl(6,[ILoad(&res,n$4),ILoad(&inc,n$5),IStore(&res,(n$4 - n$5))]). // @46:9
PruneNode(8,false,[Prune(!(n$0 < 0), false)]). // @47:13
PruneNode(10,true,[Prune((n$0 < 0), true)]). // @47:13
Stmt_BinaryOperatorStmt(7,LT,[ILoad(&res,n$0)]). // @47:13
Join(9,[]).  // @47:9
PruneNode(11,false,[Prune(!1, false)]). // @43:11
PruneNode(12,true,[Prune(1, true)]). // @43:11
Join(4,[]).  // @43:5
Stmt_Return(0,[IStore(&return,0)]). // @50:5
Exit(1).  // @51:1
Start(2). // @39:1
//-- Facts for Procedure <read> 

Flow(2,20). //@14:1-16:9
Flow(0,4). //@19:5-19:5
Flow(4,1). //@19:5-38:1
Flow(12,9). //@19:9-19:9
Flow(12,11). //@19:9-19:9
Flow(11,7). //@19:9-21:9
Flow(9,22). //@19:9-25:9
Flow(7,1). //@21:9-38:1
Flow(10,0). //@26:9-19:5
Flow(8,5). //@26:13-26:13
Flow(8,6). //@26:13-26:13
Flow(6,25). //@26:13-28:13
Flow(5,23). //@26:13-33:13
Flow(3,26). //@29:13-29:13
Flow(26,1). //@29:13-38:1
Flow(25,3). //@28:13-29:13
Flow(24,1). //@34:13-38:1
Flow(23,24). //@33:13-34:13
Flow(22,8). //@25:9-26:13
Flow(21,12). //@18:5-19:9
Flow(15,21). //@16:5-18:5
Flow(20,18). //@16:9-16:9
Flow(20,19). //@16:9-16:9
Flow(19,13). //@16:9-17:9
Flow(18,17). //@16:9-16:22
Flow(17,14). //@16:22-16:22
Flow(17,16). //@16:22-16:22
Flow(16,13). //@16:22-17:9
Flow(14,15). //@16:22-16:5
Flow(13,1). //@17:9-38:1
Stmt_Return(13,[IStore(&return,0)]). // @17:9
PruneNode(14,false,[Prune(!(n$9 > 100), false)]). // @16:22
PruneNode(16,true,[Prune((n$9 > 100), true)]). // @16:22
Stmt_BinaryOperatorStmt(17,GT,[ILoad(&#GB<benchmark/termination/9_dpdk_Missing_Corner-case_Handling_1_NT.c|ice>$count,n$9)]). // @16:22
PruneNode(18,false,[Prune(!(n$8 == 1), false)]). // @16:9
PruneNode(19,true,[Prune((n$8 == 1), true)]). // @16:9
Stmt_BinaryOperatorStmt(20,EQ,[ILoad(&#GB<benchmark/termination/9_dpdk_Missing_Corner-case_Handling_1_NT.c|ice>$flag,n$8)]). // @16:9
Join(15,[]).  // @16:5
Stmt_Decl(21,[ICall(_fun___VERIFIER_nondet_int,,n$7),IStore(&num,n$7)]). // @18:5
Stmt_BinaryOperatorStmt(22,Assign,[ILoad(&num,n$5),IStore(&num,(n$5 % 1000))]). // @25:9
Stmt_BinaryOperatorStmt(23,Assign,[IStore(&#GB<benchmark/termination/9_dpdk_Missing_Corner-case_Handling_1_NT.c|ice>$flag,1)]). // @33:13
Stmt_Return(24,[IStore(&return,0)]). // @34:13
Stmt_UnaryOperator(25,[ILoad(&#GB<benchmark/termination/9_dpdk_Missing_Corner-case_Handling_1_NT.c|ice>$count,n$3),IStore(&#GB<benchmark/termination/9_dpdk_Missing_Corner-case_Handling_1_NT.c|ice>$count,(n$3 + 1))]). // @28:13
Stmt_Return(26,[IStore(&return,n$2)]). // @29:13
Stmt_Return(3,[ILoad(&num,n$2)]). // @29:13
PruneNode(5,false,[Prune(!(n$1 < 995), false)]). // @26:13
PruneNode(6,true,[Prune((n$1 < 995), true)]). // @26:13
Stmt_BinaryOperatorStmt(8,LT,[ILoad(&num,n$1)]). // @26:13
Join(10,[]).  // @26:9
Stmt_Return(7,[IStore(&return,-1)]). // @21:9
PruneNode(9,false,[Prune(!(n$0 <= 0), false)]). // @19:9
PruneNode(11,true,[Prune((n$0 <= 0), true)]). // @19:9
Stmt_BinaryOperatorStmt(12,LE,[ILoad(&num,n$0)]). // @19:9
Stmt_BetweenJoinAndExit(4,[]). // @19:5
Join(0,[]).  // @19:5
Exit(1).  // @38:1
Start(2). // @14:1
*/

