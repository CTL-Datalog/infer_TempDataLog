/*(Join())@21*/

flow(21,21).
State(21).

/*(Start())@34 · (linesToRead=_)@35 · (([linesToRead<0]@36 · (Return(0))@37) \/ ([linesToRead>=0]@38 · (h=_)@39 · (([h<=0]@40 · (Return(0))@41) \/ ((([h>0]@42 · [h>0]@44 · (h=0)@45 · (linesToRead=h)@46 · (h=(h-linesToRead))@47 · (Return(0))@48) \/ ((([h>0]@56 · [linesToRead>0]@57 · [h>0]@58 · (h=0)@59 · (h=(h-linesToRead))@60 · (Return(0))@61) \/ (([h>0]@62 · [linesToRead<=0]@63 · (h>0)@64 · (linesToRead<=0)@65 · [linesToRead<=h]@66 · (h=(h-linesToRead))@67)^w))))))))*/

flow(34,35).
flow(37,37).
flow(41,41).
flow(48,48).
flow(61,61).
flow(67,67).
flow(67,62).
Start(34).
Lt("linesToRead",34,0).
LtEq("h",34,0).
Gt("linesToRead",34,0).
GtEq("linesToRead",34,0). // delete this line 
Gt("h",34,0).
LtEq("linesToRead",34,0).
LtEqVar("linesToRead",34,"h").
State(34).
State(36).
Return(0,37).
State(37).
State(35).
State(38).
State(40).
Return(0,41).
State(41).
State(42).
State(44).
LtEq("h",45,0).
State(45).
GtEq("linesToRead",46,0).
LtEq("linesToRead",46,0).
LtEqVar("linesToRead",46,"h").
State(46).
State(47).
Return(0,48).
State(48).
State(56).
State(57).
State(58).
LtEq("h",59,0).
State(59).
State(60).
Return(0,61).
State(61).
State(39).
State(62).
State(63).
State(64).
State(65).
State(66).
State(67).
control_flow(35,36) :- LtD("linesToRead",35,0).
control_flow(36,37) :- LtD("linesToRead",35,0).
control_flow(35,38) :- GtEqD("linesToRead",35,0).
control_flow(38,39) :- GtEqD("linesToRead",35,0).
control_flow(39,40) :- GtEqD("linesToRead",35,0), LtEqD("h",39,0).
control_flow(40,41) :- GtEqD("linesToRead",35,0), LtEqD("h",39,0).
control_flow(39,42) :- GtEqD("linesToRead",35,0), GtD("h",39,0).
control_flow(42,44) :- GtEqD("linesToRead",35,0), GtD("h",39,0), GtD("h",42,0).
control_flow(44,45) :- GtEqD("linesToRead",35,0), GtD("h",39,0), GtD("h",42,0).
control_flow(45,46) :- GtEqD("linesToRead",35,0), GtD("h",39,0), GtD("h",42,0).
control_flow(46,47) :- GtEqD("linesToRead",35,0), GtD("h",39,0), GtD("h",42,0).
control_flow(47,48) :- GtEqD("linesToRead",35,0), GtD("h",39,0), GtD("h",42,0).
control_flow(39,56) :- GtEqD("linesToRead",35,0), GtD("h",39,0).
control_flow(56,57) :- GtEqD("linesToRead",35,0), GtD("h",39,0), GtD("linesToRead",56,0).
control_flow(57,58) :- GtEqD("linesToRead",35,0), GtD("h",39,0), GtD("linesToRead",56,0), GtD("h",57,0).
control_flow(58,59) :- GtEqD("linesToRead",35,0), GtD("h",39,0), GtD("linesToRead",56,0), GtD("h",57,0).
control_flow(59,60) :- GtEqD("linesToRead",35,0), GtD("h",39,0), GtD("linesToRead",56,0), GtD("h",57,0).
control_flow(60,61) :- GtEqD("linesToRead",35,0), GtD("h",39,0), GtD("linesToRead",56,0), GtD("h",57,0).
control_flow(39,62) :- GtEqD("linesToRead",35,0), GtD("h",39,0).
control_flow(62,63) :- GtEqD("linesToRead",35,0), GtD("h",39,0), LtEqD("linesToRead",62,0).
control_flow(63,64) :- GtEqD("linesToRead",35,0), GtD("h",39,0), LtEqD("linesToRead",62,0).
control_flow(64,65) :- GtEqD("linesToRead",35,0), GtD("h",39,0), LtEqD("linesToRead",62,0).
control_flow(65,66) :- GtEqD("linesToRead",35,0), GtD("h",39,0), LtEqD("linesToRead",62,0), LtEqVarD("linesToRead",65,"h").
control_flow(66,67) :- GtEqD("linesToRead",35,0), GtD("h",39,0), LtEqD("linesToRead",62,0), LtEqVarD("linesToRead",65,"h").
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl GtVar(x:symbol,loc:number,y:symbol)
.decl LtEqVar(x:symbol,loc:number,y:symbol)
.decl GtEq(x:symbol,loc:number,n:number)
.decl Gt(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl Lt(x:symbol,loc:number,n:number)
.decl LtEqVarD(x:symbol,loc:number,y:symbol)
.decl GtD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl GtEqD(x:symbol,loc:number,n:number)
.decl LtD(x:symbol,loc:number,n:number)
.decl EXIT(loc:number)
.decl AF_EXIT_T(interm_state:number,loc:number)
.decl AF_EXIT_S(loc:number)
.decl AF_EXIT(loc:number)
.decl AF_EXIT_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
LtEqVarD(x,loc,n) :- LtEqVar(x,loc,n).
LtEqVarD(x,loc,n) :- LtEqVarD(x,locI,n), control_flow(locI,loc), !LtEqVar(x,loc,_), !GtVar(x,loc,_).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,_), !LtEq(x,loc,_).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,_), !Gt(x,loc,_).
GtEqD(x,loc,n) :- GtEq(x,loc,n).
GtEqD(x,loc,n) :- GtEqD(x,locI,n), control_flow(locI,loc), !GtEq(x,loc,_), !Lt(x,loc,_).
LtD(x,loc,n) :- Lt(x,loc,n).
LtD(x,loc,n) :- LtD(x,locI,n), control_flow(locI,loc), !Lt(x,loc,_), !GtEq(x,loc,_).
EXIT(loc) :- Return(_,loc).
AF_EXIT_T(interm_state,loc) :- AF_EXIT_T(tempOne,loc), !EXIT(tempOne), control_flow(tempOne,interm_state).
AF_EXIT_T(interm_state,loc) :- !EXIT(loc), control_flow(loc,interm_state).
AF_EXIT_S(loc) :- !EXIT(loc), control_flow(loc,tempOne), AF_EXIT_S(tempOne).
AF_EXIT_S(loc) :- AF_EXIT_T(loc,loc).
AF_EXIT(loc) :- State(loc), !AF_EXIT_S(loc).
AF_EXIT_Final(loc) :- Start(loc), AF_EXIT(loc), !NotTotal(loc).
.output GtVar
.output LtEqVar
.output GtEq
.output Gt
.output LtEq
.output Lt
.output Start
.output State
.output flow
.output Return
.output AF_EXIT_Final(IO=stdout)

/* Other information 

//-- Facts for Procedure <__VERIFIER_nondet_int> 

//-- Facts for Procedure <main> 

Flow(19,0). //@11:1-13:5
Flow(16,3). //@23:5-24:1
Flow(8,18). //@17:5-17:12
Flow(18,15). //@17:12-17:12
Flow(18,17). //@17:12-17:12
Flow(17,13). //@17:12-19:13
Flow(15,16). //@17:12-23:5
Flow(14,8). //@21:9-17:5
Flow(10,14). //@19:9-21:9
Flow(13,11). //@19:13-19:13
Flow(13,12). //@19:13-19:13
Flow(12,9). //@19:13-20:13
Flow(11,10). //@19:13-19:9
Flow(9,10). //@20:13-19:9
Flow(7,8). //@16:5-17:5
Flow(5,7). //@14:5-16:5
Flow(1,4). //@14:9-14:9
Flow(1,6). //@14:9-14:9
Flow(6,2). //@14:9-15:9
Flow(4,5). //@14:9-14:5
Flow(2,3). //@15:9-24:1
Flow(0,1). //@13:5-14:9
Stmt_Decl(0,[ICall(_fun___VERIFIER_nondet_int,,n$13),IStore(&linesToRead,n$13)]). // @13:5
Stmt_Return(2,[IStore(&return,0)]). // @15:9
PruneNode(4,false,[Prune(!(n$10 < 0), false)]). // @14:9
PruneNode(6,true,[Prune((n$10 < 0), true)]). // @14:9
Stmt_BinaryOperatorStmt(1,LT,[ILoad(&linesToRead,n$10)]). // @14:9
Join(5,[]).  // @14:5
Stmt_Decl(7,[ICall(_fun___VERIFIER_nondet_int,,n$9),IStore(&h,n$9)]). // @16:5
Stmt_BinaryOperatorStmt(9,Assign,[ILoad(&h,n$5),IStore(&linesToRead,n$5)]). // @20:13
PruneNode(11,false,[Prune(!(n$3 > n$4), false)]). // @19:13
PruneNode(12,true,[Prune((n$3 > n$4), true)]). // @19:13
Stmt_BinaryOperatorStmt(13,GT,[ILoad(&linesToRead,n$3),ILoad(&h,n$4)]). // @19:13
Join(10,[]).  // @19:9
Stmt_BinaryOperatorStmt(14,SubAssign,[ILoad(&linesToRead,n$1),ILoad(&h,n$2),IStore(&h,(n$2 - n$1))]). // @21:9
PruneNode(15,false,[Prune(!(n$0 > 0), false)]). // @17:12
PruneNode(17,true,[Prune((n$0 > 0), true)]). // @17:12
Stmt_BinaryOperatorStmt(18,GT,[ILoad(&h,n$0)]). // @17:12
Join(8,[]).  // @17:5
Stmt_Return(16,[IStore(&return,0)]). // @23:5
Exit(3).  // @24:1
Start(19). // @11:1
*/

