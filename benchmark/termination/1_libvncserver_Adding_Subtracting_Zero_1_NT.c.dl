/*𝝐 */


/*(Start())@6 · ("linesToRead"=_)@7 · ((["linesToRead"<0]@8 · ("linesToRead"<0)@9 · (Return(0))@10) \/ (["linesToRead">=0]@11 · ("linesToRead">=0)@12 · ("h"=_)@13 · ((["h"<=0]@14 · ("h"<=0)@15 · (Return(0))@16) \/ (["h">0]@17 · ("h">0)@18 · ((["linesToRead">0]@19 · ("linesToRead">0)@20 · ("h"<1)@21 · (Return(0))@22) \/ (["linesToRead"<=0]@23 · ("linesToRead"<=0)@24 · (("h">=1)@25)^w))))))*/

flow(6,7).
flow(8,9).
flow(9,10).
flow(10,10).
flow(11,12).
flow(12,13).
flow(14,15).
flow(15,16).
flow(16,16).
flow(17,18).
flow(19,20).
flow(20,21).
flow(21,22).
flow(22,22).
flow(23,24).
flow(24,25).
flow(25,25).
Start(6).
State(6).
LtEq("linesToRead",7,0).
Gt("linesToRead",7,0).
GtEq("linesToRead",7,0).
Lt("linesToRead",7,0).
State(8).
Lt("linesToRead",9,0).
LtEq("linesToRead",9,0).
State(9).
Return(0,10).
State(10).
State(7).
State(11).
GtEq("linesToRead",12,0).
State(12).
LtEq("h",13,0).
Gt("h",13,0).
State(14).
LtEq("h",15,0).
State(15).
Return(0,16).
State(16).
State(13).
State(17).
Gt("h",18,0).
State(19).
Gt("linesToRead",20,0).
GtEq("linesToRead",20,0).
State(20).
State(21).
Return(0,22).
State(22).
State(18).
State(23).
LtEq("linesToRead",24,0).
State(24).
Gt("h",25,0).
State(25).
control_flow(7,8) :- LtD("linesToRead",7,0).
control_flow(7,11) :- GtEqD("linesToRead",7,0).
control_flow(13,14) :- LtEqD("h",13,0).
control_flow(13,17) :- GtD("h",13,0).
control_flow(18,19) :- GtD("linesToRead",18,0).
control_flow(18,23) :- LtEqD("linesToRead",18,0).
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl Gt(x:symbol,loc:number,n:number)
.decl GtEq(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl Lt(x:symbol,loc:number,n:number)
.decl GtD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl GtEqD(x:symbol,loc:number,n:number)
.decl LtD(x:symbol,loc:number,n:number)
.decl EXITPred(loc:number)
.decl AF_EXITPred_T(interm_state:number,loc:number)
.decl AF_EXITPred_S(loc:number)
.decl AF_EXITPred(loc:number)
.decl AF_EXITPred_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,n), !LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,n), !Gt(x,loc,n).
GtEqD(x,loc,n) :- GtEq(x,loc,n).
GtEqD(x,loc,n) :- GtEqD(x,locI,n), control_flow(locI,loc), !GtEq(x,loc,n), !Lt(x,loc,n).
LtD(x,loc,n) :- Lt(x,loc,n).
LtD(x,loc,n) :- LtD(x,locI,n), control_flow(locI,loc), !Lt(x,loc,n), !GtEq(x,loc,n).
EXITPred(loc) :- Return(_,loc).
AF_EXITPred_T(interm_state,loc) :- AF_EXITPred_T(tempOne,loc), !EXITPred(tempOne), control_flow(tempOne,interm_state).
AF_EXITPred_T(interm_state,loc) :- !EXITPred(loc), control_flow(loc,interm_state).
AF_EXITPred_S(loc) :- !EXITPred(loc), control_flow(loc,tempOne), AF_EXITPred_S(tempOne).
AF_EXITPred_S(loc) :- AF_EXITPred_T(loc,loc).
AF_EXITPred(loc) :- State(loc), !AF_EXITPred_S(loc).
AF_EXITPred_Final(loc) :- Start(loc), AF_EXITPred(loc), !NotTotal(loc).
.output Gt
.output GtEq
.output LtEq
.output Lt
.output Start
.output State
.output flow
.output Return
.output AF_EXITPred_Final(IO=stdout)

.output NotTotal(IO=stdout)

/* Other information 

//-- Facts for Procedure <__VERIFIER_nondet_int> 

//-- Facts for Procedure <main> 

Flow(19,0). //@11:1-13:5
Flow(16,3). //@23:5-24:1
Flow(8,18). //@17:5-17:12
Flow(18,15). //@17:12-17:12
Flow(18,17). //@17:12-17:12
Flow(17,13). //@17:12-19:13
Flow(15,16). //@17:12-23:5
Flow(14,8). //@21:9-17:5
Flow(10,14). //@19:9-21:9
Flow(13,11). //@19:13-19:13
Flow(13,12). //@19:13-19:13
Flow(12,9). //@19:13-20:13
Flow(11,10). //@19:13-19:9
Flow(9,10). //@20:13-19:9
Flow(7,8). //@16:5-17:5
Flow(5,7). //@14:5-16:5
Flow(1,4). //@14:9-14:9
Flow(1,6). //@14:9-14:9
Flow(6,2). //@14:9-15:9
Flow(4,5). //@14:9-14:5
Flow(2,3). //@15:9-24:1
Flow(0,1). //@13:5-14:9
Stmt_Decl(0,[ICall(_fun___VERIFIER_nondet_int,,n$13),IStore(&linesToRead,n$13)]). // @13:5
Stmt_Return(2,[IStore(&return,0)]). // @15:9
PruneNode(4,false,[Prune(!(n$10 < 0), false)]). // @14:9
PruneNode(6,true,[Prune((n$10 < 0), true)]). // @14:9
Stmt_BinaryOperatorStmt(1,LT,[ILoad(&linesToRead,n$10)]). // @14:9
Join(5,[]).  // @14:5
Stmt_Decl(7,[ICall(_fun___VERIFIER_nondet_int,,n$9),IStore(&h,n$9)]). // @16:5
Stmt_BinaryOperatorStmt(9,Assign,[ILoad(&h,n$5),IStore(&linesToRead,n$5)]). // @20:13
PruneNode(11,false,[Prune(!(n$3 > n$4), false)]). // @19:13
PruneNode(12,true,[Prune((n$3 > n$4), true)]). // @19:13
Stmt_BinaryOperatorStmt(13,GT,[ILoad(&linesToRead,n$3),ILoad(&h,n$4)]). // @19:13
Join(10,[]).  // @19:9
Stmt_BinaryOperatorStmt(14,SubAssign,[ILoad(&linesToRead,n$1),ILoad(&h,n$2),IStore(&h,(n$2 - n$1))]). // @21:9
PruneNode(15,false,[Prune(!(n$0 > 0), false)]). // @17:12
PruneNode(17,true,[Prune((n$0 > 0), true)]). // @17:12
Stmt_BinaryOperatorStmt(18,GT,[ILoad(&h,n$0)]). // @17:12
Join(8,[]).  // @17:5
Stmt_Return(16,[IStore(&return,0)]). // @23:5
Exit(3).  // @24:1
Start(19). // @11:1
*/

