/*𝝐 */


/*(Start())@6 · ("linesToRead"=_)@7 · ((["linesToRead"<0]@8 · ("linesToRead"<0)@9 · (Return(0))@10) \/ (["linesToRead">=0]@11 · ("linesToRead">=0)@12 · ((["linesToRead"<=0]@13 · ("linesToRead"<=0)@14 · (Return(0))@15) \/ (["linesToRead">0]@16 · ("linesToRead">0)@17 · ("h"=_)@18 · ((["h"<=0]@19 · ("h"<=0)@20 · (Return(0))@21) \/ (["h">0]@22 · ("h">0)@23 · ((["linesToRead">0]@24 · ("linesToRead">0)@25 · ("h"<1)@26 · (Return(0))@27) \/ (["linesToRead"<=0]@28 · ("linesToRead"<=0)@29 · (("h">=1)@30)^w))))))))*/

flow(6,7).
flow(8,9).
flow(9,10).
flow(10,10).
flow(11,12).
flow(13,14).
flow(14,15).
flow(15,15).
flow(16,17).
flow(17,18).
flow(19,20).
flow(20,21).
flow(21,21).
flow(22,23).
flow(24,25).
flow(25,26).
flow(26,27).
flow(27,27).
flow(28,29).
flow(29,30).
flow(30,30).
Start(6).
State(6).
LtEq("linesToRead",7,0).
Gt("linesToRead",7,0).
GtEq("linesToRead",7,0).
Lt("linesToRead",7,0).
State(8).
Lt("linesToRead",9,0).
LtEq("linesToRead",9,0).
State(9).
Return(0,10).
State(10).
State(7).
State(11).
GtEq("linesToRead",12,0).
State(13).
LtEq("linesToRead",14,0).
State(14).
Return(0,15).
State(15).
State(12).
State(16).
Gt("linesToRead",17,0).
GtEq("linesToRead",17,0).
State(17).
LtEq("h",18,0).
Gt("h",18,0).
State(19).
LtEq("h",20,0).
State(20).
Return(0,21).
State(21).
State(18).
State(22).
Gt("h",23,0).
State(24).
Gt("linesToRead",25,0).
GtEq("linesToRead",25,0).
State(25).
State(26).
Return(0,27).
State(27).
State(23).
State(28).
LtEq("linesToRead",29,0).
State(29).
Gt("h",30,0).
State(30).
control_flow(7,8) :- LtD("linesToRead",7,0).
control_flow(7,11) :- GtEqD("linesToRead",7,0).
control_flow(12,13) :- LtEqD("linesToRead",12,0).
control_flow(12,16) :- GtD("linesToRead",12,0).
control_flow(18,19) :- LtEqD("h",18,0).
control_flow(18,22) :- GtD("h",18,0).
control_flow(23,24) :- GtD("linesToRead",23,0).
control_flow(23,28) :- LtEqD("linesToRead",23,0).
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl Gt(x:symbol,loc:number,n:number)
.decl GtEq(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl Lt(x:symbol,loc:number,n:number)
.decl GtD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl GtEqD(x:symbol,loc:number,n:number)
.decl LtD(x:symbol,loc:number,n:number)
.decl EXITPred(loc:number)
.decl AF_EXITPred_T(interm_state:number,loc:number)
.decl AF_EXITPred_S(loc:number)
.decl AF_EXITPred(loc:number)
.decl AF_EXITPred_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,n), !LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,n), !Gt(x,loc,n).
GtEqD(x,loc,n) :- GtEq(x,loc,n).
GtEqD(x,loc,n) :- GtEqD(x,locI,n), control_flow(locI,loc), !GtEq(x,loc,n), !Lt(x,loc,n).
LtD(x,loc,n) :- Lt(x,loc,n).
LtD(x,loc,n) :- LtD(x,locI,n), control_flow(locI,loc), !Lt(x,loc,n), !GtEq(x,loc,n).
EXITPred(loc) :- Return(_,loc).
AF_EXITPred_T(interm_state,loc) :- AF_EXITPred_T(tempOne,loc), !EXITPred(tempOne), control_flow(tempOne,interm_state).
AF_EXITPred_T(interm_state,loc) :- !EXITPred(loc), control_flow(loc,interm_state).
AF_EXITPred_S(loc) :- !EXITPred(loc), control_flow(loc,tempOne), AF_EXITPred_S(tempOne).
AF_EXITPred_S(loc) :- AF_EXITPred_T(loc,loc).
AF_EXITPred(loc) :- State(loc), !AF_EXITPred_S(loc).
AF_EXITPred_Final(loc) :- Start(loc), AF_EXITPred(loc), !NotTotal(loc).
.output Gt
.output GtEq
.output LtEq
.output Lt
.output Start
.output State
.output flow
.output Return
.output AF_EXITPred_Final(IO=stdout)

.output NotTotal(IO=stdout)

