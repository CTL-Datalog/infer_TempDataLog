/*𝝐 */


/*(Start())@6 · ("linesToRead"=_)@7 · ((["linesToRead"<0]@8 · ("linesToRead"<0)@9 · (Return(0))@10) \/ (["linesToRead">=0]@11 · ("linesToRead">=0)@12 · ("h"=_)@13 · ((["h"<=0]@14 · ("h"<=0)@15 · (Return(0))@16) \/ (["h">0]@17 · ("h">0)@18 · ((["linesToRead">0]@19 · ("linesToRead">0)@20 · ("h"<1)@21 · (Return(0))@22) \/ (["linesToRead"<=0]@23 · ("linesToRead"<=0)@24 · (("h">=1)@25)^w))))))*/

flow(6,7).
flow(8,9).
flow(9,10).
flow(10,10).
flow(11,12).
flow(12,13).
flow(14,15).
flow(15,16).
flow(16,16).
flow(17,18).
flow(19,20).
flow(20,21).
flow(21,22).
flow(22,22).
flow(23,24).
flow(24,25).
flow(25,25).
Start(6).
State(6).
LtEq("linesToRead",7,0). // delete this 
Gt("linesToRead",7,0).
GtEq("linesToRead",7,0). // delete this will leads to non-total 
Lt("linesToRead",7,0).
State(8).
Lt("linesToRead",9,0).
LtEq("linesToRead",9,0).
State(9).
Return(0,10).
State(10).
State(7).
State(11).
GtEq("linesToRead",12,0).
State(12).
LtEq("h",13,0).
Gt("h",13,0).
State(14).
LtEq("h",15,0).
State(15).
Return(0,16).
State(16).
State(13).
State(17).
Gt("h",18,0).
State(19).
Gt("linesToRead",20,0).
GtEq("linesToRead",20,0).
State(20).
State(21).
Return(0,22).
State(22).
State(18).
State(23).
LtEq("linesToRead",24,0).
State(24).
Gt("h",25,0).
State(25).
control_flow(7,8) :- LtD("linesToRead",7,0).
control_flow(7,11) :- GtEqD("linesToRead",7,0).
control_flow(13,14) :- LtEqD("h",13,0).
control_flow(13,17) :- GtD("h",13,0).
control_flow(18,19) :- GtD("linesToRead",18,0).
control_flow(18,23) :- LtEqD("linesToRead",18,0).
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl Gt(x:symbol,loc:number,n:number)
.decl GtEq(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl Lt(x:symbol,loc:number,n:number)
.decl GtD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl GtEqD(x:symbol,loc:number,n:number)
.decl LtD(x:symbol,loc:number,n:number)
.decl EXITPred(loc:number)
.decl AF_EXITPred_T(interm_state:number,loc:number)
.decl AF_EXITPred_S(loc:number)
.decl AF_EXITPred(loc:number)
.decl AF_EXITPred_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,n), !LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,n), !Gt(x,loc,n).
GtEqD(x,loc,n) :- GtEq(x,loc,n).
GtEqD(x,loc,n) :- GtEqD(x,locI,n), control_flow(locI,loc), !GtEq(x,loc,n), !Lt(x,loc,n).
LtD(x,loc,n) :- Lt(x,loc,n).
LtD(x,loc,n) :- LtD(x,locI,n), control_flow(locI,loc), !Lt(x,loc,n), !GtEq(x,loc,n).
EXITPred(loc) :- Return(_,loc).
AF_EXITPred_T(interm_state,loc) :- AF_EXITPred_T(tempOne,loc), !EXITPred(tempOne), control_flow(tempOne,interm_state).
AF_EXITPred_T(interm_state,loc) :- !EXITPred(loc), control_flow(loc,interm_state).
AF_EXITPred_S(loc) :- !EXITPred(loc), control_flow(loc,tempOne), AF_EXITPred_S(tempOne).
AF_EXITPred_S(loc) :- AF_EXITPred_T(loc,loc).
AF_EXITPred(loc) :- State(loc), !AF_EXITPred_S(loc).
AF_EXITPred_Final(loc) :- Start(loc), AF_EXITPred(loc), !NotTotal(loc).
.output Gt
.output GtEq
.output LtEq
.output Lt
.output Start
.output State
.output flow
.output Return
.output AF_EXITPred_Final(IO=stdout)

.output NotTotal(IO=stdout)
.output control_flow(IO=stdout)

