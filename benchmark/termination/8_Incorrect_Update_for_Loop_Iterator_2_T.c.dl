/*𝝐 */


/*(Start())@2 · ("l"=_)@3 · ((["l"=0]@4 · ("l"=0)@5 · (Return(0))@6) \/ ([("l"!=0)]@7 · (("l"!=0))@8 · ("l"<1)@9 · (Return(0))@10))*/

flow(2,3).
flow(4,5).
flow(5,6).
flow(6,6).
flow(7,8).
flow(8,9).
flow(9,10).
flow(10,10).
Start(2).
State(2).
NotEq("l",3,0).
Eq("l",3,0).
State(4).
Eq("l",5,0).
State(5).
Return(0,6).
State(6).
State(3).
State(7).
NotEq("l",8,0).
State(8).
State(9).
Return(0,10).
State(10).
control_flow(3,4) :- EqD("l",3,0).
control_flow(3,7) :- NotEqD("l",3,0).
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl NotEqD(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl EXITPred(loc:number)
.decl AF_EXITPred_T(interm_state:number,loc:number)
.decl AF_EXITPred_S(loc:number)
.decl AF_EXITPred(loc:number)
.decl AF_EXITPred_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
NotEqD(x,loc,n) :- NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEqD(x,locI,n), control_flow(locI,loc), !NotEq(x,loc,n), !Eq(x,loc,n).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,n), !NotEq(x,loc,n).
EXITPred(loc) :- Return(_,loc).
AF_EXITPred_T(interm_state,loc) :- AF_EXITPred_T(tempOne,loc), !EXITPred(tempOne), control_flow(tempOne,interm_state).
AF_EXITPred_T(interm_state,loc) :- !EXITPred(loc), control_flow(loc,interm_state).
AF_EXITPred_S(loc) :- !EXITPred(loc), control_flow(loc,tempOne), AF_EXITPred_S(tempOne).
AF_EXITPred_S(loc) :- AF_EXITPred_T(loc,loc).
AF_EXITPred(loc) :- State(loc), !AF_EXITPred_S(loc).
AF_EXITPred_Final(loc) :- Start(loc), AF_EXITPred(loc), !NotTotal(loc).
.output NotEq
.output Eq
.output Start
.output State
.output flow
.output Return
.output AF_EXITPred_Final(IO=stdout)

.output NotTotal(IO=stdout)

/* Other information 

//-- Facts for Procedure <__VERIFIER_nondet_uchar> 

//-- Facts for Procedure <main> 

Flow(13,0). //@11:1-13:5
Flow(9,12). //@22:5-23:1
Flow(1,11). //@15:5-15:12
Flow(11,8). //@15:12-15:12
Flow(11,10). //@15:12-15:12
Flow(10,6). //@15:12-17:13
Flow(10,7). //@15:12-17:13
Flow(8,9). //@15:12-22:5
Flow(3,1). //@17:9-15:5
Flow(7,5). //@17:13-17:18
Flow(6,3). //@17:13-17:9
Flow(5,2). //@17:18-17:18
Flow(5,4). //@17:18-17:18
Flow(4,3). //@17:18-17:9
Flow(2,3). //@17:18-17:9
Flow(0,1). //@13:5-15:5
Stmt_Decl(0,[ICall(_fun___VERIFIER_nondet_uchar,,n$7),IStore(&l,()n$7)]). // @13:5
PruneNode(2,false,[Prune(!n$2, false)]). // @17:18
PruneNode(4,true,[Prune(n$2, true)]). // @17:18
Stmt_UnaryOperator(5,[ILoad(&l,n$2),IStore(&l,(n$2 - 1))]). // @17:18
PruneNode(6,false,[ILoad(&l,n$1),Prune(!n$1, false)]). // @17:13
PruneNode(7,true,[ILoad(&l,n$1),Prune(n$1, true)]). // @17:13
Join(3,[]).  // @17:9
PruneNode(8,false,[Prune(!n$0, false)]). // @15:12
PruneNode(10,true,[Prune(n$0, true)]). // @15:12
Stmt_UnaryOperator(11,[ILoad(&l,n$0),IStore(&l,(n$0 - 1))]). // @15:12
Join(1,[]).  // @15:5
Stmt_Return(9,[IStore(&return,0)]). // @22:5
Exit(12).  // @23:1
Start(13). // @11:1
*/

