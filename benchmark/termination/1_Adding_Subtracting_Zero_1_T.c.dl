/*(Join())@21*/

flow(21,21).
State(21).

/*(Start())@26 · (linesToRead=_)@27 · (([linesToRead<=0]@28 · (Return(0))@29) \/ ([linesToRead>0]@30 · (h=_)@31 · (([h<=0]@32 · (Return(0))@33) \/ (((([h>0]@34 · [h>0]@35 · (h>0)@36 · (h>0)@37 · [linesToRead>h]@38 · (linesToRead=h)@39 · (linesToRead=0)@40)^w) \/ (([h>0]@41 · [h>0]@42 · (h>0)@43 · (h>0)@44 · [linesToRead<=h]@45 · (linesToRead=0)@46)^w))))))*/

flow(26,27).
flow(29,29).
flow(33,33).
flow(40,40).
flow(40,34).
flow(46,46).
flow(46,41).
Start(26).
LtEq("linesToRead",26,0).
LtEq("h",26,0).
GtVar("linesToRead",26,"h").
Gt("linesToRead",26,0).
Gt("h",26,0).
LtEqVar("linesToRead",26,"h").
State(26).
State(28).
Return(0,29).
State(29).
State(27).
State(30).
State(32).
Return(0,33).
State(33).
State(34).
State(35).
State(36).
State(37).
State(38).
Gt("linesToRead",39,0).
LtEqVar("linesToRead",39,"h").
State(39).
LtEq("linesToRead",40,0).
LtEqVar("linesToRead",40,"h").
State(40).
State(31).
State(41).
State(42).
State(43).
State(44).
State(45).
LtEq("linesToRead",46,0).
LtEqVar("linesToRead",46,"h").
State(46).
control_flow(27,28) :- LtEqD("linesToRead",27,0).
control_flow(28,29) :- LtEqD("linesToRead",27,0).
control_flow(27,30) :- GtD("linesToRead",27,0).
control_flow(30,31) :- GtD("linesToRead",27,0).
control_flow(31,32) :- GtD("linesToRead",27,0), LtEqD("h",31,0).
control_flow(32,33) :- GtD("linesToRead",27,0), LtEqD("h",31,0).
control_flow(31,34) :- GtD("linesToRead",27,0), GtD("h",31,0).
control_flow(34,35) :- GtD("linesToRead",27,0), GtD("h",31,0), GtD("h",34,0).
control_flow(35,36) :- GtD("linesToRead",27,0), GtD("h",31,0), GtD("h",34,0).
control_flow(36,37) :- GtD("linesToRead",27,0), GtD("h",31,0), GtD("h",34,0).
control_flow(37,38) :- GtD("linesToRead",27,0), GtD("h",31,0), GtD("h",34,0), GtVarD("linesToRead",37,"h").
control_flow(38,39) :- GtD("linesToRead",27,0), GtD("h",31,0), GtD("h",34,0), GtVarD("linesToRead",37,"h").
control_flow(39,40) :- GtD("linesToRead",27,0), GtD("h",31,0), GtD("h",34,0), GtVarD("linesToRead",37,"h").
control_flow(31,41) :- GtD("linesToRead",27,0), GtD("h",31,0).
control_flow(41,42) :- GtD("linesToRead",27,0), GtD("h",31,0), GtD("h",41,0).
control_flow(42,43) :- GtD("linesToRead",27,0), GtD("h",31,0), GtD("h",41,0).
control_flow(43,44) :- GtD("linesToRead",27,0), GtD("h",31,0), GtD("h",41,0).
control_flow(44,45) :- GtD("linesToRead",27,0), GtD("h",31,0), GtD("h",41,0), LtEqVarD("linesToRead",44,"h").
control_flow(45,46) :- GtD("linesToRead",27,0), GtD("h",31,0), GtD("h",41,0), LtEqVarD("linesToRead",44,"h").
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl LtEqVar(x:symbol,loc:number,y:symbol)
.decl Gt(x:symbol,loc:number,n:number)
.decl GtVar(x:symbol,loc:number,y:symbol)
.decl LtEq(x:symbol,loc:number,n:number)
.decl LtEqVarD(x:symbol,loc:number,y:symbol)
.decl GtVarD(x:symbol,loc:number,y:symbol)
.decl GtD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl EXIT(loc:number)
.decl AF_EXIT_T(interm_state:number,loc:number)
.decl AF_EXIT_S(loc:number)
.decl AF_EXIT(loc:number)
.decl AF_EXIT_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
LtEqVarD(x,loc,n) :- LtEqVar(x,loc,n).
LtEqVarD(x,loc,n) :- LtEqVarD(x,locI,n), control_flow(locI,loc), !LtEqVar(x,loc,_), !GtVar(x,loc,_).
GtVarD(x,loc,n) :- GtVar(x,loc,n).
GtVarD(x,loc,n) :- GtVarD(x,locI,n), control_flow(locI,loc), !GtVar(x,loc,_), !LtEqVar(x,loc,_).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,_), !LtEq(x,loc,_).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,_), !Gt(x,loc,_).
EXIT(loc) :- Return(_,loc).
AF_EXIT_T(interm_state,loc) :- AF_EXIT_T(tempOne,loc), !EXIT(tempOne), control_flow(tempOne,interm_state).
AF_EXIT_T(interm_state,loc) :- !EXIT(loc), control_flow(loc,interm_state).
AF_EXIT_S(loc) :- !EXIT(loc), control_flow(loc,tempOne), AF_EXIT_S(tempOne).
AF_EXIT_S(loc) :- AF_EXIT_T(loc,loc).
AF_EXIT(loc) :- State(loc), !AF_EXIT_S(loc).
AF_EXIT_Final(loc) :- Start(loc), AF_EXIT(loc), !NotTotal(loc).
.output LtEqVar
.output Gt
.output GtVar
.output LtEq
.output Start
.output State
.output flow
.output Return
.output AF_EXIT_Final(IO=stdout)

/* Other information 

//-- Facts for Procedure <__VERIFIER_nondet_int> 

//-- Facts for Procedure <main> 

Flow(19,0). //@11:1-14:5
Flow(16,3). //@24:5-26:1
Flow(8,18). //@18:5-18:12
Flow(18,15). //@18:12-18:12
Flow(18,17). //@18:12-18:12
Flow(17,13). //@18:12-20:13
Flow(15,16). //@18:12-24:5
Flow(14,8). //@22:9-18:5
Flow(10,14). //@20:9-22:9
Flow(13,11). //@20:13-20:13
Flow(13,12). //@20:13-20:13
Flow(12,9). //@20:13-21:13
Flow(11,10). //@20:13-20:9
Flow(9,10). //@21:13-20:9
Flow(7,8). //@17:5-18:5
Flow(5,7). //@15:5-17:5
Flow(1,4). //@15:9-15:9
Flow(1,6). //@15:9-15:9
Flow(6,2). //@15:9-16:9
Flow(4,5). //@15:9-15:5
Flow(2,3). //@16:9-26:1
Flow(0,1). //@14:5-15:9
Stmt_Decl(0,[ICall(_fun___VERIFIER_nondet_int,,n$13),IStore(&linesToRead,n$13)]). // @14:5
Stmt_Return(2,[IStore(&return,0)]). // @16:9
PruneNode(4,false,[Prune(!(n$10 <= 0), false)]). // @15:9
PruneNode(6,true,[Prune((n$10 <= 0), true)]). // @15:9
Stmt_BinaryOperatorStmt(1,LE,[ILoad(&linesToRead,n$10)]). // @15:9
Join(5,[]).  // @15:5
Stmt_Decl(7,[ICall(_fun___VERIFIER_nondet_int,,n$9),IStore(&h,n$9)]). // @17:5
Stmt_BinaryOperatorStmt(9,Assign,[ILoad(&h,n$5),IStore(&linesToRead,n$5)]). // @21:13
PruneNode(11,false,[Prune(!(n$3 > n$4), false)]). // @20:13
PruneNode(12,true,[Prune((n$3 > n$4), true)]). // @20:13
Stmt_BinaryOperatorStmt(13,GT,[ILoad(&linesToRead,n$3),ILoad(&h,n$4)]). // @20:13
Join(10,[]).  // @20:9
Stmt_BinaryOperatorStmt(14,Assign,[ILoad(&h,n$1),ILoad(&linesToRead,n$2),IStore(&h,(n$1 - n$2))]). // @22:9
PruneNode(15,false,[Prune(!(n$0 > 0), false)]). // @18:12
PruneNode(17,true,[Prune((n$0 > 0), true)]). // @18:12
Stmt_BinaryOperatorStmt(18,GT,[ILoad(&h,n$0)]). // @18:12
Join(8,[]).  // @18:5
Stmt_Return(16,[IStore(&return,0)]). // @24:5
Exit(3).  // @26:1
Start(19). // @11:1
*/

