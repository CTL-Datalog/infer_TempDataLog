/*(Join())@13*/

flow(13,13).
State(13).

/*(Start())@23 · (l=_)@24 · (([l=0]@25 · (Return(0))@26) \/ ((([(l!=0)]@27 · [l>0]@29 · (l=0)@30 · (l=(l-1))@31 · (Return(0))@32) \/ (([(l!=0)]@36 · [l=0]@37 · ((l!=0))@38 · (l>0)@39)^w))))*/

flow(23,24).
flow(26,26).
flow(32,32).
flow(39,39).
flow(39,36).
Start(23).
Gt("l",23,0).
NotEq("l",23,0).
Eq("l",23,0).
State(23).
State(25).
Return(0,26).
State(26).
State(27).
State(29).
Eq("l",30,0).
State(30).
NotEq("l",31,0).
State(31).
Return(0,32).
State(32).
State(24).
State(36).
State(37).
State(38).
State(39).
control_flow(24,25) :- EqD("l",24,0).
control_flow(25,26) :- EqD("l",24,0).
control_flow(24,27) :- NotEqD("l",24,0).
control_flow(27,29) :- NotEqD("l",24,0), GtD("l",27,0).
control_flow(29,30) :- NotEqD("l",24,0), GtD("l",27,0).
control_flow(30,31) :- NotEqD("l",24,0), GtD("l",27,0).
control_flow(31,32) :- NotEqD("l",24,0), GtD("l",27,0).
control_flow(24,36) :- NotEqD("l",24,0).
control_flow(36,37) :- NotEqD("l",24,0), EqD("l",36,0).
control_flow(37,38) :- NotEqD("l",24,0), EqD("l",36,0).
control_flow(38,39) :- NotEqD("l",24,0), EqD("l",36,0).
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl Gt(x:symbol,loc:number,n:number)
.decl GtD(x:symbol,loc:number,n:number)
.decl NotEqD(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl EXIT(loc:number)
.decl AF_EXIT_T(interm_state:number,loc:number)
.decl AF_EXIT_S(loc:number)
.decl AF_EXIT(loc:number)
.decl AF_EXIT_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,_), !LtEq(x,loc,_).
NotEqD(x,loc,n) :- NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEqD(x,locI,n), control_flow(locI,loc), !NotEq(x,loc,_), !Eq(x,loc,_).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,_), !NotEq(x,loc,_).
EXIT(loc) :- Return(_,loc).
AF_EXIT_T(interm_state,loc) :- AF_EXIT_T(tempOne,loc), !EXIT(tempOne), control_flow(tempOne,interm_state).
AF_EXIT_T(interm_state,loc) :- !EXIT(loc), control_flow(loc,interm_state).
AF_EXIT_S(loc) :- !EXIT(loc), control_flow(loc,tempOne), AF_EXIT_S(tempOne).
AF_EXIT_S(loc) :- AF_EXIT_T(loc,loc).
AF_EXIT(loc) :- State(loc), !AF_EXIT_S(loc).
AF_EXIT_Final(loc) :- Start(loc), AF_EXIT(loc), !NotTotal(loc).
.output LtEq
.output Eq
.output NotEq
.output Gt
.output Start
.output State
.output flow
.output Return
.output AF_EXIT_Final(IO=stdout)

/* Other information 

//-- Facts for Procedure <__VERIFIER_nondet_uchar> 

//-- Facts for Procedure <main> 

Flow(11,0). //@12:1-14:5
Flow(7,10). //@23:5-24:1
Flow(1,9). //@16:5-16:12
Flow(9,6). //@16:12-16:12
Flow(9,8). //@16:12-16:12
Flow(8,5). //@16:12-18:13
Flow(6,7). //@16:12-23:5
Flow(3,1). //@18:9-16:5
Flow(5,2). //@18:13-18:13
Flow(5,4). //@18:13-18:13
Flow(4,3). //@18:13-18:9
Flow(2,3). //@18:13-18:9
Flow(0,1). //@14:5-16:5
Stmt_Decl(0,[ICall(_fun___VERIFIER_nondet_uchar,,n$6),IStore(&l,()n$6)]). // @14:5
PruneNode(2,false,[Prune(!n$1, false)]). // @18:13
PruneNode(4,true,[Prune(n$1, true)]). // @18:13
Stmt_UnaryOperator(5,[ILoad(&l,n$1),IStore(&l,(n$1 - 1))]). // @18:13
Join(3,[]).  // @18:9
PruneNode(6,false,[Prune(!n$0, false)]). // @16:12
PruneNode(8,true,[Prune(n$0, true)]). // @16:12
Stmt_UnaryOperator(9,[ILoad(&l,n$0),IStore(&l,(n$0 - 1))]). // @16:12
Join(1,[]).  // @16:5
Stmt_Return(7,[IStore(&return,0)]). // @23:5
Exit(10).  // @24:1
Start(11). // @12:1
*/

