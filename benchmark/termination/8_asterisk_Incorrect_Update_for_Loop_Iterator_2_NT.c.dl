/*𝝐 */


/*(Start())@2 · ("l"=_)@3 · ((["l"=0]@4 · ("l"=0)@5 · (Return(0))@6) \/ ([("l"!=0)]@7 · (("l"!=0))@8 · ("l"<1)@9 · (Return(0))@10))*/

flow(2,3).
flow(4,5).
flow(5,6).
flow(6,6).
flow(7,8).
flow(8,9).
flow(9,10).
flow(10,10).
Start(2).
State(2).
NotEq("l",3,0).
Eq("l",3,0).
State(4).
Eq("l",5,0).
State(5).
Return(0,6).
State(6).
State(3).
State(7).
NotEq("l",8,0).
State(8).
State(9).
Return(0,10).
State(10).
control_flow(3,4) :- EqD("l",3,0).
control_flow(3,7) :- NotEqD("l",3,0).
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl NotEqD(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl EXITPred(loc:number)
.decl AF_EXITPred_T(interm_state:number,loc:number)
.decl AF_EXITPred_S(loc:number)
.decl AF_EXITPred(loc:number)
.decl AF_EXITPred_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
NotEqD(x,loc,n) :- NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEqD(x,locI,n), control_flow(locI,loc), !NotEq(x,loc,n), !Eq(x,loc,n).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,n), !NotEq(x,loc,n).
EXITPred(loc) :- Return(_,loc).
AF_EXITPred_T(interm_state,loc) :- AF_EXITPred_T(tempOne,loc), !EXITPred(tempOne), control_flow(tempOne,interm_state).
AF_EXITPred_T(interm_state,loc) :- !EXITPred(loc), control_flow(loc,interm_state).
AF_EXITPred_S(loc) :- !EXITPred(loc), control_flow(loc,tempOne), AF_EXITPred_S(tempOne).
AF_EXITPred_S(loc) :- AF_EXITPred_T(loc,loc).
AF_EXITPred(loc) :- State(loc), !AF_EXITPred_S(loc).
AF_EXITPred_Final(loc) :- Start(loc), AF_EXITPred(loc), !NotTotal(loc).
.output NotEq
.output Eq
.output Start
.output State
.output flow
.output Return
.output AF_EXITPred_Final(IO=stdout)

.output NotTotal(IO=stdout)

/* Other information 

//-- Facts for Procedure <__VERIFIER_nondet_uchar> 

//-- Facts for Procedure <main> 

Flow(11,0). //@12:1-14:5
Flow(8,10). //@26:5-27:1
Flow(1,7). //@16:5-16:12
Flow(1,9). //@16:5-16:12
Flow(9,2). //@16:12-18:9
Flow(7,8). //@16:12-26:5
Flow(6,1). //@24:9-16:5
Flow(5,6). //@19:9-24:9
Flow(3,5). //@19:13-19:9
Flow(4,5). //@19:13-19:9
Flow(2,4). //@18:9-19:13
Flow(2,3). //@18:9-19:13
Flow(0,1). //@14:5-16:5
Stmt_Decl(0,[ICall(_fun___VERIFIER_nondet_uchar,,n$8),IStore(&l,n$8)]). // @14:5
Stmt_BinaryOperatorStmt(2,Assign,[ILoad(&l,n$6),IStore(&l,(n$6 - 1))]). // @18:9
PruneNode(4,false,[ILoad(&l,n$2),Prune(!n$2, false)]). // @19:13
PruneNode(3,true,[ILoad(&l,n$2),Prune(n$2, true)]). // @19:13
Join(5,[]).  // @19:9
Stmt_BinaryOperatorStmt(6,Assign,[ILoad(&l,n$1),IStore(&l,(n$1 - 1))]). // @24:9
PruneNode(7,false,[ILoad(&l,n$0),Prune(!n$0, false)]). // @16:12
PruneNode(9,true,[ILoad(&l,n$0),Prune(n$0, true)]). // @16:12
Join(1,[]).  // @16:5
Stmt_Return(8,[IStore(&return,0)]). // @26:5
Exit(10).  // @27:1
Start(11). // @12:1
*/

