/*𝝐 */


/*(Start())@6 · ("h"=_)@7 · ("hash"=_)@8 · ("rehash"=_)@9 · ((["h"<0]@10 · ("h"<0)@11 · (Return(0))@12) \/ (["h">=0]@13 · ("h">=0)@14 · ((["hash"<=0]@15 · ("hash"<=0)@16 · (Return(0))@17) \/ (["hash">0]@18 · ("hash">0)@19 · ((["rehash"<=0]@20 · ("rehash"<=0)@21 · (Return(0))@22) \/ (["rehash">0]@23 · ("rehash">0)@24 · ((["rehash">"hash"]@25 · ("rehash">"hash")@26 · (Return(0))@27) \/ (["rehash"<="hash"]@28 · ("rehash"<="hash")@29 · ("r"=_)@30 · ((["i">="hash"]@31 · ("i">="hash")@32 · (Return(0))@33) \/ (["i"<"hash"]@34 · ("i"<"hash")@35 · ((["r">0]@36 · ("r">0)@37 · ("hash"="i")@38 · (Return(0))@39) \/ (["r"<=0]@40 · ("r"<=0)@41 · ((("hash"-"i")>=1)@42)^w))))))))))))*/

flow(6,7).
flow(7,8).
flow(8,9).
flow(10,11).
flow(11,12).
flow(12,12).
flow(13,14).
flow(15,16).
flow(16,17).
flow(17,17).
flow(18,19).
flow(20,21).
flow(21,22).
flow(22,22).
flow(23,24).
flow(25,26).
flow(26,27).
flow(27,27).
flow(28,29).
flow(29,30).
flow(31,32).
flow(32,33).
flow(33,33).
flow(34,35).
flow(36,37).
flow(37,38).
flow(38,39).
flow(39,39).
flow(40,41).
flow(41,42).
flow(42,42).
Start(6).
State(6).
GtEq("h",7,0).
Lt("h",7,0).
State(7).
GtEqVar("i",8,"hash").
LtVar("i",8,"hash").
LtEqVar("rehash",8,"hash").
GtVar("rehash",8,"hash").
LtEq("hash",8,0).
Gt("hash",8,0).
State(8).
LtEqVar("rehash",9,"hash").
GtVar("rehash",9,"hash").
LtEq("rehash",9,0).
Gt("rehash",9,0).
State(10).
Lt("h",11,0).
State(11).
Return(0,12).
State(12).
State(9).
State(13).
GtEq("h",14,0).
State(15).
LtEq("hash",16,0).
State(16).
Return(0,17).
State(17).
State(14).
State(18).
Gt("hash",19,0).
State(20).
LtEq("rehash",21,0).
State(21).
Return(0,22).
State(22).
State(19).
State(23).
Gt("rehash",24,0).
State(25).
GtVar("rehash",26,"hash").
State(26).
Return(0,27).
State(27).
State(24).
State(28).
LtEqVar("rehash",29,"hash").
State(29).
LtEq("r",30,0).
Gt("r",30,0).
State(31).
GtEqVar("i",32,"hash").
State(32).
Return(0,33).
State(33).
State(30).
State(34).
LtVar("i",35,"hash").
State(36).
Gt("r",37,0).
State(37).
GtEqVar("i",38,"hash").
State(38).
Return(0,39).
State(39).
State(35).
State(40).
LtEq("r",41,0).
State(41).
State(42).
control_flow(9,10) :- LtD("h",9,0).
control_flow(9,13) :- GtEqD("h",9,0).
control_flow(14,15) :- LtEqD("hash",14,0).
control_flow(14,18) :- GtD("hash",14,0).
control_flow(19,20) :- LtEqD("rehash",19,0).
control_flow(19,23) :- GtD("rehash",19,0).
control_flow(24,25) :- GtVarD("rehash",24,"hash").
control_flow(24,28) :- LtEqVarD("rehash",24,"hash").
control_flow(30,31) :- GtEqVarD("i",30,"hash").
control_flow(30,34) :- LtVarD("i",30,"hash").
control_flow(35,36) :- GtD("r",35,0).
control_flow(35,40) :- LtEqD("r",35,0).
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl LtVar(x:symbol,loc:number,y:symbol)
.decl GtEqVar(x:symbol,loc:number,y:symbol)
.decl LtEqVar(x:symbol,loc:number,y:symbol)
.decl GtVar(x:symbol,loc:number,y:symbol)
.decl Gt(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl GtEq(x:symbol,loc:number,n:number)
.decl Lt(x:symbol,loc:number,n:number)
.decl LtVarD(x:symbol,loc:number,y:symbol)
.decl GtEqVarD(x:symbol,loc:number,y:symbol)
.decl LtEqVarD(x:symbol,loc:number,y:symbol)
.decl GtVarD(x:symbol,loc:number,y:symbol)
.decl GtD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl GtEqD(x:symbol,loc:number,n:number)
.decl LtD(x:symbol,loc:number,n:number)
.decl EXITPred(loc:number)
.decl AF_EXITPred_T(interm_state:number,loc:number)
.decl AF_EXITPred_S(loc:number)
.decl AF_EXITPred(loc:number)
.decl AF_EXITPred_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
LtVarD(x,loc,n) :- LtVar(x,loc,n).
LtVarD(x,loc,n) :- LtVarD(x,locI,n), control_flow(locI,loc), !LtVar(x,loc,n), !GtEqVar(x,loc,n).
GtEqVarD(x,loc,n) :- GtEqVar(x,loc,n).
GtEqVarD(x,loc,n) :- GtEqVarD(x,locI,n), control_flow(locI,loc), !GtEqVar(x,loc,n), !LtVar(x,loc,n).
LtEqVarD(x,loc,n) :- LtEqVar(x,loc,n).
LtEqVarD(x,loc,n) :- LtEqVarD(x,locI,n), control_flow(locI,loc), !LtEqVar(x,loc,n), !GtVar(x,loc,n).
GtVarD(x,loc,n) :- GtVar(x,loc,n).
GtVarD(x,loc,n) :- GtVarD(x,locI,n), control_flow(locI,loc), !GtVar(x,loc,n), !LtEqVar(x,loc,n).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,n), !LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,n), !Gt(x,loc,n).
GtEqD(x,loc,n) :- GtEq(x,loc,n).
GtEqD(x,loc,n) :- GtEqD(x,locI,n), control_flow(locI,loc), !GtEq(x,loc,n), !Lt(x,loc,n).
LtD(x,loc,n) :- Lt(x,loc,n).
LtD(x,loc,n) :- LtD(x,locI,n), control_flow(locI,loc), !Lt(x,loc,n), !GtEq(x,loc,n).
EXITPred(loc) :- Return(_,loc).
AF_EXITPred_T(interm_state,loc) :- AF_EXITPred_T(tempOne,loc), !EXITPred(tempOne), control_flow(tempOne,interm_state).
AF_EXITPred_T(interm_state,loc) :- !EXITPred(loc), control_flow(loc,interm_state).
AF_EXITPred_S(loc) :- !EXITPred(loc), control_flow(loc,tempOne), AF_EXITPred_S(tempOne).
AF_EXITPred_S(loc) :- AF_EXITPred_T(loc,loc).
AF_EXITPred(loc) :- State(loc), !AF_EXITPred_S(loc).
AF_EXITPred_Final(loc) :- Start(loc), AF_EXITPred(loc), !NotTotal(loc).
.output LtVar
.output GtEqVar
.output LtEqVar
.output GtVar
.output Gt
.output LtEq
.output GtEq
.output Lt
.output Start
.output State
.output flow
.output Return
.output AF_EXITPred_Final(IO=stdout)

.output NotTotal(IO=stdout)

