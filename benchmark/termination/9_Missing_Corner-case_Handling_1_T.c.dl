/*𝝐 */


/*(Start())@0 · ("count"=0)@1 · (Return(0))@2*/

flow(0,1).
flow(1,2).
flow(2,2).
Start(0).
State(0).
State(1).
Return(0,2).
State(2).

/*(Start())@3 · ("flag"=0)@4 · (Return(0))@5*/

flow(3,4).
flow(4,5).
flow(5,5).
Start(3).
State(3).
State(4).
Return(0,5).
State(5).

/*(Start())@7 · (𝝐 )^w*/

flow(7,7).
Start(7).
State(7).

/*(Start())@10 · ((["flag"=1]@11 · ("flag"=1)@12 · (Return(0))@13) \/ ([("flag"!=1)]@14 · (("flag"!=1))@15 · ((["count">100]@16 · ("count">100)@17 · (Return(0))@18) \/ (["count"<=100]@19 · ("count"<=100)@20 · ("num"=_)@21 · ((["num"<=0]@22 · ("num"<=0)@23 · (Return(-1))@24) \/ (["num">0]@25 · ("num">0)@26 · ((["num"<995]@27 · ("num"<995)@28 · ("count"=("count"+1))@29 · (Return(0))@30) \/ (["num">=995]@31 · ("num">=995)@32 · ("flag"=1)@33 · (Return(0))@34))))))))*/

flow(11,12).
flow(12,13).
flow(13,13).
flow(14,15).
flow(16,17).
flow(17,18).
flow(18,18).
flow(19,20).
flow(20,21).
flow(22,23).
flow(23,24).
flow(24,24).
flow(25,26).
flow(27,28).
flow(28,29).
flow(29,30).
flow(30,30).
flow(31,32).
flow(32,33).
flow(33,34).
flow(34,34).
Start(10).
State(11).
Eq("flag",12,1).
State(12).
Return(0,13).
State(13).
State(10).
State(14).
NotEq("flag",15,1).
State(16).
Gt("count",17,100).
State(17).
Return(0,18).
State(18).
State(15).
State(19).
LtEq("count",20,100).
State(20).
GtEq("num",21,995).
Lt("num",21,995).
LtEq("num",21,0).
Gt("num",21,0).
State(22).
LtEq("num",23,0).
Lt("num",23,995).
State(23).
Return(-1,24).
State(24).
State(21).
State(25).
Gt("num",26,0).
State(27).
Lt("num",28,995).
State(28).
State(29).
Return(0,30).
State(30).
State(26).
State(31).
GtEq("num",32,995).
Gt("num",32,0).
State(32).
Eq("flag",33,1).
State(33).
Return(0,34).
State(34).
control_flow(10,11) :- EqD("flag",10,1).
control_flow(10,14) :- NotEqD("flag",10,1).
control_flow(15,16) :- GtD("count",15,100).
control_flow(15,19) :- LtEqD("count",15,100).
control_flow(21,22) :- LtEqD("num",21,0).
control_flow(21,25) :- GtD("num",21,0).
control_flow(26,27) :- LtD("num",26,995).
control_flow(26,31) :- GtEqD("num",26,995).
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl GtEq(x:symbol,loc:number,n:number)
.decl Lt(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl Gt(x:symbol,loc:number,n:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl GtEqD(x:symbol,loc:number,n:number)
.decl LtD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl GtD(x:symbol,loc:number,n:number)
.decl NotEqD(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl EXITPred(loc:number)
.decl AF_EXITPred_T(interm_state:number,loc:number)
.decl AF_EXITPred_S(loc:number)
.decl AF_EXITPred(loc:number)
.decl AF_EXITPred_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
GtEqD(x,loc,n) :- GtEq(x,loc,n).
GtEqD(x,loc,n) :- GtEqD(x,locI,n), control_flow(locI,loc), !GtEq(x,loc,n), !Lt(x,loc,n).
LtD(x,loc,n) :- Lt(x,loc,n).
LtD(x,loc,n) :- LtD(x,locI,n), control_flow(locI,loc), !Lt(x,loc,n), !GtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,n), !Gt(x,loc,n).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,n), !LtEq(x,loc,n).
NotEqD(x,loc,n) :- NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEqD(x,locI,n), control_flow(locI,loc), !NotEq(x,loc,n), !Eq(x,loc,n).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,n), !NotEq(x,loc,n).
EXITPred(loc) :- Return(_,loc).
AF_EXITPred_T(interm_state,loc) :- AF_EXITPred_T(tempOne,loc), !EXITPred(tempOne), control_flow(tempOne,interm_state).
AF_EXITPred_T(interm_state,loc) :- !EXITPred(loc), control_flow(loc,interm_state).
AF_EXITPred_S(loc) :- !EXITPred(loc), control_flow(loc,tempOne), AF_EXITPred_S(tempOne).
AF_EXITPred_S(loc) :- AF_EXITPred_T(loc,loc).
AF_EXITPred(loc) :- State(loc), !AF_EXITPred_S(loc).
AF_EXITPred_Final(loc) :- Start(loc), AF_EXITPred(loc), !NotTotal(loc).
.output GtEq
.output Lt
.output LtEq
.output Gt
.output NotEq
.output Eq
.output Start
.output State
.output flow
.output Return
.output AF_EXITPred_Final(IO=stdout)

.output NotTotal(IO=stdout)

