/*𝝐 */


/*(Start())@6 · ("ret"=_)@7 · ("count"=_)@8 · ((["count"<=0]@9 · ("count"<=0)@10 · (Return(0))@11) \/ (["count">0]@12 · ("count">0)@13 · ("buf"=0)@14 · ((["count"<=0]@15 · ("count"<=0)@16 · (Return(0))@17) \/ (["count">0]@18 · ("count">0)@19 · ((["ret">0]@20 · ("ret">0)@21 · ("count"<1)@22 · (Return(0))@23) \/ (["ret"<=0]@24 · ("ret"<=0)@25 · (("count">=1)@26)^w))))))*/

flow(6,7).
flow(7,8).
flow(9,10).
flow(10,11).
flow(11,11).
flow(12,13).
flow(13,14).
flow(15,16).
flow(16,17).
flow(17,17).
flow(18,19).
flow(20,21).
flow(21,22).
flow(22,23).
flow(23,23).
flow(24,25).
flow(25,26).
flow(26,26).
Start(6).
State(6).
LtEq("ret",7,0).
Gt("ret",7,0).
State(7).
LtEq("count",8,0).
Gt("count",8,0).
State(9).
LtEq("count",10,0).
State(10).
Return(0,11).
State(11).
State(8).
State(12).
Gt("count",13,0).
State(13).
State(15).
LtEq("count",16,0).
State(16).
Return(0,17).
State(17).
State(14).
State(18).
Gt("count",19,0).
State(20).
Gt("ret",21,0).
State(21).
State(22).
Return(0,23).
State(23).
State(19).
State(24).
LtEq("ret",25,0).
State(25).
Gt("count",26,0).
State(26).
control_flow(8,9) :- LtEqD("count",8,0).
control_flow(8,12) :- GtD("count",8,0).
control_flow(14,15) :- LtEqD("count",14,0).
control_flow(14,18) :- GtD("count",14,0).
control_flow(19,20) :- GtD("ret",19,0).
control_flow(19,24) :- LtEqD("ret",19,0).
/*𝝐 */


//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl Gt(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl GtD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl EXITPred(loc:number)
.decl AF_EXITPred_T(interm_state:number,loc:number)
.decl AF_EXITPred_S(loc:number)
.decl AF_EXITPred(loc:number)
.decl AF_EXITPred_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,n), !LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,n), !Gt(x,loc,n).
EXITPred(loc) :- Return(_,loc).
AF_EXITPred_T(interm_state,loc) :- AF_EXITPred_T(tempOne,loc), !EXITPred(tempOne), control_flow(tempOne,interm_state).
AF_EXITPred_T(interm_state,loc) :- !EXITPred(loc), control_flow(loc,interm_state).
AF_EXITPred_S(loc) :- !EXITPred(loc), control_flow(loc,tempOne), AF_EXITPred_S(tempOne).
AF_EXITPred_S(loc) :- AF_EXITPred_T(loc,loc).
AF_EXITPred(loc) :- State(loc), !AF_EXITPred_S(loc).
AF_EXITPred_Final(loc) :- Start(loc), AF_EXITPred(loc), !NotTotal(loc).
.output Gt
.output LtEq
.output Start
.output State
.output flow
.output Return
.output AF_EXITPred_Final(IO=stdout)

.output NotTotal(IO=stdout)

