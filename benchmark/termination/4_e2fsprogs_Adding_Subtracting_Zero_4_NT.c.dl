/*𝝐 */


/*(Start())@6 · ("ret"=_)@7 · ("count"=_)@8 · ((["count"<=0]@9 · ("count"<=0)@10 · (Return(0))@11) \/ (["count">0]@12 · ("count">0)@13 · ("buf"=0)@14 · ((["count"<=0]@15 · ("count"<=0)@16 · (Return(0))@17) \/ (["count">0]@18 · ("count">0)@19 · ((["ret">0]@20 · ("ret">0)@21 · ("count"<1)@22 · (Return(0))@23) \/ (["ret"<=0]@24 · ("ret"<=0)@25 · (("count">=1)@26)^w))))))*/

flow(6,7).
flow(7,8).
flow(9,10).
flow(10,11).
flow(11,11).
flow(12,13).
flow(13,14).
flow(15,16).
flow(16,17).
flow(17,17).
flow(18,19).
flow(20,21).
flow(21,22).
flow(22,23).
flow(23,23).
flow(24,25).
flow(25,26).
flow(26,26).
Start(6).
State(6).
LtEq("ret",7,0).
Gt("ret",7,0).
State(7).
LtEq("count",8,0).
Gt("count",8,0).
State(9).
LtEq("count",10,0).
State(10).
Return(0,11).
State(11).
State(8).
State(12).
Gt("count",13,0).
State(13).
State(15).
LtEq("count",16,0).
State(16).
Return(0,17).
State(17).
State(14).
State(18).
Gt("count",19,0).
State(20).
Gt("ret",21,0).
State(21).
State(22).
Return(0,23).
State(23).
State(19).
State(24).
LtEq("ret",25,0).
State(25).
Gt("count",26,0).
State(26).
control_flow(8,9) :- LtEqD("count",8,0).
control_flow(8,12) :- GtD("count",8,0).
control_flow(14,15) :- LtEqD("count",14,0).
control_flow(14,18) :- GtD("count",14,0).
control_flow(19,20) :- GtD("ret",19,0).
control_flow(19,24) :- LtEqD("ret",19,0).
/*𝝐 */


//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl Gt(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl GtD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl EXITPred(loc:number)
.decl AF_EXITPred_T(interm_state:number,loc:number)
.decl AF_EXITPred_S(loc:number)
.decl AF_EXITPred(loc:number)
.decl AF_EXITPred_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,n), !LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,n), !Gt(x,loc,n).
EXITPred(loc) :- Return(_,loc).
AF_EXITPred_T(interm_state,loc) :- AF_EXITPred_T(tempOne,loc), !EXITPred(tempOne), control_flow(tempOne,interm_state).
AF_EXITPred_T(interm_state,loc) :- !EXITPred(loc), control_flow(loc,interm_state).
AF_EXITPred_S(loc) :- !EXITPred(loc), control_flow(loc,tempOne), AF_EXITPred_S(tempOne).
AF_EXITPred_S(loc) :- AF_EXITPred_T(loc,loc).
AF_EXITPred(loc) :- State(loc), !AF_EXITPred_S(loc).
AF_EXITPred_Final(loc) :- Start(loc), AF_EXITPred(loc), !NotTotal(loc).
.output Gt
.output LtEq
.output Start
.output State
.output flow
.output Return
.output AF_EXITPred_Final(IO=stdout)

.output NotTotal(IO=stdout)

/* Other information 

//-- Facts for Procedure <__VERIFIER_nondet_int> 

//-- Facts for Procedure <main> 

Flow(22,0). //@46:1-48:5
Flow(19,4). //@62:5-63:1
Flow(9,21). //@54:5-54:12
Flow(21,18). //@54:12-54:12
Flow(21,20). //@54:12-54:12
Flow(20,10). //@54:12-56:9
Flow(18,19). //@54:12-62:5
Flow(17,9). //@60:9-54:5
Flow(16,17). //@59:9-60:9
Flow(14,16). //@57:9-59:9
Flow(11,13). //@57:13-57:13
Flow(11,15). //@57:13-57:13
Flow(15,12). //@57:13-58:13
Flow(13,14). //@57:13-57:9
Flow(12,4). //@58:13-63:1
Flow(10,11). //@56:9-57:13
Flow(8,9). //@53:5-54:5
Flow(6,8). //@50:5-53:5
Flow(2,5). //@50:9-50:9
Flow(2,7). //@50:9-50:9
Flow(7,3). //@50:9-51:9
Flow(5,6). //@50:9-50:5
Flow(3,4). //@51:9-63:1
Flow(1,2). //@49:5-50:9
Flow(0,1). //@48:5-49:5
Stmt_Decl(0,[ICall(_fun___VERIFIER_nondet_int,,n$16),IStore(&ret,n$16)]). // @48:5
Stmt_Decl(1,[ICall(_fun___VERIFIER_nondet_int,,n$15),IStore(&count,n$15)]). // @49:5
Stmt_Return(3,[IStore(&return,0)]). // @51:9
PruneNode(5,false,[Prune(!(n$12 <= 0), false)]). // @50:9
PruneNode(7,true,[Prune((n$12 <= 0), true)]). // @50:9
Stmt_BinaryOperatorStmt(2,LE,[ILoad(&count,n$12)]). // @50:9
Join(6,[]).  // @50:5
Stmt_Decl(8,[IStore(&buf,0)]). // @53:5
Stmt_BinaryOperatorStmt(10,Assign,[ILoad(&buf,n$8),ILoad(&count,n$9),ICall(_fun_read,n$8,n$9,n$10),IStore(&ret,n$10)]). // @56:9
Stmt_Return(12,[IStore(&return,0)]). // @58:13
PruneNode(13,false,[Prune(!(n$5 < 0), false)]). // @57:13
PruneNode(15,true,[Prune((n$5 < 0), true)]). // @57:13
Stmt_BinaryOperatorStmt(11,LT,[ILoad(&ret,n$5)]). // @57:13
Join(14,[]).  // @57:9
Stmt_BinaryOperatorStmt(16,SubAssign,[ILoad(&ret,n$3),ILoad(&count,n$4),IStore(&count,(n$4 - n$3))]). // @59:9
Stmt_BinaryOperatorStmt(17,AddAssign,[ILoad(&ret,n$1),ILoad(&buf,n$2),IStore(&buf,(n$2 + n$1))]). // @60:9
PruneNode(18,false,[Prune(!(n$0 > 0), false)]). // @54:12
PruneNode(20,true,[Prune((n$0 > 0), true)]). // @54:12
Stmt_BinaryOperatorStmt(21,GT,[ILoad(&count,n$0)]). // @54:12
Join(9,[]).  // @54:5
Stmt_Return(19,[IStore(&return,0)]). // @62:5
Exit(4).  // @63:1
Start(22). // @46:1
//-- Facts for Procedure <read> 

*/

