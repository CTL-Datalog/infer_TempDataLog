/*(Join())@21*/

flow(21,21).
State(21).

/*(Start())@24 · (head=_)@25 · (cyclic=head)@26 · (i=2)@27 · (([i>n]@28 · (Return(0))@29) \/ (([i<=n]@30 · (i<=n)@32)^w))*/

flow(24,25).
flow(25,26).
flow(26,27).
flow(29,29).
flow(32,32).
flow(32,30).
Start(24).
GtVar("i",24,"n").
LtEqVar("i",24,"n").
State(24).
State(25).
State(26).
State(28).
Return(0,29).
State(29).
State(27).
State(30).
State(32).
control_flow(27,28) :- GtVarD("i",27,"n").
control_flow(28,29) :- GtVarD("i",27,"n").
control_flow(27,30) :- LtEqVarD("i",27,"n").
control_flow(30,32) :- LtEqVarD("i",27,"n").
/*(Start())@39 · (num=_)@40 · (([num<=0]@41 · (Return(0))@42) \/ ([num>0]@43 · (([num>65534]@44 · (Return(0))@45) \/ ([num<=65534]@46 · (list=_)@47 · (ip=list)@48 · (([ip=0]@49 · (Return(0))@50) \/ ((([(ip!=0)]@51 · [ip>&ip.nxtact]@52 · [ip>0]@53 · (ip=0)@54 · (nxt=&ip.nxtact)@55 · (ip=nxt)@56 · (Return(0))@57) \/ (([ip<=&ip.nxtact]@58 · ((ip!=0))@59 · (ip<=&ip.nxtact)@60)^w))))))))*/

flow(39,40).
flow(42,42).
flow(45,45).
flow(50,50).
flow(57,57).
flow(60,60).
flow(60,58).
Start(39).
LtEq("num",39,0).
Gt("num",39,65534).
Eq("ip",39,0).
NotEq("ip",39,0).
GtVar("ip",39,"&ip.nxtact").
Gt("ip",39,0).
Gt("num",39,0).
LtEq("num",39,65534).
LtEqVar("ip",39,"&ip.nxtact").  // delete this line 
State(39).
State(41).
Return(0,42).
State(42).
State(40).
State(44).
Return(0,45).
State(45).
State(43).
State(46).
State(47).
State(49).
Return(0,50).
State(50).
State(51).
State(52).
State(53).
Eq("ip",54,0).
State(54).
State(55).
LtEqVar("ip",56,"&ip.nxtact").
State(56).
Return(0,57).
State(57).
State(48).
State(58).
State(59).
State(60).
control_flow(40,41) :- LtEqD("num",40,0).
control_flow(41,42) :- LtEqD("num",40,0).
control_flow(40,43) :- GtD("num",40,0).
control_flow(43,44) :- GtD("num",40,0), GtD("num",43,65534).
control_flow(44,45) :- GtD("num",40,0), GtD("num",43,65534).
control_flow(43,46) :- GtD("num",40,0), LtEqD("num",43,65534).
control_flow(46,47) :- GtD("num",40,0), LtEqD("num",43,65534).
control_flow(47,48) :- GtD("num",40,0), LtEqD("num",43,65534).
control_flow(48,49) :- GtD("num",40,0), LtEqD("num",43,65534), EqD("ip",48,0).
control_flow(49,50) :- GtD("num",40,0), LtEqD("num",43,65534), EqD("ip",48,0).
control_flow(48,51) :- GtD("num",40,0), LtEqD("num",43,65534), NotEqD("ip",48,0).
control_flow(51,52) :- GtD("num",40,0), LtEqD("num",43,65534), NotEqD("ip",48,0), GtVarD("ip",51,"&ip.nxtact").
control_flow(52,53) :- GtD("num",40,0), LtEqD("num",43,65534), NotEqD("ip",48,0), GtVarD("ip",51,"&ip.nxtact"), GtD("ip",52,0).
control_flow(53,54) :- GtD("num",40,0), LtEqD("num",43,65534), NotEqD("ip",48,0), GtVarD("ip",51,"&ip.nxtact"), GtD("ip",52,0).
control_flow(54,55) :- GtD("num",40,0), LtEqD("num",43,65534), NotEqD("ip",48,0), GtVarD("ip",51,"&ip.nxtact"), GtD("ip",52,0).
control_flow(55,56) :- GtD("num",40,0), LtEqD("num",43,65534), NotEqD("ip",48,0), GtVarD("ip",51,"&ip.nxtact"), GtD("ip",52,0).
control_flow(56,57) :- GtD("num",40,0), LtEqD("num",43,65534), NotEqD("ip",48,0), GtVarD("ip",51,"&ip.nxtact"), GtD("ip",52,0).
control_flow(48,58) :- GtD("num",40,0), LtEqD("num",43,65534), LtEqVarD("ip",48,"&ip.nxtact").
control_flow(58,59) :- GtD("num",40,0), LtEqD("num",43,65534), LtEqVarD("ip",48,"&ip.nxtact").
control_flow(59,60) :- GtD("num",40,0), LtEqD("num",43,65534), LtEqVarD("ip",48,"&ip.nxtact").
/*(Join())@61*/

flow(61,61).
State(61).

//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl Gt(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl LtEqVar(x:symbol,loc:number,y:symbol)
.decl GtVar(x:symbol,loc:number,y:symbol)
.decl NotEqD(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl GtD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl LtEqVarD(x:symbol,loc:number,y:symbol)
.decl GtVarD(x:symbol,loc:number,y:symbol)
.decl EXIT(loc:number)
.decl AF_EXIT_T(interm_state:number,loc:number)
.decl AF_EXIT_S(loc:number)
.decl AF_EXIT(loc:number)
.decl AF_EXIT_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
NotEqD(x,loc,n) :- NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEqD(x,locI,n), control_flow(locI,loc), !NotEq(x,loc,_), !Eq(x,loc,_).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,_), !NotEq(x,loc,_).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,_), !LtEq(x,loc,_).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,_), !Gt(x,loc,_).
LtEqVarD(x,loc,n) :- LtEqVar(x,loc,n).
LtEqVarD(x,loc,n) :- LtEqVarD(x,locI,n), control_flow(locI,loc), !LtEqVar(x,loc,_), !GtVar(x,loc,_).
GtVarD(x,loc,n) :- GtVar(x,loc,n).
GtVarD(x,loc,n) :- GtVarD(x,locI,n), control_flow(locI,loc), !GtVar(x,loc,_), !LtEqVar(x,loc,_).
EXIT(loc) :- Return(_,loc).
AF_EXIT_T(interm_state,loc) :- AF_EXIT_T(tempOne,loc), !EXIT(tempOne), control_flow(tempOne,interm_state).
AF_EXIT_T(interm_state,loc) :- !EXIT(loc), control_flow(loc,interm_state).
AF_EXIT_S(loc) :- !EXIT(loc), control_flow(loc,tempOne), AF_EXIT_S(tempOne).
AF_EXIT_S(loc) :- AF_EXIT_T(loc,loc).
AF_EXIT(loc) :- State(loc), !AF_EXIT_S(loc).
AF_EXIT_Final(loc) :- Start(loc), AF_EXIT(loc), !NotTotal(loc).
.output NotEq
.output Eq
.output Gt
.output LtEq
.output LtEqVar
.output GtVar
.output Start
.output State
.output flow
.output Return
.output AF_EXIT_Final(IO=stdout)

/* Other information 

//-- Facts for Procedure <__VERIFIER_nondet_int> 

//-- Facts for Procedure <initLink> 

Flow(17,0). //@17:1-18:5
Flow(14,15). //@30:5-30:5
Flow(15,16). //@30:5-31:1
Flow(10,14). //@29:5-30:5
Flow(13,12). //@23:5-23:15
Flow(3,13). //@23:10-23:5
Flow(8,13). //@23:21-23:5
Flow(12,9). //@23:15-23:15
Flow(12,11). //@23:15-23:15
Flow(11,4). //@23:15-24:9
Flow(9,10). //@23:15-29:5
Flow(7,8). //@27:9-23:21
Flow(6,7). //@26:9-27:9
Flow(5,6). //@25:9-26:9
Flow(4,5). //@24:9-25:9
Flow(2,3). //@20:5-23:10
Flow(1,2). //@19:5-20:5
Flow(0,1). //@18:5-19:5
Stmt_Decl(0,[ICall(_fun_malloc,sizeof(t=;nbytes=8),n$17),IStore(&head,n$17)]). // @18:5
Stmt_BinaryOperatorStmt(1,Assign,[ILoad(&head,n$15),ILoad(&head,n$16),IStore(n$15.nxtact,n$16)]). // @19:5
Stmt_Decl(2,[ILoad(&head,n$14),IStore(&cyclic,n$14)]). // @20:5
Stmt_Decl(4,[ICall(_fun_malloc,sizeof(t=;nbytes=8),n$12),IStore(&body,n$12)]). // @24:9
Stmt_BinaryOperatorStmt(5,Assign,[ILoad(&body,n$10),ILoad(&body,n$11),IStore(n$10.nxtact,n$11)]). // @25:9
Stmt_BinaryOperatorStmt(6,Assign,[ILoad(&cyclic,n$8),ILoad(&body,n$9),IStore(n$8.nxtact,n$9)]). // @26:9
Stmt_BinaryOperatorStmt(7,Assign,[ILoad(&cyclic,n$6),ILoad(n$6.nxtact,n$7),IStore(&cyclic,n$7)]). // @27:9
PruneNode(9,false,[Prune(!(n$4 <= n$5), false)]). // @23:15
PruneNode(11,true,[Prune((n$4 <= n$5), true)]). // @23:15
Stmt_BinaryOperatorStmt(12,LE,[ILoad(&i,n$4),ILoad(&n,n$5)]). // @23:15
Stmt_UnaryOperator(8,[ILoad(&i,n$3),IStore(&i,(n$3 + 1))]). // @23:21
Stmt_BinaryOperatorStmt(3,Assign,[IStore(&i,2)]). // @23:10
Join(13,[]).  // @23:5
Stmt_BinaryOperatorStmt(10,Assign,[ILoad(&cyclic,n$1),ILoad(&cyclic,n$2),IStore(n$1.nxtact,n$2)]). // @29:5
Stmt_Return(15,[IStore(&return,n$0)]). // @30:5
Stmt_Return(14,[ILoad(&head,n$0)]). // @30:5
Exit(16).  // @31:1
Start(17). // @17:1
//-- Facts for Procedure <main> 

Flow(17,18). //@33:1-35:5
Flow(14,16). //@45:5-46:1
Flow(15,10). //@40:5-40:12
Flow(10,3). //@40:12-40:12
Flow(10,13). //@40:12-40:12
Flow(13,12). //@40:12-42:9
Flow(3,14). //@40:12-45:5
Flow(8,15). //@43:9-40:5
Flow(12,8). //@42:9-43:9
Flow(11,15). //@39:5-40:5
Flow(9,11). //@38:5-39:5
Flow(7,9). //@36:5-38:5
Flow(6,4). //@36:9-36:9
Flow(6,5). //@36:9-36:9
Flow(5,19). //@36:9-37:9
Flow(4,2). //@36:9-36:21
Flow(2,0). //@36:21-36:21
Flow(2,1). //@36:21-36:21
Flow(1,19). //@36:21-37:9
Flow(0,7). //@36:21-36:5
Flow(19,16). //@37:9-46:1
Flow(18,6). //@35:5-36:9
Stmt_Decl(18,[ICall(_fun___VERIFIER_nondet_int,,n$12),IStore(&num,n$12)]). // @35:5
Stmt_Return(19,[IStore(&return,0)]). // @37:9
PruneNode(0,false,[Prune(!(n$9 > 65534), false)]). // @36:21
PruneNode(1,true,[Prune((n$9 > 65534), true)]). // @36:21
Stmt_BinaryOperatorStmt(2,GT,[ILoad(&num,n$9)]). // @36:21
PruneNode(4,false,[Prune(!(n$8 <= 0), false)]). // @36:9
PruneNode(5,true,[Prune((n$8 <= 0), true)]). // @36:9
Stmt_BinaryOperatorStmt(6,LE,[ILoad(&num,n$8)]). // @36:9
Join(7,[]).  // @36:5
Stmt_Decl(9,[ILoad(&num,n$6),ICall(_fun_initLink,n$6,n$7),IStore(&list,n$7)]). // @38:5
Stmt_Decl(11,[ILoad(&list,n$5),IStore(&ip,n$5)]). // @39:5
Stmt_Decl(12,[ILoad(&ip,n$2),ILoad(n$2.nxtact,n$3),IStore(&nxt,n$3)]). // @42:9
Stmt_BinaryOperatorStmt(8,Assign,[ILoad(&nxt,n$1),IStore(&ip,n$1)]). // @43:9
PruneNode(3,false,[Prune(!(n$0 != null), false)]). // @40:12
PruneNode(13,true,[Prune((n$0 != null), true)]). // @40:12
Stmt_BinaryOperatorStmt(10,NE,[ILoad(&ip,n$0)]). // @40:12
Join(15,[]).  // @40:5
Stmt_Return(14,[IStore(&return,0)]). // @45:5
Exit(16).  // @46:1
Start(17). // @33:1
//-- Facts for Procedure <malloc> 

*/

