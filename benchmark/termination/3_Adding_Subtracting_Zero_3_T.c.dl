/*𝝐 */


/*(Start())@0 · ("flag"=0)@1 · (Return(0))@2*/

flow(0,1).
flow(1,2).
flow(2,2).
Start(0).
State(0).
State(1).
Return(0,2).
State(2).

/*(Start())@5 · ("pos"=0)@6 · ("size"=_)@7 · ("flag"=0)@8 · ("errno"=0)@9 · ((["size"<=0]@10 · ("size"<=0)@11 · (Return(0))@12) \/ (["size">0]@13 · ("size">0)@14 · ((["size">65536]@15 · ("size">65536)@16 · (Return(0))@17) \/ (["size"<=65536]@18 · ("size"<=65536)@19 · ((["pos">="size"]@20 · ("pos">="size")@21 · (Return(0))@22) \/ (["pos"<"size"]@23 · ("pos"<"size")@24 · ("size"="pos")@25 · (Return(0))@26))))))*/

flow(5,6).
flow(6,7).
flow(7,8).
flow(8,9).
flow(10,11).
flow(11,12).
flow(12,12).
flow(13,14).
flow(15,16).
flow(16,17).
flow(17,17).
flow(18,19).
flow(20,21).
flow(21,22).
flow(22,22).
flow(23,24).
flow(24,25).
flow(25,26).
flow(26,26).
Start(5).
State(5).
State(6).
GtEqVar("pos",7,"size").
LtVar("pos",7,"size").
LtEq("size",7,65536).
Gt("size",7,65536).
LtEq("size",7,0).
Gt("size",7,0).
State(7).
State(8).
State(10).
LtEq("size",11,0).
LtEq("size",11,65536).
State(11).
Return(0,12).
State(12).
State(9).
State(13).
Gt("size",14,0).
State(15).
Gt("size",16,65536).
Gt("size",16,0).
State(16).
Return(0,17).
State(17).
State(14).
State(18).
LtEq("size",19,65536).
State(20).
GtEqVar("pos",21,"size").
State(21).
Return(0,22).
State(22).
State(19).
State(23).
LtVar("pos",24,"size").
State(24).
LtEq("size",25,0).
GtEqVar("pos",25,"size").
LtEq("size",25,65536).
State(25).
Return(0,26).
State(26).
control_flow(9,10) :- LtEqD("size",9,0).
control_flow(9,13) :- GtD("size",9,0).
control_flow(14,15) :- GtD("size",14,65536).
control_flow(14,18) :- LtEqD("size",14,65536).
control_flow(19,20) :- GtEqVarD("pos",19,"size").
control_flow(19,23) :- LtVarD("pos",19,"size").
/*(Start())@29 · ("count"=0)@30 · ((["flag"=1]@31 · ("flag"=1)@32 · (Return(0))@33) \/ ([("flag"!=1)]@34 · (("flag"!=1))@35 · ((["loc">="len"]@36 · ("loc">="len")@37 · (Return(0))@38) \/ (["loc"<"len"]@39 · ("loc"<"len")@40 · ("len"="loc")@41 · (Return(0))@42))))*/

flow(29,30).
flow(31,32).
flow(32,33).
flow(33,33).
flow(34,35).
flow(36,37).
flow(37,38).
flow(38,38).
flow(39,40).
flow(40,41).
flow(41,42).
flow(42,42).
Start(29).
State(29).
State(31).
Eq("flag",32,1).
State(32).
Return(0,33).
State(33).
State(30).
State(34).
NotEq("flag",35,1).
State(36).
GtEqVar("loc",37,"len").
State(37).
Return(0,38).
State(38).
State(35).
State(39).
LtVar("loc",40,"len").
State(40).
GtEqVar("loc",41,"len").
State(41).
Return(0,42).
State(42).
control_flow(30,31) :- EqD("flag",30,1).
control_flow(30,34) :- NotEqD("flag",30,1).
control_flow(35,36) :- GtEqVarD("loc",35,"len").
control_flow(35,39) :- LtVarD("loc",35,"len").
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl LtVar(x:symbol,loc:number,y:symbol)
.decl GtEqVar(x:symbol,loc:number,y:symbol)
.decl Gt(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl NotEqD(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl LtVarD(x:symbol,loc:number,y:symbol)
.decl GtEqVarD(x:symbol,loc:number,y:symbol)
.decl GtD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl EXITPred(loc:number)
.decl AF_EXITPred_T(interm_state:number,loc:number)
.decl AF_EXITPred_S(loc:number)
.decl AF_EXITPred(loc:number)
.decl AF_EXITPred_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
NotEqD(x,loc,n) :- NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEqD(x,locI,n), control_flow(locI,loc), !NotEq(x,loc,n), !Eq(x,loc,n).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,n), !NotEq(x,loc,n).
LtVarD(x,loc,n) :- LtVar(x,loc,n).
LtVarD(x,loc,n) :- LtVarD(x,locI,n), control_flow(locI,loc), !LtVar(x,loc,n), !GtEqVar(x,loc,n).
GtEqVarD(x,loc,n) :- GtEqVar(x,loc,n).
GtEqVarD(x,loc,n) :- GtEqVarD(x,locI,n), control_flow(locI,loc), !GtEqVar(x,loc,n), !LtVar(x,loc,n).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,n), !LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,n), !Gt(x,loc,n).
EXITPred(loc) :- Return(_,loc).
AF_EXITPred_T(interm_state,loc) :- AF_EXITPred_T(tempOne,loc), !EXITPred(tempOne), control_flow(tempOne,interm_state).
AF_EXITPred_T(interm_state,loc) :- !EXITPred(loc), control_flow(loc,interm_state).
AF_EXITPred_S(loc) :- !EXITPred(loc), control_flow(loc,tempOne), AF_EXITPred_S(tempOne).
AF_EXITPred_S(loc) :- AF_EXITPred_T(loc,loc).
AF_EXITPred(loc) :- State(loc), !AF_EXITPred_S(loc).
AF_EXITPred_Final(loc) :- Start(loc), AF_EXITPred(loc), !NotTotal(loc).
.output NotEq
.output Eq
.output LtVar
.output GtEqVar
.output Gt
.output LtEq
.output Start
.output State
.output flow
.output Return
.output AF_EXITPred_Final(IO=stdout)

.output NotTotal(IO=stdout)

/* Other information 

//-- Facts for Procedure <__VERIFIER_nondet_int> 

//-- Facts for Procedure <__infer_globals_initializer_flag> 

Flow(2,0). //@31:1-31:1
Flow(0,1). //@31:1-31:12
Stmt_Decl(0,[IStore(&#GB<benchmark/termination/3_Adding_Subtracting_Zero_3_T.c|ice>$flag,0)]). // @31:1
Exit(1).  // @31:12
Start(2). // @31:1
//-- Facts for Procedure <main> 

Flow(2,3). //@64:1-66:5
Flow(0,1). //@86:5-87:1
Flow(15,30). //@72:5-72:12
Flow(30,28). //@72:12-72:12
Flow(30,29). //@72:12-72:12
Flow(29,16). //@72:12-74:9
Flow(28,0). //@72:12-86:5
Flow(27,15). //@84:9-72:5
Flow(24,27). //@82:9-84:9
Flow(22,25). //@82:13-82:13
Flow(22,26). //@82:13-82:13
Flow(26,23). //@82:13-83:13
Flow(25,24). //@82:13-82:9
Flow(23,24). //@83:13-82:9
Flow(20,22). //@75:9-82:13
Flow(17,19). //@75:13-75:13
Flow(17,21). //@75:13-75:13
Flow(21,18). //@75:13-79:17
Flow(19,20). //@75:13-75:9
Flow(18,1). //@79:17-87:1
Flow(16,17). //@74:9-75:13
Flow(10,15). //@70:5-72:5
Flow(7,13). //@70:9-70:9
Flow(7,14). //@70:9-70:9
Flow(14,8). //@70:9-71:9
Flow(13,12). //@70:9-70:22
Flow(12,9). //@70:22-70:22
Flow(12,11). //@70:22-70:22
Flow(11,8). //@70:22-71:9
Flow(9,10). //@70:22-70:5
Flow(8,1). //@71:9-87:1
Flow(6,7). //@69:5-70:9
Flow(5,6). //@68:5-69:5
Flow(4,5). //@67:5-68:5
Flow(3,4). //@66:5-67:5
Stmt_Decl(3,[IStore(&pos,0)]). // @66:5
Stmt_Decl(4,[ICall(_fun___VERIFIER_nondet_int,,n$20),IStore(&size,n$20)]). // @67:5
Stmt_BinaryOperatorStmt(5,Assign,[IStore(&#GB<benchmark/termination/3_Adding_Subtracting_Zero_3_T.c|ice>$flag,0)]). // @68:5
Stmt_Decl(6,[IStore(&errno,0)]). // @69:5
Stmt_Return(8,[IStore(&return,0)]). // @71:9
PruneNode(9,false,[Prune(!(n$17 > 65536), false)]). // @70:22
PruneNode(11,true,[Prune((n$17 > 65536), true)]). // @70:22
Stmt_BinaryOperatorStmt(12,GT,[ILoad(&size,n$17)]). // @70:22
PruneNode(13,false,[Prune(!(n$16 <= 0), false)]). // @70:9
PruneNode(14,true,[Prune((n$16 <= 0), true)]). // @70:9
Stmt_BinaryOperatorStmt(7,LE,[ILoad(&size,n$16)]). // @70:9
Join(10,[]).  // @70:5
Stmt_Decl(16,[ILoad(&pos,n$11),ILoad(&size,n$12),ILoad(&pos,n$13),ICall(_fun_read,n$11,(n$12 - n$13),n$14),IStore(&rc,n$14)]). // @74:9
Stmt_Return(18,[IStore(&return,0)]). // @79:17
PruneNode(19,false,[Prune(!(n$8 < 0), false)]). // @75:13
PruneNode(21,true,[Prune((n$8 < 0), true)]). // @75:13
Stmt_BinaryOperatorStmt(17,LT,[ILoad(&rc,n$8)]). // @75:13
Join(20,[]).  // @75:9
Stmt_UnaryOperator(23,[ILoad(&rc,n$5),IStore(&rc,(n$5 + 1))]). // @83:13
PruneNode(25,false,[Prune(!(n$4 == 0), false)]). // @82:13
PruneNode(26,true,[Prune((n$4 == 0), true)]). // @82:13
Stmt_BinaryOperatorStmt(22,EQ,[ILoad(&rc,n$4)]). // @82:13
Join(24,[]).  // @82:9
Stmt_BinaryOperatorStmt(27,AddAssign,[ILoad(&rc,n$2),ILoad(&pos,n$3),IStore(&pos,(n$3 + n$2))]). // @84:9
PruneNode(28,false,[Prune(!(n$0 < n$1), false)]). // @72:12
PruneNode(29,true,[Prune((n$0 < n$1), true)]). // @72:12
Stmt_BinaryOperatorStmt(30,LT,[ILoad(&pos,n$0),ILoad(&size,n$1)]). // @72:12
Join(15,[]).  // @72:5
Stmt_Return(0,[IStore(&return,0)]). // @86:5
Exit(1).  // @87:1
Start(2). // @64:1
//-- Facts for Procedure <read> 

Flow(2,31). //@32:1-34:5
Flow(0,15). //@62:5-62:5
Flow(15,1). //@62:5-63:1
Flow(30,29). //@37:5-37:12
Flow(29,27). //@37:12-37:12
Flow(29,28). //@37:12-37:12
Flow(28,5). //@37:12-39:9
Flow(27,0). //@37:12-62:5
Flow(24,30). //@40:9-37:5
Flow(22,25). //@40:13-40:13
Flow(22,26). //@40:13-40:13
Flow(26,23). //@40:13-42:13
Flow(25,11). //@40:13-46:17
Flow(23,1). //@42:13-63:1
Flow(20,24). //@50:13-40:9
Flow(17,19). //@50:17-50:17
Flow(17,21). //@50:17-50:17
Flow(21,18). //@50:17-52:17
Flow(19,7). //@50:17-57:17
Flow(18,30). //@52:17-37:5
Flow(16,10). //@58:17-58:17
Flow(10,1). //@58:17-63:1
Flow(7,16). //@57:17-58:17
Flow(14,17). //@49:13-50:17
Flow(13,14). //@48:13-49:13
Flow(12,13). //@46:13-48:13
Flow(11,8). //@46:17-46:17
Flow(11,9). //@46:17-46:17
Flow(9,6). //@46:17-47:17
Flow(8,12). //@46:17-46:13
Flow(6,12). //@47:17-46:13
Flow(5,22). //@39:9-40:13
Flow(4,30). //@35:5-37:5
Flow(3,33). //@35:9-35:9
Flow(3,34). //@35:9-35:9
Flow(34,32). //@35:9-36:9
Flow(33,4). //@35:9-35:5
Flow(32,1). //@36:9-63:1
Flow(31,3). //@34:5-35:9
Stmt_Decl(31,[IStore(&count,0)]). // @34:5
Stmt_Return(32,[IStore(&return,0)]). // @36:9
PruneNode(33,false,[Prune(!(n$18 == 1), false)]). // @35:9
PruneNode(34,true,[Prune((n$18 == 1), true)]). // @35:9
Stmt_BinaryOperatorStmt(3,EQ,[ILoad(&#GB<benchmark/termination/3_Adding_Subtracting_Zero_3_T.c|ice>$flag,n$18)]). // @35:9
Join(4,[]).  // @35:5
Stmt_Decl(5,[ICall(_fun___VERIFIER_nondet_int,,n$16),IStore(&num,n$16)]). // @39:9
Stmt_BinaryOperatorStmt(6,Assign,[ILoad(&num,n$12),IStore(&num,-n$12)]). // @47:17
PruneNode(8,false,[Prune(!(n$11 < 0), false)]). // @46:17
PruneNode(9,true,[Prune((n$11 < 0), true)]). // @46:17
Stmt_BinaryOperatorStmt(11,LT,[ILoad(&num,n$11)]). // @46:17
Join(12,[]).  // @46:13
Stmt_BinaryOperatorStmt(13,Assign,[ILoad(&num,n$10),IStore(&num,(n$10 % 1000))]). // @48:13
Stmt_UnaryOperator(14,[ILoad(&count,n$9),IStore(&count,(n$9 + 1))]). // @49:13
Stmt_BinaryOperatorStmt(7,Assign,[IStore(&#GB<benchmark/termination/3_Adding_Subtracting_Zero_3_T.c|ice>$flag,1)]). // @57:17
Stmt_Return(10,[IStore(&return,n$7)]). // @58:17
Stmt_Return(16,[ILoad(&count,n$7)]). // @58:17
Stmt_UnaryOperator(18,[ILoad(&loc,n$6),IStore(&loc,(n$6 + 1))]). // @52:17
PruneNode(19,false,[Prune(!(n$4 < 995), false)]). // @50:17
PruneNode(21,true,[Prune((n$4 < 995), true)]). // @50:17
Stmt_BinaryOperatorStmt(17,LT,[ILoad(&num,n$4)]). // @50:17
Join(20,[]).  // @50:13
Stmt_Return(23,[IStore(&return,-1)]). // @42:13
PruneNode(25,false,[Prune(!(n$3 == 0), false)]). // @40:13
PruneNode(26,true,[Prune((n$3 == 0), true)]). // @40:13
Stmt_BinaryOperatorStmt(22,EQ,[ILoad(&num,n$3)]). // @40:13
Join(24,[]).  // @40:9
PruneNode(27,false,[Prune(!(n$1 < n$2), false)]). // @37:12
PruneNode(28,true,[Prune((n$1 < n$2), true)]). // @37:12
Stmt_BinaryOperatorStmt(29,LT,[ILoad(&loc,n$1),ILoad(&len,n$2)]). // @37:12
Join(30,[]).  // @37:5
Stmt_Return(15,[IStore(&return,n$0)]). // @62:5
Stmt_Return(0,[ILoad(&count,n$0)]). // @62:5
Exit(1).  // @63:1
Start(2). // @32:1
*/

