/*𝝐 */


/*(Start())@0 · ("flag"=0)@1 · (Return(0))@2*/

flow(0,1).
flow(1,2).
flow(2,2).
Start(0).
State(0).
State(1).
Return(0,2).
State(2).

/*(Start())@5 · ("pos"=0)@6 · ("size"=_)@7 · ("flag"=0)@8 · ("errno"=0)@9 · ((["size"<=0]@10 · ("size"<=0)@11 · (Return(0))@12) \/ (["size">0]@13 · ("size">0)@14 · ((["size">65536]@15 · ("size">65536)@16 · (Return(0))@17) \/ (["size"<=65536]@18 · ("size"<=65536)@19 · ((["pos">="size"]@20 · ("pos">="size")@21 · (Return(0))@22) \/ (["pos"<"size"]@23 · ("pos"<"size")@24 · ("size"="pos")@25 · (Return(0))@26))))))*/

flow(5,6).
flow(6,7).
flow(7,8).
flow(8,9).
flow(10,11).
flow(11,12).
flow(12,12).
flow(13,14).
flow(15,16).
flow(16,17).
flow(17,17).
flow(18,19).
flow(20,21).
flow(21,22).
flow(22,22).
flow(23,24).
flow(24,25).
flow(25,26).
flow(26,26).
Start(5).
State(5).
State(6).
GtEqVar("pos",7,"size").
LtVar("pos",7,"size").
LtEq("size",7,65536).
Gt("size",7,65536).
LtEq("size",7,0).
Gt("size",7,0).
State(7).
State(8).
State(10).
LtEq("size",11,0).
LtEq("size",11,65536).
State(11).
Return(0,12).
State(12).
State(9).
State(13).
Gt("size",14,0).
State(15).
Gt("size",16,65536).
Gt("size",16,0).
State(16).
Return(0,17).
State(17).
State(14).
State(18).
LtEq("size",19,65536).
State(20).
GtEqVar("pos",21,"size").
State(21).
Return(0,22).
State(22).
State(19).
State(23).
LtVar("pos",24,"size").
State(24).
LtEq("size",25,0).
GtEqVar("pos",25,"size").
LtEq("size",25,65536).
State(25).
Return(0,26).
State(26).
control_flow(9,10) :- LtEqD("size",9,0).
control_flow(9,13) :- GtD("size",9,0).
control_flow(14,15) :- GtD("size",14,65536).
control_flow(14,18) :- LtEqD("size",14,65536).
control_flow(19,20) :- GtEqVarD("pos",19,"size").
control_flow(19,23) :- LtVarD("pos",19,"size").
/*(Start())@29 · ("count"=0)@30 · ((["flag"=1]@31 · ("flag"=1)@32 · (Return(0))@33) \/ ([("flag"!=1)]@34 · (("flag"!=1))@35 · ((["loc">="len"]@36 · ("loc">="len")@37 · (Return(0))@38) \/ (["loc"<"len"]@39 · ("loc"<"len")@40 · ("len"="loc")@41 · (Return(0))@42))))*/

flow(29,30).
flow(31,32).
flow(32,33).
flow(33,33).
flow(34,35).
flow(36,37).
flow(37,38).
flow(38,38).
flow(39,40).
flow(40,41).
flow(41,42).
flow(42,42).
Start(29).
State(29).
State(31).
Eq("flag",32,1).
State(32).
Return(0,33).
State(33).
State(30).
State(34).
NotEq("flag",35,1).
State(36).
GtEqVar("loc",37,"len").
State(37).
Return(0,38).
State(38).
State(35).
State(39).
LtVar("loc",40,"len").
State(40).
GtEqVar("loc",41,"len").
State(41).
Return(0,42).
State(42).
control_flow(30,31) :- EqD("flag",30,1).
control_flow(30,34) :- NotEqD("flag",30,1).
control_flow(35,36) :- GtEqVarD("loc",35,"len").
control_flow(35,39) :- LtVarD("loc",35,"len").
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl LtVar(x:symbol,loc:number,y:symbol)
.decl GtEqVar(x:symbol,loc:number,y:symbol)
.decl Gt(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl NotEqD(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl LtVarD(x:symbol,loc:number,y:symbol)
.decl GtEqVarD(x:symbol,loc:number,y:symbol)
.decl GtD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl EXITPred(loc:number)
.decl AF_EXITPred_T(interm_state:number,loc:number)
.decl AF_EXITPred_S(loc:number)
.decl AF_EXITPred(loc:number)
.decl AF_EXITPred_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
NotEqD(x,loc,n) :- NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEqD(x,locI,n), control_flow(locI,loc), !NotEq(x,loc,n), !Eq(x,loc,n).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,n), !NotEq(x,loc,n).
LtVarD(x,loc,n) :- LtVar(x,loc,n).
LtVarD(x,loc,n) :- LtVarD(x,locI,n), control_flow(locI,loc), !LtVar(x,loc,n), !GtEqVar(x,loc,n).
GtEqVarD(x,loc,n) :- GtEqVar(x,loc,n).
GtEqVarD(x,loc,n) :- GtEqVarD(x,locI,n), control_flow(locI,loc), !GtEqVar(x,loc,n), !LtVar(x,loc,n).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,n), !LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,n), !Gt(x,loc,n).
EXITPred(loc) :- Return(_,loc).
AF_EXITPred_T(interm_state,loc) :- AF_EXITPred_T(tempOne,loc), !EXITPred(tempOne), control_flow(tempOne,interm_state).
AF_EXITPred_T(interm_state,loc) :- !EXITPred(loc), control_flow(loc,interm_state).
AF_EXITPred_S(loc) :- !EXITPred(loc), control_flow(loc,tempOne), AF_EXITPred_S(tempOne).
AF_EXITPred_S(loc) :- AF_EXITPred_T(loc,loc).
AF_EXITPred(loc) :- State(loc), !AF_EXITPred_S(loc).
AF_EXITPred_Final(loc) :- Start(loc), AF_EXITPred(loc), !NotTotal(loc).
.output NotEq
.output Eq
.output LtVar
.output GtEqVar
.output Gt
.output LtEq
.output Start
.output State
.output flow
.output Return
.output AF_EXITPred_Final(IO=stdout)

.output NotTotal(IO=stdout)

