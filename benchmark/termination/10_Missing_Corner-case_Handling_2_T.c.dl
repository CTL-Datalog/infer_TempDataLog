/*(Join())@17*/

flow(17,17).
State(17).

/*(Start())@29 · (val=_)@30 · (([val<=0]@31 · (Return(0))@32) \/ ([val>0]@33 · (bits=0)@34 · (([val=0]@35 · (Return(0))@36) \/ ([(val!=0)]@37 · [val>0]@39 · (val=0)@40 · (val=(val-1))@41 · (bits=(bits+1))@42 · (Return(0))@43))))*/

flow(29,30).
flow(32,32).
flow(36,36).
flow(43,43).
Start(29).
LtEq("val",29,0).
Eq("val",29,0).
NotEq("val",29,0).
Gt("val",29,0).
State(29).
State(31).
Return(0,32).
State(32).
State(30).
State(33).
State(35).
Return(0,36).
State(36).
State(34).
State(37).
State(39).
LtEq("val",40,0).
Eq("val",40,0).
State(40).
LtEq("val",41,0).
NotEq("val",41,0).
State(41).
State(42).
Return(0,43).
State(43).
control_flow(30,31) :- LtEqD("val",30,0).
control_flow(31,32) :- LtEqD("val",30,0).
control_flow(30,33) :- GtD("val",30,0).
control_flow(33,34) :- GtD("val",30,0).
control_flow(34,35) :- GtD("val",30,0), EqD("val",34,0).
control_flow(35,36) :- GtD("val",30,0), EqD("val",34,0).
control_flow(34,37) :- GtD("val",30,0), NotEqD("val",34,0).
control_flow(37,39) :- GtD("val",30,0), NotEqD("val",34,0), GtD("val",37,0).
control_flow(39,40) :- GtD("val",30,0), NotEqD("val",34,0), GtD("val",37,0).
control_flow(40,41) :- GtD("val",30,0), NotEqD("val",34,0), GtD("val",37,0).
control_flow(41,42) :- GtD("val",30,0), NotEqD("val",34,0), GtD("val",37,0).
control_flow(42,43) :- GtD("val",30,0), NotEqD("val",34,0), GtD("val",37,0).
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl Gt(x:symbol,loc:number,n:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl NotEqD(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl GtD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl EXIT(loc:number)
.decl AF_EXIT_T(interm_state:number,loc:number)
.decl AF_EXIT_S(loc:number)
.decl AF_EXIT(loc:number)
.decl AF_EXIT_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
NotEqD(x,loc,n) :- NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEqD(x,locI,n), control_flow(locI,loc), !NotEq(x,loc,_), !Eq(x,loc,_).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,_), !NotEq(x,loc,_).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,_), !LtEq(x,loc,_).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,_), !Gt(x,loc,_).
EXIT(loc) :- Return(_,loc).
AF_EXIT_T(interm_state,loc) :- AF_EXIT_T(tempOne,loc), !EXIT(tempOne), control_flow(tempOne,interm_state).
AF_EXIT_T(interm_state,loc) :- !EXIT(loc), control_flow(loc,interm_state).
AF_EXIT_S(loc) :- !EXIT(loc), control_flow(loc,tempOne), AF_EXIT_S(tempOne).
AF_EXIT_S(loc) :- AF_EXIT_T(loc,loc).
AF_EXIT(loc) :- State(loc), !AF_EXIT_S(loc).
AF_EXIT_Final(loc) :- Start(loc), AF_EXIT(loc), !NotTotal(loc).
.output Gt
.output NotEq
.output Eq
.output LtEq
.output Start
.output State
.output flow
.output Return
.output AF_EXIT_Final(IO=stdout)

/* Other information 

//-- Facts for Procedure <__VERIFIER_nondet_int> 

//-- Facts for Procedure <main> 

Flow(15,0). //@11:1-13:5
Flow(11,3). //@19:5-20:1
Flow(14,13). //@17:5-17:21
Flow(7,14). //@17:10-17:5
Flow(9,14). //@17:32-17:5
Flow(13,10). //@17:21-17:21
Flow(13,12). //@17:21-17:21
Flow(12,8). //@17:21-18:9
Flow(10,11). //@17:21-19:5
Flow(8,9). //@18:9-17:32
Flow(5,7). //@14:5-17:10
Flow(1,4). //@14:9-14:9
Flow(1,6). //@14:9-14:9
Flow(6,2). //@14:9-15:9
Flow(4,5). //@14:9-14:5
Flow(2,3). //@15:9-20:1
Flow(0,1). //@13:5-14:9
Stmt_Decl(0,[ICall(_fun___VERIFIER_nondet_int,,n$7),IStore(&val,n$7)]). // @13:5
Stmt_Return(2,[IStore(&return,0)]). // @15:9
PruneNode(4,false,[Prune(!(n$4 <= 0), false)]). // @14:9
PruneNode(6,true,[Prune((n$4 <= 0), true)]). // @14:9
Stmt_BinaryOperatorStmt(1,LE,[ILoad(&val,n$4)]). // @14:9
Join(5,[]).  // @14:5
Stmt_BinaryOperatorStmt(8,ShrAssign,[ILoad(&val,n$2),IStore(&val,(n$2 >> 1))]). // @18:9
PruneNode(10,false,[Prune(!(n$1 != 0), false)]). // @17:21
PruneNode(12,true,[Prune((n$1 != 0), true)]). // @17:21
Stmt_BinaryOperatorStmt(13,NE,[ILoad(&val,n$1)]). // @17:21
Stmt_UnaryOperator(9,[ILoad(&bits,n$0),IStore(&bits,(n$0 + 1))]). // @17:32
Stmt_BinaryOperatorStmt(7,Assign,[IStore(&bits,0)]). // @17:10
Join(14,[]).  // @17:5
Stmt_Return(11,[IStore(&return,0)]). // @19:5
Exit(3).  // @20:1
Start(15). // @11:1
*/

