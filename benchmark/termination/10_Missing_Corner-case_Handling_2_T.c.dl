/*𝝐 */


/*(Start())@8 · ("val"=_)@9 · ((["val"<=0]@10 · ("val"<=0)@11 · (Return(0))@12) \/ (["val">0]@13 · ("val">0)@14 · ("bits"=0)@15 · ((["val"=0]@16 · ("val"=0)@17 · (Return(0))@18) \/ ([("val"!=0)]@19 · (("val"!=0))@20 · ((["val">=0]@21 · ("val">=0)@22 · ("val"<1)@23 · (Return(0))@24) \/ (["val"<0]@25 · ("val"<0)@26 · (("val">=1)@27)^w))))))*/

flow(8,9).
flow(10,11).
flow(11,12).
flow(12,12).
flow(13,14).
flow(14,15).
flow(16,17).
flow(17,18).
flow(18,18).
flow(19,20).
flow(21,22).
flow(22,23).
flow(23,24).
flow(24,24).
flow(25,26).
flow(26,27).
flow(27,27).
Start(8).
State(8).
GtEq("val",9,0).
Lt("val",9,0).
NotEq("val",9,0).
Eq("val",9,0).
LtEq("val",9,0).
Gt("val",9,0).
State(10).
LtEq("val",11,0).
State(11).
Return(0,12).
State(12).
State(9).
State(13).
GtEq("val",14,0).
NotEq("val",14,0).
Gt("val",14,0).
State(14).
State(16).
LtEq("val",17,0).
Eq("val",17,0).
GtEq("val",17,0).
State(17).
Return(0,18).
State(18).
State(15).
State(19).
NotEq("val",20,0).
State(21).
GtEq("val",22,0).
State(22).
State(23).
Return(0,24).
State(24).
State(20).
State(25).
LtEq("val",26,0).
Lt("val",26,0).
NotEq("val",26,0).
State(26).
GtEq("val",27,0).
NotEq("val",27,0).
Gt("val",27,0).
State(27).
control_flow(9,10) :- LtEqD("val",9,0).
control_flow(9,13) :- GtD("val",9,0).
control_flow(15,16) :- EqD("val",15,0).
control_flow(15,19) :- NotEqD("val",15,0).
control_flow(20,21) :- GtEqD("val",20,0).
control_flow(20,25) :- LtD("val",20,0).
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl Lt(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl GtEq(x:symbol,loc:number,n:number)
.decl Gt(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl LtD(x:symbol,loc:number,n:number)
.decl GtEqD(x:symbol,loc:number,n:number)
.decl NotEqD(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl GtD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl EXITPred(loc:number)
.decl AF_EXITPred_T(interm_state:number,loc:number)
.decl AF_EXITPred_S(loc:number)
.decl AF_EXITPred(loc:number)
.decl AF_EXITPred_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
LtD(x,loc,n) :- Lt(x,loc,n).
LtD(x,loc,n) :- LtD(x,locI,n), control_flow(locI,loc), !Lt(x,loc,n), !GtEq(x,loc,n).
GtEqD(x,loc,n) :- GtEq(x,loc,n).
GtEqD(x,loc,n) :- GtEqD(x,locI,n), control_flow(locI,loc), !GtEq(x,loc,n), !Lt(x,loc,n).
NotEqD(x,loc,n) :- NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEqD(x,locI,n), control_flow(locI,loc), !NotEq(x,loc,n), !Eq(x,loc,n).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,n), !NotEq(x,loc,n).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,n), !LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,n), !Gt(x,loc,n).
EXITPred(loc) :- Return(_,loc).
AF_EXITPred_T(interm_state,loc) :- AF_EXITPred_T(tempOne,loc), !EXITPred(tempOne), control_flow(tempOne,interm_state).
AF_EXITPred_T(interm_state,loc) :- !EXITPred(loc), control_flow(loc,interm_state).
AF_EXITPred_S(loc) :- !EXITPred(loc), control_flow(loc,tempOne), AF_EXITPred_S(tempOne).
AF_EXITPred_S(loc) :- AF_EXITPred_T(loc,loc).
AF_EXITPred(loc) :- State(loc), !AF_EXITPred_S(loc).
AF_EXITPred_Final(loc) :- Start(loc), AF_EXITPred(loc), !NotTotal(loc).
.output Lt
.output Eq
.output NotEq
.output GtEq
.output Gt
.output LtEq
.output Start
.output State
.output flow
.output Return
.output AF_EXITPred_Final(IO=stdout)

.output NotTotal(IO=stdout)

