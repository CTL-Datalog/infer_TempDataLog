/*(Start())@9 · (([x=1]@10 · (x=0)@11 · (Exit())@12) \/ ([(x!=1)]@13 · (x=(x-1))@14 · (Exit())@15))*/

flow(12,12).
flow(15,15).
Start(9).
Eq("x",9,1).
NotEq("x",9,1). // delete this line 
State(10).
NotEq("x",11,1).
Eq("x",11,0).
State(11).
Exit(12).
State(12).
State(9).
State(13).
State(14).
Exit(15).
State(15).
control_flow(9,10) :- EqD("x",9,1).
control_flow(10,11) :- EqD("x",9,1).
control_flow(11,12) :- EqD("x",9,1).
control_flow(9,13) :- NotEqD("x",9,1).
control_flow(13,14) :- NotEqD("x",9,1).
control_flow(14,15) :- NotEqD("x",9,1).
//AX(AX("x"=0))
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Exit(n0:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl NotEqD(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl x_eq_0(loc:number)
.decl NOT_x_eq_0(loc:number)
.decl EX_NOT_x_eq_0(loc:number)
.decl AX_x_eq_0(loc:number)
.decl NOT_AX_x_eq_0(loc:number)
.decl EX_NOT_AX_x_eq_0(loc:number)
.decl AX_AX_x_eq_0(loc:number)
.decl AX_AX_x_eq_0_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
NotEqD(x,loc,n) :- NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEqD(x,locI,n), control_flow(locI,loc), !NotEq(x,loc,_), !Eq(x,loc,_).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,_), !NotEq(x,loc,_).
x_eq_0(loc) :- State(loc), EqD("x",loc,0).
NOT_x_eq_0(loc) :- State(loc), !x_eq_0(loc).
EX_NOT_x_eq_0(loc) :- control_flow(loc,tempOne), NOT_x_eq_0(tempOne).
AX_x_eq_0(loc) :- State(loc), !EX_NOT_x_eq_0(loc).
NOT_AX_x_eq_0(loc) :- State(loc), !AX_x_eq_0(loc).
EX_NOT_AX_x_eq_0(loc) :- control_flow(loc,tempOne), NOT_AX_x_eq_0(tempOne).
AX_AX_x_eq_0(loc) :- State(loc), !EX_NOT_AX_x_eq_0(loc).
AX_AX_x_eq_0_Final(loc) :- Start(loc), AX_AX_x_eq_0(loc), !NotTotal(loc).
.output NotEq
.output Eq
.output Start
.output State
.output flow
.output Exit
.output AX_AX_x_eq_0_Final(IO=stdout)

/* Other information 

//-- Facts for Procedure <main> 

Flow(0,1). //@7:1-9:9
Flow(4,5). //@9:5-9:5
Flow(5,6). //@9:5-14:1
Flow(1,7). //@9:9-9:9
Flow(1,2). //@9:9-9:9
Flow(2,3). //@9:9-10:9
Flow(7,8). //@9:9-13:10
Flow(3,4). //@10:9-9:5
Flow(8,4). //@13:10-9:5
Stmt_BinaryOperatorStmt(8,Assign,[ILoad(&x,n$1),IStore(&x,(n$1 - 1))]). // @13:10
Stmt_BinaryOperatorStmt(3,Assign,[IStore(&x,0)]). // @10:9
PruneNode(7,false,[Prune(!(n$0 == 1), false)]). // @9:9
PruneNode(2,true,[Prune((n$0 == 1), true)]). // @9:9
Stmt_BinaryOperatorStmt(1,EQ,[ILoad(&x,n$0)]). // @9:9
Stmt_BetweenJoinAndExit(5,[]). // @9:5
Join(4,[]).  // @9:5
Exit(6).  // @14:1
Start(0). // @7:1
*/

