/*𝝐 */


/*(Start())@0 · ("y"=_)@1 · ((["y"=1]@2 · ("y"=1)@3 · ("x"=0)@4 · (Return(0))@5) \/ ([("y"!=1)]@6 · (("y"!=1))@7 · ("x"=("x"-1))@8 · (Return(0))@9))*/

flow(0,1).
flow(2,3).
flow(3,4).
flow(4,5).
flow(5,5).
flow(6,7).
flow(7,8).
flow(8,9).
flow(9,9).
Start(0).
State(0).
NotEq("y",1,1).
Eq("y",1,1).
State(2).
Eq("y",3,1).
State(3).
Eq("x",4,0).
State(4).
Return(0,5).
State(5).
State(1).
State(6).
NotEq("y",7,1).
State(7).
State(8).
Return(0,9).
State(9).
control_flow(1,2) :- EqD("y",1,1).
control_flow(1,6) :- NotEqD("y",1,1).
//AF(AX(AX("x"=0)))
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl NotEqD(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl x_eq_0(loc:number)
.decl NOT_x_eq_0(loc:number)
.decl EX_NOT_x_eq_0(loc:number)
.decl AX_x_eq_0(loc:number)
.decl NOT_AX_x_eq_0(loc:number)
.decl EX_NOT_AX_x_eq_0(loc:number)
.decl AX_AX_x_eq_0(loc:number)
.decl AF_AX_AX_x_eq_0_T(interm_state:number,loc:number)
.decl AF_AX_AX_x_eq_0_S(loc:number)
.decl AF_AX_AX_x_eq_0(loc:number)
.decl AF_AX_AX_x_eq_0_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
NotEqD(x,loc,n) :- NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEqD(x,locI,n), control_flow(locI,loc), !NotEq(x,loc,n), !Eq(x,loc,n).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,n), !NotEq(x,loc,n).
x_eq_0(loc) :- State(loc), EqD("x",loc,0).
NOT_x_eq_0(loc) :- State(loc), !x_eq_0(loc).
EX_NOT_x_eq_0(loc) :- control_flow(loc,tempOne), NOT_x_eq_0(tempOne).
AX_x_eq_0(loc) :- State(loc), !EX_NOT_x_eq_0(loc).
NOT_AX_x_eq_0(loc) :- State(loc), !AX_x_eq_0(loc).
EX_NOT_AX_x_eq_0(loc) :- control_flow(loc,tempOne), NOT_AX_x_eq_0(tempOne).
AX_AX_x_eq_0(loc) :- State(loc), !EX_NOT_AX_x_eq_0(loc).
AF_AX_AX_x_eq_0_T(interm_state,loc) :- AF_AX_AX_x_eq_0_T(tempOne,loc), !AX_AX_x_eq_0(tempOne), control_flow(tempOne,interm_state).
AF_AX_AX_x_eq_0_T(interm_state,loc) :- !AX_AX_x_eq_0(loc), control_flow(loc,interm_state).
AF_AX_AX_x_eq_0_S(loc) :- !AX_AX_x_eq_0(loc), control_flow(loc,tempOne), AF_AX_AX_x_eq_0_S(tempOne).
AF_AX_AX_x_eq_0_S(loc) :- AF_AX_AX_x_eq_0_T(loc,loc).
AF_AX_AX_x_eq_0(loc) :- State(loc), !AF_AX_AX_x_eq_0_S(loc).
AF_AX_AX_x_eq_0_Final(loc) :- Start(loc), AF_AX_AX_x_eq_0(loc), !NotTotal(loc).
.output NotEq
.output Eq
.output Start
.output State
.output flow
.output Return
.output AF_AX_AX_x_eq_0_Final(IO=stdout)

.output NotTotal(IO=stdout)

