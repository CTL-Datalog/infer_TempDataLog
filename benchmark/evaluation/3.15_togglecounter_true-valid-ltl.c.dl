/*(Start())@0 · ((((Even("i"))@14 · (t=1)@15 · (Odd("i"))@16 · (t=0)@17)^w) \/ (((Odd("i"))@18 · (t=0)@19 · (Even("i"))@20 · (t=1)@21)^w)) · ((Return(0))@11)^w*/
/*(Start())@0 · ((((Even("i"))@14 · (t=1)@15 · (Odd("i"))@16 · (t=0)@17)^w) \/ (((Odd("i"))@18 · (t=0)@19 · (Even("i"))@20 · (t=1)@21)^w)) · ((Return(0))@11)^w*/

flow(0,14).
flow(14,15).
flow(15,16).
flow(16,17).
flow(17,14).
flow(0,18).
flow(18,19).
flow(19,20).
flow(20,21).
flow(21,18).
Start(0).
Even("i",14).
State(14).
Eq("t",15,1).
State(15).
Odd("i",16).
State(16).
Eq("t",17,0).
State(17).
State(0).
Odd("i",18).
State(18).
Eq("t",19,0).
State(19).
Even("i",20).
State(20).
Eq("t",21,1).
State(21).

//AG((AF("t"=1) /\ AF("t"=0)))
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Even(x0:symbol,n1:number)
.decl Odd(x0:symbol,n1:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl t_eq_0(loc:number)
.decl AF_t_eq_0_T(interm_state:number,loc:number)
.decl AF_t_eq_0_S(loc:number)
.decl AF_t_eq_0(loc:number)
.decl t_eq_1(loc:number)
.decl AF_t_eq_1_T(interm_state:number,loc:number)
.decl AF_t_eq_1_S(loc:number)
.decl AF_t_eq_1(loc:number)
.decl AF_t_eq_1_AND_AF_t_eq_0(loc:number)
.decl NOT_AF_t_eq_1_AND_AF_t_eq_0(loc:number)
.decl EF_NOT_AF_t_eq_1_AND_AF_t_eq_0(loc:number)
.decl AG_AF_t_eq_1_AND_AF_t_eq_0(loc:number)
.decl AG_AF_t_eq_1_AND_AF_t_eq_0_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
t_eq_0(loc) :- State(loc), Eq("t",loc,0).
AF_t_eq_0_T(interm_state,loc) :- AF_t_eq_0_T(tempOne,loc), !t_eq_0(tempOne), control_flow(tempOne,interm_state).
AF_t_eq_0_T(interm_state,loc) :- !t_eq_0(loc), control_flow(loc,interm_state).
AF_t_eq_0_S(loc) :- !t_eq_0(loc), control_flow(loc,tempOne), AF_t_eq_0_S(tempOne).
AF_t_eq_0_S(loc) :- AF_t_eq_0_T(loc,loc).
AF_t_eq_0(loc) :- State(loc), !AF_t_eq_0_S(loc).
t_eq_1(loc) :- State(loc), Eq("t",loc,1).
AF_t_eq_1_T(interm_state,loc) :- AF_t_eq_1_T(tempOne,loc), !t_eq_1(tempOne), control_flow(tempOne,interm_state).
AF_t_eq_1_T(interm_state,loc) :- !t_eq_1(loc), control_flow(loc,interm_state).
AF_t_eq_1_S(loc) :- !t_eq_1(loc), control_flow(loc,tempOne), AF_t_eq_1_S(tempOne).
AF_t_eq_1_S(loc) :- AF_t_eq_1_T(loc,loc).
AF_t_eq_1(loc) :- State(loc), !AF_t_eq_1_S(loc).
AF_t_eq_1_AND_AF_t_eq_0(loc) :- AF_t_eq_1(loc), AF_t_eq_0(loc).
NOT_AF_t_eq_1_AND_AF_t_eq_0(loc) :- State(loc), !AF_t_eq_1_AND_AF_t_eq_0(loc).
EF_NOT_AF_t_eq_1_AND_AF_t_eq_0(loc) :- control_flow(loc,tempOne), EF_NOT_AF_t_eq_1_AND_AF_t_eq_0(tempOne).
EF_NOT_AF_t_eq_1_AND_AF_t_eq_0(loc) :- NOT_AF_t_eq_1_AND_AF_t_eq_0(loc).
AG_AF_t_eq_1_AND_AF_t_eq_0(loc) :- State(loc), !EF_NOT_AF_t_eq_1_AND_AF_t_eq_0(loc).
AG_AF_t_eq_1_AND_AF_t_eq_0_Final(loc) :- Start(loc), AG_AF_t_eq_1_AND_AF_t_eq_0(loc), !NotTotal(loc).
.output Eq
.output Start
.output State
.output flow
.output Even
.output Odd
.output AG_AF_t_eq_1_AND_AF_t_eq_0_Final(IO=stdout)

/* Other information 

//-- Facts for Procedure <main> 

Flow(0,1). //@6:1-9:2
Flow(11,12). //@18:2-19:1
Flow(1,10). //@9:2-9:9
Flow(1,2). //@9:2-9:9
Flow(2,3). //@9:9-10:7
Flow(10,11). //@9:9-18:2
Flow(7,1). //@15:3-9:2
Flow(6,7). //@10:3-15:3
Flow(3,8). //@10:7-10:7
Flow(3,4). //@10:7-10:7
Flow(4,5). //@10:7-11:4
Flow(8,9). //@10:7-13:4
Flow(5,6). //@11:4-10:3
Flow(9,6). //@13:4-10:3
Stmt_BinaryOperatorStmt(9,Assign,[IStore(&t,0)]). // @13:4
Stmt_BinaryOperatorStmt(5,Assign,[IStore(&t,1)]). // @11:4
PruneNode(8,false,[Prune(!((n$1 % 2) == 0), false)]). // @10:7
PruneNode(4,true,[Prune(((n$1 % 2) == 0), true)]). // @10:7
Stmt_BinaryOperatorStmt(3,EQ,[ILoad(&i,n$1)]). // @10:7
Join(6,[]).  // @10:3
Stmt_UnaryOperator(7,[ILoad(&i,n$0),IStore(&i,(n$0 + 1))]). // @15:3
PruneNode(10,false,[Prune(!1, false)]). // @9:9
PruneNode(2,true,[Prune(1, true)]). // @9:9
Join(1,[]).  // @9:2
Stmt_Return(11,[IStore(&return,0)]). // @18:2
Exit(12).  // @19:1
Start(0). // @6:1
*/

