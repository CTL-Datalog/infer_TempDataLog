/*(Start())@0 · (x=2)@1 · (([x>=2]@3 · (([Even("x")]@5 · (y=1)@6 · ((Return(0))@8)^w) \/ ([!(Even("x"))]@10 · (y=0)@11 · ((Return(0))@8)^w))) \/ ([!(x>=2)]@12 · (y=0)@11 · (Join())@7 · ((Return(0))@8)^w))*/
/*(Start())@0 · (x=2)@1 · (([x>=2]@13 · (([Even("x")]@14 · (y=1)@15 · ((Return(0))@16)^w) \/ ([!(Even("x"))]@17 · (y=0)@18 · ((Return(0))@19)^w))) \/ ([!(x>=2)]@20 · (y=0)@21 · (Join())@22 · ((Return(0))@23)^w)) · 𝝐 */

Start(1). 
State(1).State(2).State(3).State(4).State(5).
Even("x", 1). GtEq("x", 1, 2). Lt("x", 1, 2). Eq("y", 4, 1). Eq("y", 4, 1). 
flow (1, 2). flow (4, 4).  flow (5, 5). 
control_flow (2, 3):-  GtEqD("x", 2, 2). 
control_flow (3, 4):-  EvenD("x", 2). 
control_flow (2, 5):- LtD("x", 2, 2). 
control_flow (3, 5):- OddD("x", 2). 
//AF("y"=1)
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl Lt(x:symbol,loc:number,n:number)
.decl Odd(x:symbol,loc:number)
.decl GtEq(x:symbol,loc:number,n:number)
.decl Even(x:symbol,loc:number)
.decl LtD(x:symbol,loc:number,n:number)
.decl EvenD(x:symbol,loc:number)
.decl OddD(x:symbol,loc:number)
.decl GtEqD(x:symbol,loc:number,n:number)
.decl y_eq_1(loc:number)
.decl AF_y_eq_1_T(interm_state:number,loc:number)
.decl AF_y_eq_1_S(loc:number)
.decl AF_y_eq_1(loc:number)
.decl AF_y_eq_1_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
LtD(x,loc,n) :- Lt(x,loc,n).
LtD(x,loc,n) :- LtD(x,locI,n), control_flow(locI,loc), !Lt(x,loc,_), !GtEq(x,loc,_).
EvenD(x,loc) :- Even(x,loc).
EvenD(x,loc) :- EvenD(x,locI), control_flow(locI,loc), !Even(x,loc), !Odd(x,loc).
GtEqD(x,loc,n) :- GtEq(x,loc,n).
GtEqD(x,loc,n) :- GtEqD(x,locI,n), control_flow(locI,loc), !GtEq(x,loc,_), !Lt(x,loc,_).
y_eq_1(loc) :- State(loc), Eq("y",loc,1).
AF_y_eq_1_T(interm_state,loc) :- AF_y_eq_1_T(tempOne,loc), !y_eq_1(tempOne), control_flow(tempOne,interm_state).
AF_y_eq_1_T(interm_state,loc) :- !y_eq_1(loc), control_flow(loc,interm_state).
AF_y_eq_1_S(loc) :- !y_eq_1(loc), control_flow(loc,tempOne), AF_y_eq_1_S(tempOne).
AF_y_eq_1_S(loc) :- AF_y_eq_1_T(loc,loc).
AF_y_eq_1(loc) :- State(loc), !AF_y_eq_1_S(loc).
AF_y_eq_1_Final(loc) :- Start(loc), AF_y_eq_1(loc), !NotTotal(loc).
.output Eq
.output Lt
.output Odd
.output GtEq
.output Even
.output Start
.output State
.output flow
.output AF_y_eq_1_Final(IO=stdout)
.output flow(IO=stdout)
.output GtEqD(IO=stdout)


