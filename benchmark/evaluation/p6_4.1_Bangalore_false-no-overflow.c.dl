/*(Start())@2 · (EXIT())@3*/

flow(2,3).
flow(3,3).
Start(2).
State(2).
EXIT(3).
State(3).

/*(Start())@20 · (x=_)@21 · (y=_)@22 · (([y<1]@23 · (([x<0]@24 · (Return(0))@25) \/ ((([y>0]@26 · [x>=0]@27 · (x=-1)@28 · (Return(0))@29) \/ ([y<=0]@30 · ([x>=0]@31 · ((x+1)>0)@32)^w))))) \/ ([y>=1]@33 · (Return(0))@34))*/

flow(20,21).
flow(21,22).
flow(25,25).
flow(29,29).
flow(32,32).
flow(32,31).
flow(34,34).
Start(20).
Lt("x",20,0).
Gt("y",20,0).
Lt("y",20,1).
LtEq("y",20,0).
GtEq("x",20,0).
GtEq("y",20,1).
State(20).
State(21).
State(24).
Return(0,25).
State(25).
State(26).
State(27).
Lt("x",28,0).
State(28).
Return(0,29).
State(29).
State(23).
State(30).
State(31).
State(32).
State(22).
State(33).
Return(0,34).
State(34).
control_flow(22,23) :- LtD("y",22,1).
control_flow(23,24) :- LtD("y",22,1), LtD("x",23,0).
control_flow(24,25) :- LtD("y",22,1), LtD("x",23,0).
control_flow(23,26) :- LtD("y",22,1), GtD("y",23,0).
control_flow(26,27) :- LtD("y",22,1), GtD("y",23,0), GtEqD("x",26,0).
control_flow(27,28) :- LtD("y",22,1), GtD("y",23,0), GtEqD("x",26,0).
control_flow(28,29) :- LtD("y",22,1), GtD("y",23,0), GtEqD("x",26,0).
control_flow(23,30) :- LtD("y",22,1), LtEqD("y",23,0).
control_flow(30,31) :- LtD("y",22,1), LtEqD("y",23,0), GtEqD("x",30,0).
control_flow(31,32) :- LtD("y",22,1), LtEqD("y",23,0), GtEqD("x",30,0).
control_flow(22,33) :- GtEqD("y",22,1).
control_flow(33,34) :- GtEqD("y",22,1).
//AF("x"<0)
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl EXIT(n0:number)
.decl Return(n0:number,n1:number)
.decl GtEq(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl Gt(x:symbol,loc:number,n:number)
.decl Lt(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl GtEqD(x:symbol,loc:number,n:number)
.decl GtD(x:symbol,loc:number,n:number)
.decl LtD(x:symbol,loc:number,n:number)
.decl x_lt_0(loc:number)
.decl AF_x_lt_0_T(interm_state:number,loc:number)
.decl AF_x_lt_0_S(loc:number)
.decl AF_x_lt_0(loc:number)
.decl AF_x_lt_0_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,_), !Gt(x,loc,_).
GtEqD(x,loc,n) :- GtEq(x,loc,n).
GtEqD(x,loc,n) :- GtEqD(x,locI,n), control_flow(locI,loc), !GtEq(x,loc,_), !Lt(x,loc,_).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,_), !LtEq(x,loc,_).
LtD(x,loc,n) :- Lt(x,loc,n).
LtD(x,loc,n) :- LtD(x,locI,n), control_flow(locI,loc), !Lt(x,loc,_), !GtEq(x,loc,_).
x_lt_0(loc) :- State(loc), LtD("x",loc,0).
AF_x_lt_0_T(interm_state,loc) :- AF_x_lt_0_T(tempOne,loc), !x_lt_0(tempOne), control_flow(tempOne,interm_state).
AF_x_lt_0_T(interm_state,loc) :- !x_lt_0(loc), control_flow(loc,interm_state).
AF_x_lt_0_S(loc) :- !x_lt_0(loc), control_flow(loc,tempOne), AF_x_lt_0_S(tempOne).
AF_x_lt_0_S(loc) :- AF_x_lt_0_T(loc,loc).
AF_x_lt_0(loc) :- State(loc), !AF_x_lt_0_S(loc).
AF_x_lt_0_Final(loc) :- Start(loc), AF_x_lt_0(loc), !NotTotal(loc).
.output GtEq
.output LtEq
.output Gt
.output Lt
.output Start
.output State
.output flow
.output EXIT
.output Return
.output AF_x_lt_0_Final(IO=stdout)

/* Other information 

//-- Facts for Procedure <_nondet_int> 

Flow(1,0). //@7:1-7:20
Exit(0).  // @7:20
Start(1). // @7:1
//-- Facts for Procedure <main> 

Flow(1,2). //@12:1-16:5
Flow(13,0). //@23:2-24:1
Flow(8,13). //@18:2-23:2
Flow(4,11). //@18:6-18:6
Flow(4,12). //@18:6-18:6
Flow(12,6). //@18:6-19:6
Flow(11,8). //@18:6-18:2
Flow(6,10). //@19:6-19:13
Flow(10,7). //@19:13-19:13
Flow(10,9). //@19:13-19:13
Flow(9,5). //@19:13-20:7
Flow(7,8). //@19:13-18:2
Flow(5,6). //@20:7-19:6
Flow(3,4). //@17:5-18:6
Flow(2,3). //@16:5-17:5
Stmt_BinaryOperatorStmt(2,Assign,[ICall(_fun__nondet_int,,n$8),IStore(&x,n$8)]). // @16:5
Stmt_BinaryOperatorStmt(3,Assign,[ICall(_fun__nondet_int,,n$7),IStore(&y,n$7)]). // @17:5
Stmt_BinaryOperatorStmt(5,Assign,[ILoad(&x,n$2),ILoad(&y,n$3),IStore(&x,(n$2 - n$3))]). // @20:7
PruneNode(7,false,[Prune(!(n$1 >= 0), false)]). // @19:13
PruneNode(9,true,[Prune((n$1 >= 0), true)]). // @19:13
Stmt_BinaryOperatorStmt(10,GE,[ILoad(&x,n$1)]). // @19:13
Join(6,[]).  // @19:6
PruneNode(11,false,[Prune(!(n$0 < 1), false)]). // @18:6
PruneNode(12,true,[Prune((n$0 < 1), true)]). // @18:6
Stmt_BinaryOperatorStmt(4,LT,[ILoad(&y,n$0)]). // @18:6
Join(8,[]).  // @18:2
Stmt_Return(13,[IStore(&return,0)]). // @23:2
Exit(0).  // @24:1
Start(1). // @12:1
*/

