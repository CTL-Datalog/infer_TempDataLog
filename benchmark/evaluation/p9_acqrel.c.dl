/*(Join())@22*/

flow(22,22).
State(22).

/*(Start())@38 · (A=0)@39 · (R=0)@40 · ((([n>0]@47 · (n>0)@48 · (A=1)@49 · (A=0)@50 · (n=_)@51 · [n<=0]@52 · (R=1)@53 · (R=0)@54)^w) \/ ((([n>0]@57 · (n=0)@58 · (A=1)@59 · (A=0)@60 · (n=_)@61 · ((n>0)@62 · (⊥)@63 · (n=(n-1))@64)^w) \/ (([n<=0]@79 · (n<=0)@80 · (A=1)@81 · (A=0)@82 · (n=_)@83 · [n>0]@84 · [n>0]@86 · (n=0)@87 · (n=(n-1))@88 · (R=1)@89 · (R=0)@90)^w))))*/

flow(38,39).
flow(39,40).
flow(54,54).
flow(54,47).
flow(64,64).
flow(64,62).
flow(90,90).
flow(90,79).
Start(38).
LtEq("n",38,0).
Gt("n",38,0).
State(38).
State(39).
Eq("R",40,0).
State(47).
State(48).
Eq("A",49,1).
State(49).
State(50).
State(51).
State(52).
State(53).
Eq("R",54,0).
State(54).
State(57).
LtEq("n",58,0).
State(58).
Eq("A",59,1).
State(59).
State(60).
State(61).
State(62).
State(63).
LtEq("n",64,0).
State(64).
State(40).
State(79).
State(80).
Eq("A",81,1).
State(81).
State(82).
State(83).
State(84).
State(86).
LtEq("n",87,0).
State(87).
LtEq("n",88,0).
State(88).
State(89).
Eq("R",90,0).
State(90).
control_flow(40,47) :- GtD("n",40,0).
control_flow(47,48) :- GtD("n",40,0).
control_flow(48,49) :- GtD("n",40,0).
control_flow(49,50) :- GtD("n",40,0).
control_flow(50,51) :- GtD("n",40,0).
control_flow(51,52) :- GtD("n",40,0), LtEqD("n",51,0).
control_flow(52,53) :- GtD("n",40,0), LtEqD("n",51,0).
control_flow(53,54) :- GtD("n",40,0), LtEqD("n",51,0).
control_flow(40,57) :- GtD("n",40,0).
control_flow(57,58) :- GtD("n",40,0).
control_flow(58,59) :- GtD("n",40,0).
control_flow(59,60) :- GtD("n",40,0).
control_flow(60,61) :- GtD("n",40,0).
control_flow(61,62) :- GtD("n",40,0).
control_flow(62,63) :- GtD("n",40,0).
control_flow(63,64) :- GtD("n",40,0).
control_flow(40,79) :- LtEqD("n",40,0).
control_flow(79,80) :- LtEqD("n",40,0).
control_flow(80,81) :- LtEqD("n",40,0).
control_flow(81,82) :- LtEqD("n",40,0).
control_flow(82,83) :- LtEqD("n",40,0).
control_flow(83,84) :- LtEqD("n",40,0), GtD("n",83,0).
control_flow(84,86) :- LtEqD("n",40,0), GtD("n",83,0), GtD("n",84,0).
control_flow(86,87) :- LtEqD("n",40,0), GtD("n",83,0), GtD("n",84,0).
control_flow(87,88) :- LtEqD("n",40,0), GtD("n",83,0), GtD("n",84,0).
control_flow(88,89) :- LtEqD("n",40,0), GtD("n",83,0), GtD("n",84,0).
control_flow(89,90) :- LtEqD("n",40,0), GtD("n",83,0), GtD("n",84,0).
//AG(("A"=1 => AF("R"=0)))
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl Gt(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl GtD(x:symbol,loc:number,n:number)
.decl R_eq_0(loc:number)
.decl AF_R_eq_0_T(interm_state:number,loc:number)
.decl AF_R_eq_0_S(loc:number)
.decl AF_R_eq_0(loc:number)
.decl A_eq_1(loc:number)
.decl A_eq_1_IMPLY_AF_R_eq_0(loc:number)
.decl NOT_A_eq_1_IMPLY_AF_R_eq_0(loc:number)
.decl EF_NOT_A_eq_1_IMPLY_AF_R_eq_0(loc:number)
.decl AG_A_eq_1_IMPLY_AF_R_eq_0(loc:number)
.decl AG_A_eq_1_IMPLY_AF_R_eq_0_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,_), !NotEq(x,loc,_).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,_), !Gt(x,loc,_).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,_), !LtEq(x,loc,_).
R_eq_0(loc) :- State(loc), EqD("R",loc,0).
AF_R_eq_0_T(interm_state,loc) :- AF_R_eq_0_T(tempOne,loc), !R_eq_0(tempOne), control_flow(tempOne,interm_state).
AF_R_eq_0_T(interm_state,loc) :- !R_eq_0(loc), control_flow(loc,interm_state).
AF_R_eq_0_S(loc) :- !R_eq_0(loc), control_flow(loc,tempOne), AF_R_eq_0_S(tempOne).
AF_R_eq_0_S(loc) :- AF_R_eq_0_T(loc,loc).
AF_R_eq_0(loc) :- State(loc), !AF_R_eq_0_S(loc).
A_eq_1(loc) :- State(loc), EqD("A",loc,1).
A_eq_1_IMPLY_AF_R_eq_0(loc) :- State(loc), !A_eq_1(loc).
A_eq_1_IMPLY_AF_R_eq_0(loc) :- AF_R_eq_0(loc).
NOT_A_eq_1_IMPLY_AF_R_eq_0(loc) :- State(loc), !A_eq_1_IMPLY_AF_R_eq_0(loc).
EF_NOT_A_eq_1_IMPLY_AF_R_eq_0(loc) :- control_flow(loc,tempOne), EF_NOT_A_eq_1_IMPLY_AF_R_eq_0(tempOne).
EF_NOT_A_eq_1_IMPLY_AF_R_eq_0(loc) :- NOT_A_eq_1_IMPLY_AF_R_eq_0(loc).
AG_A_eq_1_IMPLY_AF_R_eq_0(loc) :- State(loc), !EF_NOT_A_eq_1_IMPLY_AF_R_eq_0(loc).
AG_A_eq_1_IMPLY_AF_R_eq_0_Final(loc) :- Start(loc), AG_A_eq_1_IMPLY_AF_R_eq_0(loc), !NotTotal(loc).
.output NotEq
.output Eq
.output Gt
.output LtEq
.output Start
.output State
.output flow
.output AG_A_eq_1_IMPLY_AF_R_eq_0_Final(IO=stdout)

/* Other information 

//-- Facts for Procedure <__VERIFIER_nondet_int> 

//-- Facts for Procedure <main> 

Flow(20,0). //@20:1-21:3
Flow(14,17). //@35:3-35:9
Flow(14,19). //@35:3-35:9
Flow(19,16). //@35:9-35:21
Flow(17,18). //@35:9-36:1
Flow(16,14). //@35:21-35:3
Flow(2,13). //@25:3-25:9
Flow(2,15). //@25:3-25:9
Flow(15,3). //@25:9-26:5
Flow(13,14). //@25:9-35:3
Flow(12,2). //@33:5-25:3
Flow(9,12). //@32:5-33:5
Flow(6,11). //@29:5-29:11
Flow(11,8). //@29:11-29:11
Flow(11,10). //@29:11-29:11
Flow(10,7). //@29:11-30:7
Flow(8,9). //@29:11-32:5
Flow(7,6). //@30:7-29:5
Flow(5,6). //@28:5-29:5
Flow(4,5). //@27:5-28:5
Flow(3,4). //@26:5-27:5
Flow(1,2). //@22:3-25:3
Flow(0,1). //@21:3-22:3
Stmt_Decl(0,[IStore(&A,0)]). // @21:3
Stmt_Decl(1,[IStore(&R,0)]). // @22:3
Stmt_BinaryOperatorStmt(3,Assign,[IStore(&A,1)]). // @26:5
Stmt_BinaryOperatorStmt(4,Assign,[IStore(&A,0)]). // @27:5
Stmt_BinaryOperatorStmt(5,Assign,[ICall(_fun___VERIFIER_nondet_int,,n$5),IStore(&n,n$5)]). // @28:5
Stmt_UnaryOperator(7,[ILoad(&n,n$3),IStore(&n,(n$3 - 1))]). // @30:7
PruneNode(8,false,[Prune(!(n$2 > 0), false)]). // @29:11
PruneNode(10,true,[Prune((n$2 > 0), true)]). // @29:11
Stmt_BinaryOperatorStmt(11,GT,[ILoad(&n,n$2)]). // @29:11
Join(6,[]).  // @29:5
Stmt_BinaryOperatorStmt(9,Assign,[IStore(&R,1)]). // @32:5
Stmt_BinaryOperatorStmt(12,Assign,[IStore(&R,0)]). // @33:5
PruneNode(13,false,[Prune(!1, false)]). // @25:9
PruneNode(15,true,[Prune(1, true)]). // @25:9
Join(2,[]).  // @25:3
Stmt_BinaryOperatorStmt(16,Assign,[ILoad(&x,n$0),IStore(&x,n$0)]). // @35:21
PruneNode(17,false,[Prune(!1, false)]). // @35:9
PruneNode(19,true,[Prune(1, true)]). // @35:9
Join(14,[]).  // @35:3
Exit(18).  // @36:1
Start(20). // @20:1
*/

