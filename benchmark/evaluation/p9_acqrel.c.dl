/*𝝐 */


/*(Start())@4 · ("A"=0)@5 · ("R"=0)@6 · (("A"=1)@9 · ("A"=0)@10 · ("n"=_)@11 · ((["n"<=0]@12 · ("n"<=0)@13 · ("R"=1)@14 · ("R"=0)@15) \/ (["n">0]@16 · ("n">0)@17 · ("n"=("n"-1))@18 · ("n"<1)@19 · ("R"=1)@20 · ("R"=0)@21)))^w*/

flow(4,5).
flow(5,6).
flow(6,9).
flow(9,10).
flow(10,11).
flow(12,13).
flow(13,14).
flow(14,15).
flow(15,15).
flow(16,17).
flow(17,18).
flow(18,19).
flow(19,20).
flow(20,21).
flow(21,21).
flow(15,9).
flow(21,9).
Start(4).
State(4).
State(5).
Eq("R",6,0).
State(6).
Eq("A",9,1).
State(9).
State(10).
LtEq("n",11,0).
Gt("n",11,0).
State(12).
LtEq("n",13,0).
State(13).
State(14).
Eq("R",15,0).
State(15).
State(11).
State(16).
Gt("n",17,0).
State(17).
State(18).
State(19).
State(20).
Eq("R",21,0).
State(21).
control_flow(11,12) :- LtEqD("n",11,0).
control_flow(11,16) :- GtD("n",11,0).
//AG(("A"=1 => AF("R"=0)))
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl Gt(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl GtD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl R_eq_0(loc:number)
.decl AF_R_eq_0_T(interm_state:number,loc:number)
.decl AF_R_eq_0_S(loc:number)
.decl AF_R_eq_0(loc:number)
.decl A_eq_1(loc:number)
.decl A_eq_1_IMPLY_AF_R_eq_0(loc:number)
.decl NOT_A_eq_1_IMPLY_AF_R_eq_0(loc:number)
.decl EF_NOT_A_eq_1_IMPLY_AF_R_eq_0(loc:number)
.decl AG_A_eq_1_IMPLY_AF_R_eq_0(loc:number)
.decl AG_A_eq_1_IMPLY_AF_R_eq_0_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,n), !NotEq(x,loc,n).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,n), !LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,n), !Gt(x,loc,n).
R_eq_0(loc) :- State(loc), EqD("R",loc,0).
AF_R_eq_0_T(interm_state,loc) :- AF_R_eq_0_T(tempOne,loc), !R_eq_0(tempOne), control_flow(tempOne,interm_state).
AF_R_eq_0_T(interm_state,loc) :- !R_eq_0(loc), control_flow(loc,interm_state).
AF_R_eq_0_S(loc) :- !R_eq_0(loc), control_flow(loc,tempOne), AF_R_eq_0_S(tempOne).
AF_R_eq_0_S(loc) :- AF_R_eq_0_T(loc,loc).
AF_R_eq_0(loc) :- State(loc), !AF_R_eq_0_S(loc).
A_eq_1(loc) :- State(loc), EqD("A",loc,1).
A_eq_1_IMPLY_AF_R_eq_0(loc) :- State(loc), !A_eq_1(loc).
A_eq_1_IMPLY_AF_R_eq_0(loc) :- AF_R_eq_0(loc).
NOT_A_eq_1_IMPLY_AF_R_eq_0(loc) :- State(loc), !A_eq_1_IMPLY_AF_R_eq_0(loc).
EF_NOT_A_eq_1_IMPLY_AF_R_eq_0(loc) :- control_flow(loc,tempOne), EF_NOT_A_eq_1_IMPLY_AF_R_eq_0(tempOne).
EF_NOT_A_eq_1_IMPLY_AF_R_eq_0(loc) :- NOT_A_eq_1_IMPLY_AF_R_eq_0(loc).
AG_A_eq_1_IMPLY_AF_R_eq_0(loc) :- State(loc), !EF_NOT_A_eq_1_IMPLY_AF_R_eq_0(loc).
AG_A_eq_1_IMPLY_AF_R_eq_0_Final(loc) :- Start(loc), AG_A_eq_1_IMPLY_AF_R_eq_0(loc), !NotTotal(loc).
.output NotEq
.output Gt
.output LtEq
.output Eq
.output Start
.output State
.output flow
.output AG_A_eq_1_IMPLY_AF_R_eq_0_Final(IO=stdout)

.output NotTotal(IO=stdout)

/* Other information 

//-- Facts for Procedure <__VERIFIER_nondet_int> 

//-- Facts for Procedure <main> 

Flow(20,0). //@20:1-21:3
Flow(14,17). //@35:3-35:9
Flow(14,19). //@35:3-35:9
Flow(19,16). //@35:9-35:21
Flow(17,18). //@35:9-36:1
Flow(16,14). //@35:21-35:3
Flow(2,13). //@25:3-25:9
Flow(2,15). //@25:3-25:9
Flow(15,3). //@25:9-26:5
Flow(13,14). //@25:9-35:3
Flow(12,2). //@33:5-25:3
Flow(9,12). //@32:5-33:5
Flow(6,11). //@29:5-29:11
Flow(11,8). //@29:11-29:11
Flow(11,10). //@29:11-29:11
Flow(10,7). //@29:11-30:7
Flow(8,9). //@29:11-32:5
Flow(7,6). //@30:7-29:5
Flow(5,6). //@28:5-29:5
Flow(4,5). //@27:5-28:5
Flow(3,4). //@26:5-27:5
Flow(1,2). //@22:3-25:3
Flow(0,1). //@21:3-22:3
Stmt_Decl(0,[IStore(&A,0)]). // @21:3
Stmt_Decl(1,[IStore(&R,0)]). // @22:3
Stmt_BinaryOperatorStmt(3,Assign,[IStore(&A,1)]). // @26:5
Stmt_BinaryOperatorStmt(4,Assign,[IStore(&A,0)]). // @27:5
Stmt_BinaryOperatorStmt(5,Assign,[ICall(_fun___VERIFIER_nondet_int,,n$5),IStore(&n,n$5)]). // @28:5
Stmt_UnaryOperator(7,[ILoad(&n,n$3),IStore(&n,(n$3 - 1))]). // @30:7
PruneNode(8,false,[Prune(!(n$2 > 0), false)]). // @29:11
PruneNode(10,true,[Prune((n$2 > 0), true)]). // @29:11
Stmt_BinaryOperatorStmt(11,GT,[ILoad(&n,n$2)]). // @29:11
Join(6,[]).  // @29:5
Stmt_BinaryOperatorStmt(9,Assign,[IStore(&R,1)]). // @32:5
Stmt_BinaryOperatorStmt(12,Assign,[IStore(&R,0)]). // @33:5
PruneNode(13,false,[Prune(!1, false)]). // @25:9
PruneNode(15,true,[Prune(1, true)]). // @25:9
Join(2,[]).  // @25:3
Stmt_BinaryOperatorStmt(16,Assign,[ILoad(&x,n$0),IStore(&x,n$0)]). // @35:21
PruneNode(17,false,[Prune(!1, false)]). // @35:9
PruneNode(19,true,[Prune(1, true)]). // @35:9
Join(14,[]).  // @35:3
Exit(18).  // @36:1
Start(20). // @20:1
*/

