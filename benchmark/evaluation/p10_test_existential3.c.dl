/*𝝐 */


/*(Start())@2 · ("r"=0)@3 · ("x"=_)@4 · ((["x"<=0]@5 · ("x"<=0)@6 · (Return(0))@7) \/ (["x">0]@8 · ("x">0)@9 · ("x"=("x"-1))@10 · ("temp"=_)@11 · (([("temp"!=0)]@12 · (("temp"!=0))@13 · ("r"=1)@14) \/ (["temp"=0]@15 · ("temp"=0)@16)) · ("x"<1)@17 · (Return(0))@18))*/

flow(2,3).
flow(3,4).
flow(5,6).
flow(6,7).
flow(7,7).
flow(8,9).
flow(9,10).
flow(10,11).
flow(12,13).
flow(13,14).
flow(14,17).
flow(15,16).
flow(16,17).
flow(17,18).
flow(18,18).
Start(2).
State(2).
State(3).
LtEq("x",4,0).
Gt("x",4,0).
State(5).
LtEq("x",6,0).
State(6).
Return(0,7).
State(7).
State(4).
State(8).
Gt("x",9,0).
State(9).
State(10).
NotEq("temp",11,0).
Eq("temp",11,0).
State(12).
NotEq("temp",13,0).
State(13).
Eq("r",14,1).
State(14).
State(11).
State(15).
Eq("temp",16,0).
State(16).
State(17).
Return(0,18).
State(18).
control_flow(4,5) :- LtEqD("x",4,0).
control_flow(4,8) :- GtD("x",4,0).
control_flow(11,12) :- NotEqD("temp",11,0).
control_flow(11,15) :- EqD("temp",11,0).
//EF("r"=1)
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl Gt(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl NotEqD(x:symbol,loc:number,n:number)
.decl GtD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl r_eq_1(loc:number)
.decl EF_r_eq_1(loc:number)
.decl EF_r_eq_1_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,n), !NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEq(x,loc,n).
NotEqD(x,loc,n) :- NotEqD(x,locI,n), control_flow(locI,loc), !NotEq(x,loc,n), !Eq(x,loc,n).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,n), !LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,n), !Gt(x,loc,n).
r_eq_1(loc) :- State(loc), EqD("r",loc,1).
EF_r_eq_1(loc) :- control_flow(loc,tempOne), EF_r_eq_1(tempOne).
EF_r_eq_1(loc) :- r_eq_1(loc).
EF_r_eq_1_Final(loc) :- Start(loc), EF_r_eq_1(loc), !NotTotal(loc).
.output Eq
.output NotEq
.output Gt
.output LtEq
.output Start
.output State
.output flow
.output Return
.output EF_r_eq_1_Final(IO=stdout)

.output NotTotal(IO=stdout)

