


flow(7,8).
flow(8,9).
flow(10,11).
flow(11,12).
flow(13,14).
flow(14,15).
flow(15,15).
flow(16,17).
flow(17,18).
flow(18,18).
flow(19,20).
flow(21,22).
flow(22,23).
flow(23,23).
flow(24,25).
flow(25,26).
flow(26,26).
LtEq("i",7,10).
Gt("i",7,10).
Start(7).
State(7).
NotEqVar("x",8,"y").
EqVar("x",8,"y").
State(8).
State(10).
Gt("i",11,10).
State(11).
EqVar("x",12,"y").
State(13).
NotEqVar("x",14,"y").
State(14).
Return(0,15).
State(15).
State(12).
State(16).
EqVar("x",17,"y").
State(17).
State(18).
State(9).
State(19).
LtEq("i",20,10).
State(21).
NotEqVar("x",22,"y").
State(22).
Return(0,23).
State(23).
State(20).
State(24).
EqVar("x",25,"y").
State(25).
State(26).
control_flow(9,10) :- GtD("i",9,10).
control_flow(12,13) :- NotEqVarD("x",12,"y").
control_flow(12,16) :- EqVarD("x",12,"y").
control_flow(9,19) :- LtEqD("i",9,10).
control_flow(20,21) :- NotEqVarD("x",20,"y").
control_flow(20,24) :- EqVarD("x",20,"y").
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl NotEqVar(x:symbol,loc:number,y:symbol)
.decl EqVar(x:symbol,loc:number,y:symbol)
.decl Gt(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl EqVarD(x:symbol,loc:number,y:symbol)
.decl NotEqVarD(x:symbol,loc:number,y:symbol)
.decl GtD(x:symbol,loc:number,n:number)
.decl EXITPred(loc:number)
.decl AF_EXITPred_T(interm_state:number,loc:number)
.decl AF_EXITPred_S(loc:number)
.decl AF_EXITPred(loc:number)
.decl AF_EXITPred_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,n), !Gt(x,loc,n).
EqVarD(x,loc,n) :- EqVar(x,loc,n).
EqVarD(x,loc,n) :- EqVarD(x,locI,n), control_flow(locI,loc), !EqVar(x,loc,n), !NotEqVar(x,loc,n).
NotEqVarD(x,loc,n) :- NotEqVar(x,loc,n).
NotEqVarD(x,loc,n) :- NotEqVarD(x,locI,n), control_flow(locI,loc), !NotEqVar(x,loc,n), !EqVar(x,loc,n).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,n), !LtEq(x,loc,n).
EXITPred(loc) :- Return(_,loc).
AF_EXITPred_T(interm_state,loc) :- AF_EXITPred_T(tempOne,loc), !EXITPred(tempOne), control_flow(tempOne,interm_state).
AF_EXITPred_T(interm_state,loc) :- !EXITPred(loc), control_flow(loc,interm_state).
AF_EXITPred_S(loc) :- !EXITPred(loc), control_flow(loc,tempOne), AF_EXITPred_S(tempOne).
AF_EXITPred_S(loc) :- AF_EXITPred_T(loc,loc).
AF_EXITPred(loc) :- State(loc), !AF_EXITPred_S(loc).
AF_EXITPred_Final(loc) :- Start(loc), AF_EXITPred(loc), !NotTotal(loc).
.output LtEq
.output NotEqVar
.output EqVar
.output Gt
.output Start
.output State
.output flow
.output Return
.output AF_EXITPred_Final(IO=stdout)

.output NotTotal(IO=stdout)

/* Other information 

//-- Facts for Procedure <__VERIFIER_nondet_int> 

//-- Facts for Procedure <main> 

Flow(14,0). //@11:1-12:5
Flow(10,13). //@21:5-22:1
Flow(8,12). //@20:5-20:12
Flow(12,9). //@20:12-20:12
Flow(12,11). //@20:12-20:12
Flow(11,8). //@20:12-20:5
Flow(9,10). //@20:12-21:5
Flow(5,8). //@17:5-20:5
Flow(3,6). //@17:9-17:9
Flow(3,7). //@17:9-17:9
Flow(7,4). //@17:9-18:9
Flow(6,5). //@17:9-17:5
Flow(4,5). //@18:9-17:5
Flow(2,3). //@14:5-17:9
Flow(1,2). //@13:5-14:5
Flow(0,1). //@12:5-13:5
Stmt_Decl(0,[ICall(_fun___VERIFIER_nondet_int,,n$9),IStore(&i,n$9)]). // @12:5
Stmt_Decl(1,[ICall(_fun___VERIFIER_nondet_int,,n$8),IStore(&x,n$8)]). // @13:5
Stmt_Decl(2,[IStore(&y,1)]). // @14:5
Stmt_BinaryOperatorStmt(4,Assign,[IStore(&x,1)]). // @18:9
PruneNode(6,false,[Prune(!(n$5 > 10), false)]). // @17:9
PruneNode(7,true,[Prune((n$5 > 10), true)]). // @17:9
Stmt_BinaryOperatorStmt(3,GT,[ILoad(&i,n$5)]). // @17:9
Join(5,[]).  // @17:5
PruneNode(9,false,[Prune(!(n$1 == n$2), false)]). // @20:12
PruneNode(11,true,[Prune((n$1 == n$2), true)]). // @20:12
Stmt_BinaryOperatorStmt(12,EQ,[ILoad(&x,n$1),ILoad(&y,n$2)]). // @20:12
Join(8,[]).  // @20:5
Stmt_Return(10,[]). // @21:5
Exit(13).  // @22:1
Start(14). // @11:1
*/

