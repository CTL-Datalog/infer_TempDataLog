/*(Join())@1*/

State(1).

/*(Start())@20 · (y=1)@21 · (i=_)@22 · (x=_)@23 · (([i>10]@24 · (x=1)@25 · (([(x!=y)]@26 · ((Return(0))@27)^w) \/ (([x=y]@28)^w))) \/ ([i<=10]@29 · (([(x!=y)]@30 · ((Return(0))@31)^w) \/ (([x=y]@32)^w))))*/

flow(20,21).
flow(21,22).
flow(22,23).
flow(27,27).
flow(28,28).
flow(31,31).
flow(32,32).
Start(20).
Gt("i",20,10).
NotEqVar("x",20,"y").
LtEq("i",20,10).
EqVar("x",20,"y").
State(20).
State(21).
State(22).
State(24).
EqVar("x",25,"y").
State(26).
Return(0,27).
State(27).
State(25).
State(28).
State(23).
State(30).
Return(0,31).
State(31).
State(29).
State(32).
control_flow(23,24) :- GtD("i",23,10).
control_flow(24,25) :- GtD("i",24,10).
control_flow(25,26) :- GtD("i",25,10), NotEqVarD("x",25,"y").
control_flow(26,27) :- GtD("i",26,10), NotEqVarD("x",26,"y").
control_flow(25,28) :- GtD("i",25,10), EqVarD("x",25,"y").
control_flow(23,29) :- LtEqD("i",23,10).
control_flow(29,30) :- LtEqD("i",29,10), NotEqVarD("x",29,"y").
control_flow(30,31) :- LtEqD("i",30,10), NotEqVarD("x",30,"y").
control_flow(29,32) :- LtEqD("i",29,10), EqVarD("x",29,"y").
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl EqVar(x:symbol,loc:number,y:symbol)
.decl LtEq(x:symbol,loc:number,n:number)
.decl NotEqVar(x:symbol,loc:number,y:symbol)
.decl Gt(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl EqVarD(x:symbol,loc:number,y:symbol)
.decl NotEqVarD(x:symbol,loc:number,y:symbol)
.decl GtD(x:symbol,loc:number,n:number)
.decl EXIT(loc:number)
.decl AF_EXIT_T(interm_state:number,loc:number)
.decl AF_EXIT_S(loc:number)
.decl AF_EXIT(loc:number)
.decl AF_EXIT_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,_), !Gt(x,loc,_).
EqVarD(x,loc,n) :- EqVar(x,loc,n).
EqVarD(x,loc,n) :- EqVarD(x,locI,n), control_flow(locI,loc), !EqVar(x,loc,_), !NotEqVar(x,loc,_).
NotEqVarD(x,loc,n) :- NotEqVar(x,loc,n).
NotEqVarD(x,loc,n) :- NotEqVarD(x,locI,n), control_flow(locI,loc), !NotEqVar(x,loc,_), !EqVar(x,loc,_).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,_), !LtEq(x,loc,_).
EXIT(loc) :- Return(_,loc).
AF_EXIT_T(interm_state,loc) :- AF_EXIT_T(tempOne,loc), !EXIT(tempOne), control_flow(tempOne,interm_state).
AF_EXIT_T(interm_state,loc) :- !EXIT(loc), control_flow(loc,interm_state).
AF_EXIT_S(loc) :- !EXIT(loc), control_flow(loc,tempOne), AF_EXIT_S(tempOne).
AF_EXIT_S(loc) :- AF_EXIT_T(loc,loc).
AF_EXIT(loc) :- State(loc), !AF_EXIT_S(loc).
AF_EXIT_Final(loc) :- Start(loc), AF_EXIT(loc), !NotTotal(loc).
.output EqVar
.output LtEq
.output NotEqVar
.output Gt
.output Start
.output State
.output flow
.output Return
.output AF_EXIT_Final(IO=stdout)

/* Other information 

//-- Facts for Procedure <__VERIFIER_nondet_int> 

//-- Facts for Procedure <main> 

Flow(1,2). //@11:1-15:5
Flow(13,14). //@24:5-25:1
Flow(9,10). //@22:5-22:12
Flow(10,12). //@22:12-22:12
Flow(10,11). //@22:12-22:12
Flow(11,9). //@22:12-22:5
Flow(12,13). //@22:12-24:5
Flow(8,9). //@19:5-22:5
Flow(5,15). //@19:9-19:9
Flow(5,6). //@19:9-19:9
Flow(6,7). //@19:9-20:9
Flow(15,8). //@19:9-19:5
Flow(7,8). //@20:9-19:5
Flow(4,5). //@17:5-19:9
Flow(3,4). //@16:5-17:5
Flow(2,3). //@15:5-16:5
Stmt_BinaryOperatorStmt(2,Assign,[IStore(&y,1)]). // @15:5
Stmt_BinaryOperatorStmt(3,Assign,[ICall(_fun___VERIFIER_nondet_int,,n$8),IStore(&i,n$8)]). // @16:5
Stmt_BinaryOperatorStmt(4,Assign,[ICall(_fun___VERIFIER_nondet_int,,n$7),IStore(&x,n$7)]). // @17:5
Stmt_BinaryOperatorStmt(7,Assign,[IStore(&x,1)]). // @20:9
PruneNode(15,false,[Prune(!(n$4 > 10), false)]). // @19:9
PruneNode(6,true,[Prune((n$4 > 10), true)]). // @19:9
Stmt_BinaryOperatorStmt(5,GT,[ILoad(&i,n$4)]). // @19:9
Join(8,[]).  // @19:5
PruneNode(12,false,[Prune(!(n$0 == n$1), false)]). // @22:12
PruneNode(11,true,[Prune((n$0 == n$1), true)]). // @22:12
Stmt_BinaryOperatorStmt(10,EQ,[ILoad(&x,n$0),ILoad(&y,n$1)]). // @22:12
Join(9,[]).  // @22:5
Stmt_Return(13,[IStore(&return,0)]). // @24:5
Exit(14).  // @25:1
Start(1). // @11:1
*/

