/*(Join())@16*/

flow(16,16).
State(16).

/*(Start())@21 · (y=1)@22 · (i=_)@23 · (x=_)@24 · (([i>10]@25 · (x=1)@26 · (([(x!=y)]@27 · (Return(0))@28) \/ (([x=y]@29 · (x=y)@31)^w))) \/ ([i<=10]@32 · (([(x!=y)]@33 · (Return(0))@34) \/ (([x=y]@35 · (x=y)@37)^w))))*/

flow(21,22).
flow(22,23).
flow(23,24).
flow(28,28).
flow(31,31).
flow(31,29).
flow(34,34).
flow(37,37).
flow(37,35).
Start(21).
Gt("i",21,10).
NotEqVar("x",21,"y").
LtEq("i",21,10).
EqVar("x",21,"y").
State(21).
State(22).
State(23).
State(25).
EqVar("x",26,"y").
State(27).
Return(0,28).
State(28).
State(26).
State(29).
EqVar("x",31,"y").
State(31).
State(24).
State(33).
Return(0,34).
State(34).
State(32).
State(35).
EqVar("x",37,"y").
State(37).
control_flow(24,25) :- GtD("i",24,10).
control_flow(25,26) :- GtD("i",24,10).
control_flow(26,27) :- GtD("i",24,10), NotEqVarD("x",26,"y").
control_flow(27,28) :- GtD("i",24,10), NotEqVarD("x",26,"y").
control_flow(26,29) :- GtD("i",24,10), EqVarD("x",26,"y").
control_flow(29,31) :- GtD("i",24,10), EqVarD("x",26,"y").
control_flow(24,32) :- LtEqD("i",24,10).
control_flow(32,33) :- LtEqD("i",24,10), NotEqVarD("x",32,"y").
control_flow(33,34) :- LtEqD("i",24,10), NotEqVarD("x",32,"y").
control_flow(32,35) :- LtEqD("i",24,10), EqVarD("x",32,"y").
control_flow(35,37) :- LtEqD("i",24,10), EqVarD("x",32,"y").
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl EqVar(x:symbol,loc:number,y:symbol)
.decl LtEq(x:symbol,loc:number,n:number)
.decl NotEqVar(x:symbol,loc:number,y:symbol)
.decl Gt(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl EqVarD(x:symbol,loc:number,y:symbol)
.decl NotEqVarD(x:symbol,loc:number,y:symbol)
.decl GtD(x:symbol,loc:number,n:number)
.decl EXIT(loc:number)
.decl AF_EXIT_T(interm_state:number,loc:number)
.decl AF_EXIT_S(loc:number)
.decl AF_EXIT(loc:number)
.decl AF_EXIT_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,_), !Gt(x,loc,_).
EqVarD(x,loc,n) :- EqVar(x,loc,n).
EqVarD(x,loc,n) :- EqVarD(x,locI,n), control_flow(locI,loc), !EqVar(x,loc,_), !NotEqVar(x,loc,_).
NotEqVarD(x,loc,n) :- NotEqVar(x,loc,n).
NotEqVarD(x,loc,n) :- NotEqVarD(x,locI,n), control_flow(locI,loc), !NotEqVar(x,loc,_), !EqVar(x,loc,_).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,_), !LtEq(x,loc,_).
EXIT(loc) :- Return(_,loc).
AF_EXIT_T(interm_state,loc) :- AF_EXIT_T(tempOne,loc), !EXIT(tempOne), control_flow(tempOne,interm_state).
AF_EXIT_T(interm_state,loc) :- !EXIT(loc), control_flow(loc,interm_state).
AF_EXIT_S(loc) :- !EXIT(loc), control_flow(loc,tempOne), AF_EXIT_S(tempOne).
AF_EXIT_S(loc) :- AF_EXIT_T(loc,loc).
AF_EXIT(loc) :- State(loc), !AF_EXIT_S(loc).
AF_EXIT_Final(loc) :- Start(loc), AF_EXIT(loc), !NotTotal(loc).
.output EqVar
.output LtEq
.output NotEqVar
.output Gt
.output Start
.output State
.output flow
.output Return
.output AF_EXIT_Final(IO=stdout)

/* Other information 

//-- Facts for Procedure <__VERIFIER_nondet_int> 

//-- Facts for Procedure <main> 

Flow(14,0). //@11:1-15:5
Flow(10,13). //@24:5-25:1
Flow(8,12). //@22:5-22:12
Flow(12,9). //@22:12-22:12
Flow(12,11). //@22:12-22:12
Flow(11,8). //@22:12-22:5
Flow(9,10). //@22:12-24:5
Flow(5,8). //@19:5-22:5
Flow(3,6). //@19:9-19:9
Flow(3,7). //@19:9-19:9
Flow(7,4). //@19:9-20:9
Flow(6,5). //@19:9-19:5
Flow(4,5). //@20:9-19:5
Flow(2,3). //@17:5-19:9
Flow(1,2). //@16:5-17:5
Flow(0,1). //@15:5-16:5
Stmt_BinaryOperatorStmt(0,Assign,[IStore(&y,1)]). // @15:5
Stmt_BinaryOperatorStmt(1,Assign,[ICall(_fun___VERIFIER_nondet_int,,n$8),IStore(&i,n$8)]). // @16:5
Stmt_BinaryOperatorStmt(2,Assign,[ICall(_fun___VERIFIER_nondet_int,,n$7),IStore(&x,n$7)]). // @17:5
Stmt_BinaryOperatorStmt(4,Assign,[IStore(&x,1)]). // @20:9
PruneNode(6,false,[Prune(!(n$4 > 10), false)]). // @19:9
PruneNode(7,true,[Prune((n$4 > 10), true)]). // @19:9
Stmt_BinaryOperatorStmt(3,GT,[ILoad(&i,n$4)]). // @19:9
Join(5,[]).  // @19:5
PruneNode(9,false,[Prune(!(n$0 == n$1), false)]). // @22:12
PruneNode(11,true,[Prune((n$0 == n$1), true)]). // @22:12
Stmt_BinaryOperatorStmt(12,EQ,[ILoad(&x,n$0),ILoad(&y,n$1)]). // @22:12
Join(8,[]).  // @22:5
Stmt_Return(10,[IStore(&return,0)]). // @24:5
Exit(13).  // @25:1
Start(14). // @11:1
*/

