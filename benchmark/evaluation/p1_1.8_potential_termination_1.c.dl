/*𝝐 */


/*(Start())@6 · ("i"=_)@7 · ("x"=_)@8 · ("y"=1)@9 · 
    ((["i">10]@10 · ("i">10)@11 · (Return(0))@12) \/ 
    (["i"<=10]@13 · ("i"<=10)@14 · 
        ((["x"="y"]@15 · ("x"="y")@16 · (Return(0))@17) \/ 
        ([("x"!="y")]@18 · (("x"!="y"))@19 · 
            ((["i">10]@20 · ("i">10)@21 · ("x"=1)@22 · (([("x"!="y")]@23 · (("x"!="y"))@24 · (Return(0))@25) \/ (["x"="y"]@26 · ("x"="y")@27 · (("y">="x")@28)^w))) \/ 
            (["i"<=10]@29 · ("i"<=10)@30 · (([("x"!="y")]@31 · (("x"!="y"))@32 · (Return(0))@33) \/ (["x"="y"]@34 · ("x"="y")@35 · (("y">="x")@36)^w))))))))*/

flow(6,7).
flow(7,8).
flow(8,9).
flow(10,11).
flow(11,12).
flow(12,12).
flow(13,14).
flow(15,16).
flow(16,17).
flow(17,17).
flow(18,19).
flow(20,21).
flow(21,22).
flow(23,24).
flow(24,25).
flow(25,25).
flow(26,27).
flow(27,28).
flow(28,28).
flow(29,30).
flow(31,32).
flow(32,33).
flow(33,33).
flow(34,35).
flow(35,36).
flow(36,36).
Start(6).
State(6).
LtEq("i",7,10).
Gt("i",7,10).
State(7).
NotEqVar("x",8,"y").
EqVar("x",8,"y").
State(8).
State(10).
Gt("i",11,10).
State(11).
Return(0,12).
State(12).
State(9).
State(13).
LtEq("i",14,10).
State(15).
EqVar("x",16,"y").
State(16).
Return(0,17).
State(17).
State(14).
State(18).
NotEqVar("x",19,"y").
State(20).
Gt("i",21,10).
State(21).
EqVar("x",22,"y").
State(23).
NotEqVar("x",24,"y").
State(24).
Return(0,25).
State(25).
State(22).
State(26).
EqVar("x",27,"y").
State(27).
State(28).
State(19).
State(29).
LtEq("i",30,10).
State(31).
NotEqVar("x",32,"y").
State(32).
Return(0,33).
State(33).
State(30).
State(34).
EqVar("x",35,"y").
State(35).
State(36).
control_flow(9,10) :- GtD("i",9,10).
control_flow(9,13) :- LtEqD("i",9,10).
control_flow(14,15) :- EqVarD("x",14,"y").
control_flow(14,18) :- NotEqVarD("x",14,"y").
control_flow(19,20) :- GtD("i",19,10).
control_flow(22,23) :- NotEqVarD("x",22,"y").
control_flow(22,26) :- EqVarD("x",22,"y").
control_flow(19,29) :- LtEqD("i",19,10).
control_flow(30,31) :- NotEqVarD("x",30,"y").
control_flow(30,34) :- EqVarD("x",30,"y").
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl NotEqVar(x:symbol,loc:number,y:symbol)
.decl EqVar(x:symbol,loc:number,y:symbol)
.decl LtEq(x:symbol,loc:number,n:number)
.decl Gt(x:symbol,loc:number,n:number)
.decl NotEqVarD(x:symbol,loc:number,y:symbol)
.decl EqVarD(x:symbol,loc:number,y:symbol)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl GtD(x:symbol,loc:number,n:number)
.decl EXITPred(loc:number)
.decl AF_EXITPred_T(interm_state:number,loc:number)
.decl AF_EXITPred_S(loc:number)
.decl AF_EXITPred(loc:number)
.decl AF_EXITPred_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
NotEqVarD(x,loc,n) :- NotEqVar(x,loc,n).
NotEqVarD(x,loc,n) :- NotEqVarD(x,locI,n), control_flow(locI,loc), !NotEqVar(x,loc,n), !EqVar(x,loc,n).
EqVarD(x,loc,n) :- EqVar(x,loc,n).
EqVarD(x,loc,n) :- EqVarD(x,locI,n), control_flow(locI,loc), !EqVar(x,loc,n), !NotEqVar(x,loc,n).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,n), !Gt(x,loc,n).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,n), !LtEq(x,loc,n).
EXITPred(loc) :- Return(_,loc).
AF_EXITPred_T(interm_state,loc) :- AF_EXITPred_T(tempOne,loc), !EXITPred(tempOne), control_flow(tempOne,interm_state).
AF_EXITPred_T(interm_state,loc) :- !EXITPred(loc), control_flow(loc,interm_state).
AF_EXITPred_S(loc) :- !EXITPred(loc), control_flow(loc,tempOne), AF_EXITPred_S(tempOne).
AF_EXITPred_S(loc) :- AF_EXITPred_T(loc,loc).
AF_EXITPred(loc) :- State(loc), !AF_EXITPred_S(loc).
AF_EXITPred_Final(loc) :- Start(loc), AF_EXITPred(loc), !NotTotal(loc).
.output NotEqVar
.output EqVar
.output LtEq
.output Gt
.output Start
.output State
.output flow
.output Return
.output AF_EXITPred_Final(IO=stdout)

.output NotTotal(IO=stdout)

