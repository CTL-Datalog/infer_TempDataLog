/*(Join())@0*/

flow(0,0).
State(0).

/*(Start())@5 · ("y"=1)@6 · ("i"=_)@7 · ("x"=_)@8 · ((["i">10]@9 · ("x"=1)@10 · (([("x"!="y")]@11 · (Return(0))@12) \/ ((["x"="y"]@13 · ("x"="y")@15)^w))) \/ (["i"<=10]@16 · (([("x"!="y")]@17 · (Return(0))@18) \/ ((["x"="y"]@19 · ("x"="y")@21)^w))))*/

flow(5,6).
flow(6,7).
flow(7,8).
flow(12,12).
flow(15,15).
flow(15,13).
flow(18,18).
flow(21,21).
flow(21,19).
Start(5).
State(5).
State(6).
LtEq("i",7,10).
Gt("i",7,10).// delete this fact 
State(7).
NotEqVar("x",8,"y").
EqVar("x",8,"y").// delete this fact 
State(9).
EqVar("x",10,"y").
State(11).
Return(0,12).
State(12).
State(10).
State(13).
EqVar("x",15,"y").
State(15).
State(8).
State(17).
Return(0,18).
State(18).
State(16).
State(19).
EqVar("x",21,"y").
State(21).
control_flow(8,9) :- GtD("i",8,10).
control_flow(9,10) :- GtD("i",8,10).
control_flow(10,11) :- GtD("i",8,10), NotEqVarD("x",10,"y").
control_flow(11,12) :- GtD("i",8,10), NotEqVarD("x",10,"y").
control_flow(10,13) :- GtD("i",8,10), EqVarD("x",10,"y").
control_flow(13,15) :- GtD("i",8,10), EqVarD("x",10,"y").
control_flow(8,16) :- LtEqD("i",8,10).
control_flow(16,17) :- LtEqD("i",8,10), NotEqVarD("x",16,"y").
control_flow(17,18) :- LtEqD("i",8,10), NotEqVarD("x",16,"y").
control_flow(16,19) :- LtEqD("i",8,10), EqVarD("x",16,"y").
control_flow(19,21) :- LtEqD("i",8,10), EqVarD("x",16,"y").
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl NotEqVar(x:symbol,loc:number,y:symbol)
.decl EqVar(x:symbol,loc:number,y:symbol)
.decl Gt(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl EqVarD(x:symbol,loc:number,y:symbol)
.decl NotEqVarD(x:symbol,loc:number,y:symbol)
.decl GtD(x:symbol,loc:number,n:number)
.decl EXITPred(loc:number)
.decl AF_EXITPred_T(interm_state:number,loc:number)
.decl AF_EXITPred_S(loc:number)
.decl AF_EXITPred(loc:number)
.decl AF_EXITPred_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,_), !Gt(x,loc,_).
EqVarD(x,loc,n) :- EqVar(x,loc,n).
EqVarD(x,loc,n) :- EqVarD(x,locI,n), control_flow(locI,loc), !EqVar(x,loc,_), !NotEqVar(x,loc,_).
NotEqVarD(x,loc,n) :- NotEqVar(x,loc,n).
NotEqVarD(x,loc,n) :- NotEqVarD(x,locI,n), control_flow(locI,loc), !NotEqVar(x,loc,_), !EqVar(x,loc,_).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,_), !LtEq(x,loc,_).
EXITPred(loc) :- Return(_,loc).
AF_EXITPred_T(interm_state,loc) :- AF_EXITPred_T(tempOne,loc), !EXITPred(tempOne), control_flow(tempOne,interm_state).
AF_EXITPred_T(interm_state,loc) :- !EXITPred(loc), control_flow(loc,interm_state).
AF_EXITPred_S(loc) :- !EXITPred(loc), control_flow(loc,tempOne), AF_EXITPred_S(tempOne).
AF_EXITPred_S(loc) :- AF_EXITPred_T(loc,loc).
AF_EXITPred(loc) :- State(loc), !AF_EXITPred_S(loc).
AF_EXITPred_Final(loc) :- Start(loc), AF_EXITPred(loc), !NotTotal(loc).
.output LtEq
.output NotEqVar
.output EqVar
.output Gt
.output Start
.output State
.output flow
.output Return
.output AF_EXITPred_Final(IO=stdout)

/* Other information 

//-- Facts for Procedure <__VERIFIER_nondet_int> 

//-- Facts for Procedure <main> 

Flow(14,0). //@11:1-15:5
Flow(10,13). //@24:5-25:1
Flow(8,12). //@22:5-22:12
Flow(12,9). //@22:12-22:12
Flow(12,11). //@22:12-22:12
Flow(11,8). //@22:12-22:5
Flow(9,10). //@22:12-24:5
Flow(5,8). //@19:5-22:5
Flow(3,6). //@19:9-19:9
Flow(3,7). //@19:9-19:9
Flow(7,4). //@19:9-20:9
Flow(6,5). //@19:9-19:5
Flow(4,5). //@20:9-19:5
Flow(2,3). //@17:5-19:9
Flow(1,2). //@16:5-17:5
Flow(0,1). //@15:5-16:5
Stmt_BinaryOperatorStmt(0,Assign,[IStore(&y,1)]). // @15:5
Stmt_BinaryOperatorStmt(1,Assign,[ICall(_fun___VERIFIER_nondet_int,,n$8),IStore(&i,n$8)]). // @16:5
Stmt_BinaryOperatorStmt(2,Assign,[ICall(_fun___VERIFIER_nondet_int,,n$7),IStore(&x,n$7)]). // @17:5
Stmt_BinaryOperatorStmt(4,Assign,[IStore(&x,1)]). // @20:9
PruneNode(6,false,[Prune(!(n$4 > 10), false)]). // @19:9
PruneNode(7,true,[Prune((n$4 > 10), true)]). // @19:9
Stmt_BinaryOperatorStmt(3,GT,[ILoad(&i,n$4)]). // @19:9
Join(5,[]).  // @19:5
PruneNode(9,false,[Prune(!(n$0 == n$1), false)]). // @22:12
PruneNode(11,true,[Prune((n$0 == n$1), true)]). // @22:12
Stmt_BinaryOperatorStmt(12,EQ,[ILoad(&x,n$0),ILoad(&y,n$1)]). // @22:12
Join(8,[]).  // @22:5
Stmt_Return(10,[IStore(&return,0)]). // @24:5
Exit(13).  // @25:1
Start(14). // @11:1
*/

