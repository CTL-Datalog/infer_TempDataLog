/*(Join())@0*/

flow(0,0).
State(0).

/*(Start())@5 · ("y"=1)@6 · ("i"=_)@7 · ("x"=_)@8 · ((["i">10]@9 · ("x"=1)@10 · (([("x"!="y")]@11 · ("y"=5)@12 · (Return(0))@13) \/ (["x"="y"]@14 · (("x"="y")@15)^w))) \/ (["i"<=10]@16 · (([("x"!="y")]@17 · ("y"=5)@18 · (Return(0))@19) \/ (["x"="y"]@20 · (("x"="y")@21)^w))))*/

flow(5,6).
flow(6,7).
flow(7,8).
flow(13,13).
flow(15,15).
flow(19,19).
flow(21,21).
Start(5).
State(5).
State(6).
LtEq("i",7,10).
Gt("i",7,10).// delete this fact 
State(7).
NotEqVar("x",8,"y").
EqVar("x",8,"y").// delete this fact 
State(9).
EqVar("x",10,"y").
State(11).
NotEqVar("x",12,"y").
Eq("y",12,5).
State(12).
Return(0,13).
State(13).
State(10).
State(14).
EqVar("x",15,"y").
State(15).
State(8).
State(17).
Eq("y",18,5).
State(18).
Return(0,19).
State(19).
State(16).
State(20).
EqVar("x",21,"y").
State(21).
control_flow(8,9) :- GtD("i",8,10).
control_flow(9,10) :- GtD("i",8,10).
control_flow(10,11) :- GtD("i",8,10), NotEqVarD("x",10,"y").
control_flow(11,12) :- GtD("i",8,10), NotEqVarD("x",10,"y").
control_flow(12,13) :- GtD("i",8,10), NotEqVarD("x",10,"y").
control_flow(10,14) :- GtD("i",8,10), EqVarD("x",10,"y").
control_flow(14,15) :- GtD("i",8,10), EqVarD("x",10,"y").
control_flow(8,16) :- LtEqD("i",8,10).
control_flow(16,17) :- LtEqD("i",8,10), NotEqVarD("x",16,"y").
control_flow(17,18) :- LtEqD("i",8,10), NotEqVarD("x",16,"y").
control_flow(18,19) :- LtEqD("i",8,10), NotEqVarD("x",16,"y").
control_flow(16,20) :- LtEqD("i",8,10), EqVarD("x",16,"y").
control_flow(20,21) :- LtEqD("i",8,10), EqVarD("x",16,"y").
//AF("y"=5)
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl NotEqVar(x:symbol,loc:number,y:symbol)
.decl EqVar(x:symbol,loc:number,y:symbol)
.decl Gt(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl EqVarD(x:symbol,loc:number,y:symbol)
.decl NotEqVarD(x:symbol,loc:number,y:symbol)
.decl GtD(x:symbol,loc:number,n:number)
.decl y_eq_5(loc:number)
.decl AF_y_eq_5_T(interm_state:number,loc:number)
.decl AF_y_eq_5_S(loc:number)
.decl AF_y_eq_5(loc:number)
.decl AF_y_eq_5_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,_), !NotEq(x,loc,_).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,_), !Gt(x,loc,_).
EqVarD(x,loc,n) :- EqVar(x,loc,n).
EqVarD(x,loc,n) :- EqVarD(x,locI,n), control_flow(locI,loc), !EqVar(x,loc,_), !NotEqVar(x,loc,_).
NotEqVarD(x,loc,n) :- NotEqVar(x,loc,n).
NotEqVarD(x,loc,n) :- NotEqVarD(x,locI,n), control_flow(locI,loc), !NotEqVar(x,loc,_), !EqVar(x,loc,_).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,_), !LtEq(x,loc,_).
y_eq_5(loc) :- State(loc), EqD("y",loc,5).
AF_y_eq_5_T(interm_state,loc) :- AF_y_eq_5_T(tempOne,loc), !y_eq_5(tempOne), control_flow(tempOne,interm_state).
AF_y_eq_5_T(interm_state,loc) :- !y_eq_5(loc), control_flow(loc,interm_state).
AF_y_eq_5_S(loc) :- !y_eq_5(loc), control_flow(loc,tempOne), AF_y_eq_5_S(tempOne).
AF_y_eq_5_S(loc) :- AF_y_eq_5_T(loc,loc).
AF_y_eq_5(loc) :- State(loc), !AF_y_eq_5_S(loc).
AF_y_eq_5_Final(loc) :- Start(loc), AF_y_eq_5(loc), !NotTotal(loc).
.output NotEq
.output LtEq
.output Eq
.output NotEqVar
.output EqVar
.output Gt
.output Start
.output State
.output flow
.output Return
.output AF_y_eq_5_Final(IO=stdout)
