/*𝝐 */


/*(Start())@6 · ("i"=_)@7 · ("x"=_)@8 · ("y"=1)@9 · ((["i">10]@10 · ("i">10)@11 · ("x"=1)@12 · (([("x"!="y")]@13 · (("x"!="y"))@14 · ("y"=5)@15 · (Return(0))@16) \/ (["x"="y"]@17 · ("x"="y")@18 · (("y">="x")@19)^w))) \/ (["i"<=10]@20 · ("i"<=10)@21 · (([("x"!="y")]@22 · (("x"!="y"))@23 · ("y"=5)@24 · (Return(0))@25) \/ (["x"="y"]@26 · ("x"="y")@27 · (("y">="x")@28)^w))))*/

flow(6,7).
flow(7,8).
flow(8,9).
flow(10,11).
flow(11,12).
flow(13,14).
flow(14,15).
flow(15,16).
flow(16,16).
flow(17,18).
flow(18,19).
flow(19,19).
flow(20,21).
flow(22,23).
flow(23,24).
flow(24,25).
flow(25,25).
flow(26,27).
flow(27,28).
flow(28,28).
Start(6).
State(6).
LtEq("i",7,10).
Gt("i",7,10). // delete 
State(7).
NotEqVar("x",8,"y").
EqVar("x",8,"y"). // delete 
State(8).
State(10).
Gt("i",11,10).
State(11).
EqVar("x",12,"y").
State(13).
NotEqVar("x",14,"y").
State(14).
NotEqVar("x",15,"y").
Eq("y",15,5).
State(15).
Return(0,16).
State(16).
State(12).
State(17).
EqVar("x",18,"y").
State(18).
State(19).
State(9).
State(20).
LtEq("i",21,10).
State(22).
NotEqVar("x",23,"y").
State(23).
Eq("y",24,5).
State(24).
Return(0,25).
State(25).
State(21).
State(26).
EqVar("x",27,"y").
State(27).
State(28).
control_flow(9,10) :- GtD("i",9,10).
control_flow(12,13) :- NotEqVarD("x",12,"y").
control_flow(12,17) :- EqVarD("x",12,"y").
control_flow(9,20) :- LtEqD("i",9,10).
control_flow(21,22) :- NotEqVarD("x",21,"y").
control_flow(21,26) :- EqVarD("x",21,"y").
//AF("y"=5)
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl NotEqVar(x:symbol,loc:number,y:symbol)
.decl EqVar(x:symbol,loc:number,y:symbol)
.decl Gt(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl EqVarD(x:symbol,loc:number,y:symbol)
.decl NotEqVarD(x:symbol,loc:number,y:symbol)
.decl GtD(x:symbol,loc:number,n:number)
.decl y_eq_5(loc:number)
.decl AF_y_eq_5_T(interm_state:number,loc:number)
.decl AF_y_eq_5_S(loc:number)
.decl AF_y_eq_5(loc:number)
.decl AF_y_eq_5_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,_), !NotEq(x,loc,_).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,_), !Gt(x,loc,_).
EqVarD(x,loc,n) :- EqVar(x,loc,n).
EqVarD(x,loc,n) :- EqVarD(x,locI,n), control_flow(locI,loc), !EqVar(x,loc,_), !NotEqVar(x,loc,_).
NotEqVarD(x,loc,n) :- NotEqVar(x,loc,n).
NotEqVarD(x,loc,n) :- NotEqVarD(x,locI,n), control_flow(locI,loc), !NotEqVar(x,loc,_), !EqVar(x,loc,_).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,_), !LtEq(x,loc,_).
y_eq_5(loc) :- State(loc), EqD("y",loc,5).
AF_y_eq_5_T(interm_state,loc) :- AF_y_eq_5_T(tempOne,loc), !y_eq_5(tempOne), control_flow(tempOne,interm_state).
AF_y_eq_5_T(interm_state,loc) :- !y_eq_5(loc), control_flow(loc,interm_state).
AF_y_eq_5_S(loc) :- !y_eq_5(loc), control_flow(loc,tempOne), AF_y_eq_5_S(tempOne).
AF_y_eq_5_S(loc) :- AF_y_eq_5_T(loc,loc).
AF_y_eq_5(loc) :- State(loc), !AF_y_eq_5_S(loc).
AF_y_eq_5_Final(loc) :- Start(loc), AF_y_eq_5(loc), !NotTotal(loc).
.output NotEq
.output LtEq
.output Eq
.output NotEqVar
.output EqVar
.output Gt
.output Start
.output State
.output flow
.output Return
.output AF_y_eq_5_Final(IO=stdout)

