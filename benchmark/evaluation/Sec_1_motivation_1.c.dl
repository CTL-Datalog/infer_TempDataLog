/*𝝐 */


/*("i"=_∧Start())@7 · ("x"=_)@8 · ("y"=1)@9 · ((["i">10]@10 · ("i">10)@11 · ("x"=1)@12 · (([("x"!="y")]@13 · (("x"!="y"))@14 · ("y"=5)@15 · (Return(0))@16) \/ (["x"="y"]@17 · ("x"=1)@18 · (("y">="x")@19)^w))) \/ (["i"<=10]@20 · ("i"<=10)@21 · (([("x"!="y")]@22 · (("x"!="y"))@23 · ("y"=5)@24 · (Return(0))@25) \/ (["x"="y"]@26 · ("x"=1)@27 · (("y">="x")@28)^w))))*/

flow(7,8).
flow(8,9).
flow(10,11).
flow(11,12).
flow(13,14).
flow(14,15).
flow(15,16).
flow(16,16).
flow(17,18).
flow(18,19).
flow(19,19).
flow(20,21).
flow(22,23).
flow(23,24).
flow(24,25).
flow(25,25).
flow(26,27).
flow(27,28).
flow(28,28).
LtEq("i",7,10).
Gt("i",7,10).
Start(7).
State(7).
NotEqVar("x",8,"y").
EqVar("x",8,"y").
State(8).
State(10).
Gt("i",11,10).
State(11).
EqVar("x",12,"y").
State(13).
NotEqVar("x",14,"y").
State(14).
NotEqVar("x",15,"y").
Eq("y",15,5).
State(15).
Return(0,16).
State(16).
State(12).
State(17).
EqVar("x",18,"y").
State(18).
State(19).
State(9).
State(20).
LtEq("i",21,10).
State(22).
NotEqVar("x",23,"y").
State(23).
Eq("y",24,5).
State(24).
Return(0,25).
State(25).
State(21).
State(26).
EqVar("x",27,"y").
State(27).
State(28).
control_flow(9,10) :- GtD("i",9,10).
control_flow(12,13) :- NotEqVarD("x",12,"y").
control_flow(12,17) :- EqVarD("x",12,"y").
control_flow(9,20) :- LtEqD("i",9,10).
control_flow(21,22) :- NotEqVarD("x",21,"y").
control_flow(21,26) :- EqVarD("x",21,"y").
//AF("y"=5)
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl NotEqVar(x:symbol,loc:number,y:symbol)
.decl EqVar(x:symbol,loc:number,y:symbol)
.decl Gt(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl EqVarD(x:symbol,loc:number,y:symbol)
.decl NotEqVarD(x:symbol,loc:number,y:symbol)
.decl GtD(x:symbol,loc:number,n:number)
.decl y_eq_5(loc:number)
.decl AF_y_eq_5_T(interm_state:number,loc:number)
.decl AF_y_eq_5_S(loc:number)
.decl AF_y_eq_5(loc:number)
.decl AF_y_eq_5_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,n), !NotEq(x,loc,n).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,n), !Gt(x,loc,n).
EqVarD(x,loc,n) :- EqVar(x,loc,n).
EqVarD(x,loc,n) :- EqVarD(x,locI,n), control_flow(locI,loc), !EqVar(x,loc,n), !NotEqVar(x,loc,n).
NotEqVarD(x,loc,n) :- NotEqVar(x,loc,n).
NotEqVarD(x,loc,n) :- NotEqVarD(x,locI,n), control_flow(locI,loc), !NotEqVar(x,loc,n), !EqVar(x,loc,n).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,n), !LtEq(x,loc,n).
y_eq_5(loc) :- State(loc), EqD("y",loc,5).
AF_y_eq_5_T(interm_state,loc) :- AF_y_eq_5_T(tempOne,loc), !y_eq_5(tempOne), control_flow(tempOne,interm_state).
AF_y_eq_5_T(interm_state,loc) :- !y_eq_5(loc), control_flow(loc,interm_state).
AF_y_eq_5_S(loc) :- !y_eq_5(loc), control_flow(loc,tempOne), AF_y_eq_5_S(tempOne).
AF_y_eq_5_S(loc) :- AF_y_eq_5_T(loc,loc).
AF_y_eq_5(loc) :- State(loc), !AF_y_eq_5_S(loc).
AF_y_eq_5_Final(loc) :- Start(loc), AF_y_eq_5(loc), !NotTotal(loc).
.output NotEq
.output LtEq
.output Eq
.output NotEqVar
.output EqVar
.output Gt
.output Start
.output State
.output flow
.output Return
.output AF_y_eq_5_Final(IO=stdout)

.output NotTotal(IO=stdout)

/* Other information 

//-- Facts for Procedure <__VERIFIER_nondet_int> 

//-- Facts for Procedure <main> 

Flow(15,0). //@11:1-12:5
Flow(13,14). //@26:5-27:1
Flow(10,13). //@25:5-26:5
Flow(8,12). //@22:5-22:12
Flow(12,9). //@22:12-22:12
Flow(12,11). //@22:12-22:12
Flow(11,8). //@22:12-22:5
Flow(9,10). //@22:12-25:5
Flow(5,8). //@19:5-22:5
Flow(3,6). //@19:9-19:9
Flow(3,7). //@19:9-19:9
Flow(7,4). //@19:9-20:9
Flow(6,5). //@19:9-19:5
Flow(4,5). //@20:9-19:5
Flow(2,3). //@14:5-19:9
Flow(1,2). //@13:5-14:5
Flow(0,1). //@12:5-13:5
Stmt_Decl(0,[ICall(_fun___VERIFIER_nondet_int,,n$9),IStore(&i,n$9)]). // @12:5
Stmt_Decl(1,[ICall(_fun___VERIFIER_nondet_int,,n$8),IStore(&x,n$8)]). // @13:5
Stmt_Decl(2,[IStore(&y,1)]). // @14:5
Stmt_BinaryOperatorStmt(4,Assign,[IStore(&x,1)]). // @20:9
PruneNode(6,false,[Prune(!(n$5 > 10), false)]). // @19:9
PruneNode(7,true,[Prune((n$5 > 10), true)]). // @19:9
Stmt_BinaryOperatorStmt(3,GT,[ILoad(&i,n$5)]). // @19:9
Join(5,[]).  // @19:5
PruneNode(9,false,[Prune(!(n$1 == n$2), false)]). // @22:12
PruneNode(11,true,[Prune((n$1 == n$2), true)]). // @22:12
Stmt_BinaryOperatorStmt(12,EQ,[ILoad(&x,n$1),ILoad(&y,n$2)]). // @22:12
Join(8,[]).  // @22:5
Stmt_BinaryOperatorStmt(10,Assign,[IStore(&y,5)]). // @25:5
Stmt_Return(13,[]). // @26:5
Exit(14).  // @27:1
Start(15). // @11:1
*/

