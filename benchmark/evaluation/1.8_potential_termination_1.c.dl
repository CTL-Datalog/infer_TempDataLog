/*(Join())@0*/
/*(Join())@0*/

State(0).

/*(Start())@1 · (y=1)@2 · (i=_)@3 · (x=_)@4 · (([i>10]@6 · (x=1)@7) \/ ([(i<=10)]@15)) · (Join())@8 · ((([x=y]@17)^w) \/ ([(x!=y)]@11)) · ((Return(0))@13)^w*/
/*(Start())@1 · (y=1)@2 · (i=_)@3 · (x=_)@4 · (([i>10]@6 · (x=1)@7) \/ ([(i<=10)]@15)) · (Join())@8 · ((([x=y]@17)^w) \/ ([(x!=y)]@11)) · ((Return(0))@13)^w*/

flow(1,2).
flow(2,3).
flow(3,4).
flow(17,17).
flow(13,13).
Start(1).
Gt("i",1,10).
EqVar("x",1,"y").
LtEq("i",1,10).
NotEqVar("x",1,"y").
State(1).
State(2).
State(3).
State(6).
EqVar("x",7,"y").
State(7).
State(17).
State(8).
State(11).
Return(0,13).
State(13).
State(4).
State(15).
control_flow(4,6) :- GtD("i",4,10).
control_flow(6,7) :- GtD("i",6,10).
control_flow(7,8) :- GtD("i",7,10).
control_flow(8,17) :- EqVarD("x",8,"y").
control_flow(8,11) :- NotEqVarD("x",8,"y").
control_flow(11,13) :- NotEqVarD("x",11,"y").
control_flow(4,15) :- LtEqD("i",4,10).
control_flow(15,8) :- LtEqD("i",15,10).
//AF(EXIT())
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl NotEqVar(x:symbol,loc:number,y:symbol)
.decl LtEq(x:symbol,loc:number,n:number)
.decl EqVar(x:symbol,loc:number,y:symbol)
.decl Gt(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl NotEqVarD(x:symbol,loc:number,y:symbol)
.decl EqVarD(x:symbol,loc:number,y:symbol)
.decl GtD(x:symbol,loc:number,n:number)
.decl EXIT(loc:number)
.decl AF_EXIT_T(interm_state:number,loc:number)
.decl AF_EXIT_S(loc:number)
.decl AF_EXIT(loc:number)
.decl AF_EXIT_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,_), !Gt(x,loc,_).
NotEqVarD(x,loc,n) :- NotEqVar(x,loc,n).
NotEqVarD(x,loc,n) :- NotEqVarD(x,locI,n), control_flow(locI,loc), !NotEqVar(x,loc,_), !EqVar(x,loc,_).
EqVarD(x,loc,n) :- EqVar(x,loc,n).
EqVarD(x,loc,n) :- EqVarD(x,locI,n), control_flow(locI,loc), !EqVar(x,loc,_), !NotEqVar(x,loc,_).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,_), !LtEq(x,loc,_).
EXIT(loc) :- Return(_,loc).
AF_EXIT_T(interm_state,loc) :- AF_EXIT_T(tempOne,loc), !EXIT(tempOne), control_flow(tempOne,interm_state).
AF_EXIT_T(interm_state,loc) :- !EXIT(loc), control_flow(loc,interm_state).
AF_EXIT_S(loc) :- !EXIT(loc), control_flow(loc,tempOne), AF_EXIT_S(tempOne).
AF_EXIT_S(loc) :- AF_EXIT_T(loc,loc).
AF_EXIT(loc) :- State(loc), !AF_EXIT_S(loc).
AF_EXIT_Final(loc) :- Start(loc), AF_EXIT(loc), !NotTotal(loc).
.output NotEqVar
.output LtEq
.output EqVar
.output Gt
.output Start
.output State
.output flow
.output Return
.output AF_EXIT_Final(IO=stdout)

