/*(Start())@0 · ("x"=2)@1 · ((["x">=2]@2 · ("x">=2)@3 · ("y"=1)@4 · (Return(0))@5) \/ (["x"<2]@6 · ("x"<2)@7 · ("y"=0)@8 · (Return(0))@9))*/

flow(0,1).
flow(2,3).
flow(3,4).
flow(4,5).
flow(5,5).
flow(6,7).
flow(7,8).
flow(8,9).
flow(9,9).
Start(0).
State(0).
GtEq("x",1,2).
State(2).
GtEq("x",3,2).
State(3).
Eq("y",4,1).
State(4).
Return(0,5).
State(5).
State(1).
State(6).
Lt("x",7,2).
State(7).
State(8).
Return(0,9).
State(9).
control_flow(1,2) :- GtEqD("x",1,2).
control_flow(1,6) :- LtD("x",1,2).
//AF("y"=1)
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl Return(n0:number,n1:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl Lt(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl GtEq(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl LtD(x:symbol,loc:number,n:number)
.decl GtEqD(x:symbol,loc:number,n:number)
.decl y_eq_1(loc:number)
.decl AF_y_eq_1_T(interm_state:number,loc:number)
.decl AF_y_eq_1_S(loc:number)
.decl AF_y_eq_1(loc:number)
.decl AF_y_eq_1_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,n), !NotEq(x,loc,n).
LtD(x,loc,n) :- Lt(x,loc,n).
LtD(x,loc,n) :- LtD(x,locI,n), control_flow(locI,loc), !Lt(x,loc,n), !GtEq(x,loc,n).
GtEqD(x,loc,n) :- GtEq(x,loc,n).
GtEqD(x,loc,n) :- GtEqD(x,locI,n), control_flow(locI,loc), !GtEq(x,loc,n), !Lt(x,loc,n).
y_eq_1(loc) :- State(loc), EqD("y",loc,1).
AF_y_eq_1_T(interm_state,loc) :- AF_y_eq_1_T(tempOne,loc), !y_eq_1(tempOne), control_flow(tempOne,interm_state).
AF_y_eq_1_T(interm_state,loc) :- !y_eq_1(loc), control_flow(loc,interm_state).
AF_y_eq_1_S(loc) :- !y_eq_1(loc), control_flow(loc,tempOne), AF_y_eq_1_S(tempOne).
AF_y_eq_1_S(loc) :- AF_y_eq_1_T(loc,loc).
AF_y_eq_1(loc) :- State(loc), !AF_y_eq_1_S(loc).
AF_y_eq_1_Final(loc) :- Start(loc), AF_y_eq_1(loc), !NotTotal(loc).
.output NotEq
.output Lt
.output Eq
.output GtEq
.output Start
.output State
.output flow
.output Return
.output AF_y_eq_1_Final(IO=stdout)

.output NotTotal(IO=stdout)

