/*(Join())@30*/

flow(30,30).
State(30).

/*(Start())@31 · (init=0)@32 · (EXIT())@33*/

flow(31,32).
flow(32,33).
flow(33,33).
Start(31).
State(31).
Eq("init",32,0).
State(32).
EXIT(33).
State(33).

/*(Start())@34 · (otime=0)@35 · (EXIT())@36*/

flow(34,35).
flow(35,36).
flow(36,36).
Start(34).
State(34).
State(35).
EXIT(36).
State(36).

/*(Start())@37 · (time=0)@38 · (EXIT())@39*/

flow(37,38).
flow(38,39).
flow(39,39).
Start(37).
State(37).
State(38).
EXIT(39).
State(39).

/*(Start())@41 · ((otime=time)@45 · (time=(otime+1))@46 · (tempIn=tempInRand)@47 · (temp=_)@48 · (([temp>limit]@49 · (chainBroken=1)@50) \/ ([temp<=limit]@51)))^w*/

flow(41,45).
flow(45,46).
flow(46,47).
flow(47,48).
flow(50,50).
flow(51,51).
flow(50,45).
flow(51,45).
Start(41).
GtVar("temp",41,"limit").
LtEqVar("temp",41,"limit").
State(41).
State(45).
State(46).
State(47).
State(49).
State(50).
State(48).
State(51).
control_flow(48,49) :- GtVarD("temp",48,"limit").
control_flow(49,50) :- GtVarD("temp",48,"limit").
control_flow(48,51) :- LtEqVarD("temp",48,"limit").
/*(Start())@52 · (tempDisplay=tempdiff)@53 · (warnLED=warning)@54 · (EXIT())@55*/

flow(52,53).
flow(53,54).
flow(54,55).
flow(55,55).
Start(52).
State(52).
State(53).
State(54).
EXIT(55).
State(55).

/*(Start())@62 · (init=0)@63 · (tempDisplay=0)@64 · (warnLED=1)@65 · (tempIn=0)@66 · (error=0)@67 · (chainBroken=0)@68 · (warnLight=0)@69 · (temp=0)@70 · (limit=8)@71 · (init=1)@72 · ((([limit<10]@78 · [limit>-273]@79 · (limit<10)@80 · (limit>-273)@81 · (limit=_)@82 · [limit<10]@83 · [limit<=-273]@84 · (error=1)@85 · (_fun_display())@86)^w) \/ (([limit<10]@88 · [limit>-273]@89 · (limit<10)@90 · (limit>-273)@91 · (limit=_)@92 · [limit>=10]@93 · (error=1)@94 · (_fun_display())@95)^w))*/

flow(62,63).
flow(63,64).
flow(64,65).
flow(65,66).
flow(66,67).
flow(67,68).
flow(68,69).
flow(69,70).
flow(70,71).
flow(71,72).
flow(86,86).
flow(86,78).
flow(95,95).
flow(95,88).
Start(62).
LtEq("limit",62,-273).
Lt("limit",62,10).
Gt("limit",62,-273).
GtEq("limit",62,10).
State(62).
Eq("init",63,0).
State(63).
State(64).
State(65).
State(66).
State(67).
State(68).
State(69).
State(70).
Lt("limit",71,10).
Gt("limit",71,-273).
State(71).
Eq("init",72,1).
State(78).
State(79).
State(80).
State(81).
State(82).
State(83).
State(84).
State(85).
_fun_display(86).
State(86).
State(72).
State(88).
State(89).
State(90).
State(91).
State(92).
State(93).
State(94).
_fun_display(95).
State(95).
control_flow(72,78) :- LtD("limit",72,10).
control_flow(78,79) :- LtD("limit",72,10), GtD("limit",78,-273).
control_flow(79,80) :- LtD("limit",72,10), GtD("limit",78,-273).
control_flow(80,81) :- LtD("limit",72,10), GtD("limit",78,-273).
control_flow(81,82) :- LtD("limit",72,10), GtD("limit",78,-273).
control_flow(82,83) :- LtD("limit",72,10), GtD("limit",78,-273), LtD("limit",82,10).
control_flow(83,84) :- LtD("limit",72,10), GtD("limit",78,-273), LtD("limit",82,10), LtEqD("limit",83,-273).
control_flow(84,85) :- LtD("limit",72,10), GtD("limit",78,-273), LtD("limit",82,10), LtEqD("limit",83,-273).
control_flow(85,86) :- LtD("limit",72,10), GtD("limit",78,-273), LtD("limit",82,10), LtEqD("limit",83,-273).
control_flow(72,88) :- LtD("limit",72,10).
control_flow(88,89) :- LtD("limit",72,10), GtD("limit",88,-273).
control_flow(89,90) :- LtD("limit",72,10), GtD("limit",88,-273).
control_flow(90,91) :- LtD("limit",72,10), GtD("limit",88,-273).
control_flow(91,92) :- LtD("limit",72,10), GtD("limit",88,-273).
control_flow(92,93) :- LtD("limit",72,10), GtD("limit",88,-273), GtEqD("limit",92,10).
control_flow(93,94) :- LtD("limit",72,10), GtD("limit",88,-273), GtEqD("limit",92,10).
control_flow(94,95) :- LtD("limit",72,10), GtD("limit",88,-273), GtEqD("limit",92,10).
/*(Start())@96 · (([temp<0]@97 · (error=1)@98 · (_fun_display())@99 · (Return(0))@100) \/ ([temp>=0]@101 · (Return(0))@102))*/

flow(100,100).
flow(102,102).
Start(96).
Lt("temp",96,0).
GtEq("temp",96,0).
State(97).
State(98).
_fun_display(99).
State(99).
Return(0,100).
State(100).
State(96).
State(101).
Return(0,102).
State(102).
control_flow(96,97) :- LtD("temp",96,0).
control_flow(97,98) :- LtD("temp",96,0).
control_flow(98,99) :- LtD("temp",96,0).
control_flow(99,100) :- LtD("temp",96,0).
control_flow(96,101) :- GtEqD("temp",96,0).
control_flow(101,102) :- GtEqD("temp",96,0).
//AU("init"=0,AU("init"=1,AG("init"=3)))
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl EXIT(n0:number)
.decl Return(n0:number,n1:number)
.decl _fun_display(n0:number)
.decl coolantControl(n0:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl GtEq(x:symbol,loc:number,n:number)
.decl Gt(x:symbol,loc:number,n:number)
.decl Lt(x:symbol,loc:number,n:number)
.decl LtEq(x:symbol,loc:number,n:number)
.decl LtEqVar(x:symbol,loc:number,y:symbol)
.decl GtVar(x:symbol,loc:number,y:symbol)
.decl Eq(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl GtEqD(x:symbol,loc:number,n:number)
.decl LtEqD(x:symbol,loc:number,n:number)
.decl GtD(x:symbol,loc:number,n:number)
.decl LtD(x:symbol,loc:number,n:number)
.decl LtEqVarD(x:symbol,loc:number,y:symbol)
.decl GtVarD(x:symbol,loc:number,y:symbol)
.decl init_eq_3(loc:number)
.decl NOT_init_eq_3(loc:number)
.decl EF_NOT_init_eq_3(loc:number)
.decl AG_init_eq_3(loc:number)
.decl NOT_AG_init_eq_3(loc:number)
.decl init_eq_1(loc:number)
.decl NOT_init_eq_1(loc:number)
.decl NOT_init_eq_1_AND_NOT_AG_init_eq_3(loc:number)
.decl NOT_AG_init_eq_3_EU_NOT_init_eq_1_AND_NOT_AG_init_eq_3(loc:number)
.decl NOT_NOT_AG_init_eq_3_EU_NOT_init_eq_1_AND_NOT_AG_init_eq_3(loc:number)
.decl AF_AG_init_eq_3_T(interm_state:number,loc:number)
.decl AF_AG_init_eq_3_S(loc:number)
.decl AF_AG_init_eq_3(loc:number)
.decl AF_AG_init_eq_3_AND_NOT_NOT_AG_init_eq_3_EU_NOT_init_eq_1_AND_NOT_AG_init_eq_3(loc:number)
.decl init_eq_1_AU_AG_init_eq_3(loc:number)
.decl NOT_init_eq_1_AU_AG_init_eq_3(loc:number)
.decl init_eq_0(loc:number)
.decl NOT_init_eq_0(loc:number)
.decl NOT_init_eq_0_AND_NOT_init_eq_1_AU_AG_init_eq_3(loc:number)
.decl NOT_init_eq_1_AU_AG_init_eq_3_EU_NOT_init_eq_0_AND_NOT_init_eq_1_AU_AG_init_eq_3(loc:number)
.decl NOT_NOT_init_eq_1_AU_AG_init_eq_3_EU_NOT_init_eq_0_AND_NOT_init_eq_1_AU_AG_init_eq_3(loc:number)
.decl AF_init_eq_1_AU_AG_init_eq_3_T(interm_state:number,loc:number)
.decl AF_init_eq_1_AU_AG_init_eq_3_S(loc:number)
.decl AF_init_eq_1_AU_AG_init_eq_3(loc:number)
.decl AF_init_eq_1_AU_AG_init_eq_3_AND_NOT_NOT_init_eq_1_AU_AG_init_eq_3_EU_NOT_init_eq_0_AND_NOT_init_eq_1_AU_AG_init_eq_3(loc:number)
.decl init_eq_0_AU_init_eq_1_AU_AG_init_eq_3(loc:number)
.decl init_eq_0_AU_init_eq_1_AU_AG_init_eq_3_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,_), !NotEq(x,loc,_).
GtEqD(x,loc,n) :- GtEq(x,loc,n).
GtEqD(x,loc,n) :- GtEqD(x,locI,n), control_flow(locI,loc), !GtEq(x,loc,_), !Lt(x,loc,_).
LtEqD(x,loc,n) :- LtEq(x,loc,n).
LtEqD(x,loc,n) :- LtEqD(x,locI,n), control_flow(locI,loc), !LtEq(x,loc,_), !Gt(x,loc,_).
GtD(x,loc,n) :- Gt(x,loc,n).
GtD(x,loc,n) :- GtD(x,locI,n), control_flow(locI,loc), !Gt(x,loc,_), !LtEq(x,loc,_).
LtD(x,loc,n) :- Lt(x,loc,n).
LtD(x,loc,n) :- LtD(x,locI,n), control_flow(locI,loc), !Lt(x,loc,_), !GtEq(x,loc,_).
LtEqVarD(x,loc,n) :- LtEqVar(x,loc,n).
LtEqVarD(x,loc,n) :- LtEqVarD(x,locI,n), control_flow(locI,loc), !LtEqVar(x,loc,_), !GtVar(x,loc,_).
GtVarD(x,loc,n) :- GtVar(x,loc,n).
GtVarD(x,loc,n) :- GtVarD(x,locI,n), control_flow(locI,loc), !GtVar(x,loc,_), !LtEqVar(x,loc,_).
init_eq_3(loc) :- State(loc), EqD("init",loc,3).
NOT_init_eq_3(loc) :- State(loc), !init_eq_3(loc).
EF_NOT_init_eq_3(loc) :- control_flow(loc,tempOne), EF_NOT_init_eq_3(tempOne).
EF_NOT_init_eq_3(loc) :- NOT_init_eq_3(loc).
AG_init_eq_3(loc) :- State(loc), !EF_NOT_init_eq_3(loc).
NOT_AG_init_eq_3(loc) :- State(loc), !AG_init_eq_3(loc).
init_eq_1(loc) :- State(loc), EqD("init",loc,1).
NOT_init_eq_1(loc) :- State(loc), !init_eq_1(loc).
NOT_init_eq_1_AND_NOT_AG_init_eq_3(loc) :- NOT_init_eq_1(loc), NOT_AG_init_eq_3(loc).
init_eq_3(loc) :- State(loc), EqD("init",loc,3).
NOT_init_eq_3(loc) :- State(loc), !init_eq_3(loc).
EF_NOT_init_eq_3(loc) :- control_flow(loc,tempOne), EF_NOT_init_eq_3(tempOne).
EF_NOT_init_eq_3(loc) :- NOT_init_eq_3(loc).
AG_init_eq_3(loc) :- State(loc), !EF_NOT_init_eq_3(loc).
NOT_AG_init_eq_3(loc) :- State(loc), !AG_init_eq_3(loc).
NOT_AG_init_eq_3_EU_NOT_init_eq_1_AND_NOT_AG_init_eq_3(loc) :- NOT_AG_init_eq_3(loc), control_flow(loc,tempOne), NOT_AG_init_eq_3_EU_NOT_init_eq_1_AND_NOT_AG_init_eq_3(tempOne).
NOT_AG_init_eq_3_EU_NOT_init_eq_1_AND_NOT_AG_init_eq_3(loc) :- NOT_init_eq_1_AND_NOT_AG_init_eq_3(loc).
NOT_NOT_AG_init_eq_3_EU_NOT_init_eq_1_AND_NOT_AG_init_eq_3(loc) :- State(loc), !NOT_AG_init_eq_3_EU_NOT_init_eq_1_AND_NOT_AG_init_eq_3(loc).
init_eq_3(loc) :- State(loc), EqD("init",loc,3).
NOT_init_eq_3(loc) :- State(loc), !init_eq_3(loc).
EF_NOT_init_eq_3(loc) :- control_flow(loc,tempOne), EF_NOT_init_eq_3(tempOne).
EF_NOT_init_eq_3(loc) :- NOT_init_eq_3(loc).
AG_init_eq_3(loc) :- State(loc), !EF_NOT_init_eq_3(loc).
AF_AG_init_eq_3_T(interm_state,loc) :- AF_AG_init_eq_3_T(tempOne,loc), !AG_init_eq_3(tempOne), control_flow(tempOne,interm_state).
AF_AG_init_eq_3_T(interm_state,loc) :- !AG_init_eq_3(loc), control_flow(loc,interm_state).
AF_AG_init_eq_3_S(loc) :- !AG_init_eq_3(loc), control_flow(loc,tempOne), AF_AG_init_eq_3_S(tempOne).
AF_AG_init_eq_3_S(loc) :- AF_AG_init_eq_3_T(loc,loc).
AF_AG_init_eq_3(loc) :- State(loc), !AF_AG_init_eq_3_S(loc).
AF_AG_init_eq_3_AND_NOT_NOT_AG_init_eq_3_EU_NOT_init_eq_1_AND_NOT_AG_init_eq_3(loc) :- AF_AG_init_eq_3(loc), NOT_NOT_AG_init_eq_3_EU_NOT_init_eq_1_AND_NOT_AG_init_eq_3(loc).
init_eq_1_AU_AG_init_eq_3(loc) :- AF_AG_init_eq_3_AND_NOT_NOT_AG_init_eq_3_EU_NOT_init_eq_1_AND_NOT_AG_init_eq_3(loc).
NOT_init_eq_1_AU_AG_init_eq_3(loc) :- State(loc), !init_eq_1_AU_AG_init_eq_3(loc).
init_eq_0(loc) :- State(loc), EqD("init",loc,0).
NOT_init_eq_0(loc) :- State(loc), !init_eq_0(loc).
NOT_init_eq_0_AND_NOT_init_eq_1_AU_AG_init_eq_3(loc) :- NOT_init_eq_0(loc), NOT_init_eq_1_AU_AG_init_eq_3(loc).
init_eq_3(loc) :- State(loc), EqD("init",loc,3).
NOT_init_eq_3(loc) :- State(loc), !init_eq_3(loc).
EF_NOT_init_eq_3(loc) :- control_flow(loc,tempOne), EF_NOT_init_eq_3(tempOne).
EF_NOT_init_eq_3(loc) :- NOT_init_eq_3(loc).
AG_init_eq_3(loc) :- State(loc), !EF_NOT_init_eq_3(loc).
NOT_AG_init_eq_3(loc) :- State(loc), !AG_init_eq_3(loc).
init_eq_1(loc) :- State(loc), EqD("init",loc,1).
NOT_init_eq_1(loc) :- State(loc), !init_eq_1(loc).
NOT_init_eq_1_AND_NOT_AG_init_eq_3(loc) :- NOT_init_eq_1(loc), NOT_AG_init_eq_3(loc).
init_eq_3(loc) :- State(loc), EqD("init",loc,3).
NOT_init_eq_3(loc) :- State(loc), !init_eq_3(loc).
EF_NOT_init_eq_3(loc) :- control_flow(loc,tempOne), EF_NOT_init_eq_3(tempOne).
EF_NOT_init_eq_3(loc) :- NOT_init_eq_3(loc).
AG_init_eq_3(loc) :- State(loc), !EF_NOT_init_eq_3(loc).
NOT_AG_init_eq_3(loc) :- State(loc), !AG_init_eq_3(loc).
NOT_AG_init_eq_3_EU_NOT_init_eq_1_AND_NOT_AG_init_eq_3(loc) :- NOT_AG_init_eq_3(loc), control_flow(loc,tempOne), NOT_AG_init_eq_3_EU_NOT_init_eq_1_AND_NOT_AG_init_eq_3(tempOne).
NOT_AG_init_eq_3_EU_NOT_init_eq_1_AND_NOT_AG_init_eq_3(loc) :- NOT_init_eq_1_AND_NOT_AG_init_eq_3(loc).
NOT_NOT_AG_init_eq_3_EU_NOT_init_eq_1_AND_NOT_AG_init_eq_3(loc) :- State(loc), !NOT_AG_init_eq_3_EU_NOT_init_eq_1_AND_NOT_AG_init_eq_3(loc).
init_eq_3(loc) :- State(loc), EqD("init",loc,3).
NOT_init_eq_3(loc) :- State(loc), !init_eq_3(loc).
EF_NOT_init_eq_3(loc) :- control_flow(loc,tempOne), EF_NOT_init_eq_3(tempOne).
EF_NOT_init_eq_3(loc) :- NOT_init_eq_3(loc).
AG_init_eq_3(loc) :- State(loc), !EF_NOT_init_eq_3(loc).
AF_AG_init_eq_3_T(interm_state,loc) :- AF_AG_init_eq_3_T(tempOne,loc), !AG_init_eq_3(tempOne), control_flow(tempOne,interm_state).
AF_AG_init_eq_3_T(interm_state,loc) :- !AG_init_eq_3(loc), control_flow(loc,interm_state).
AF_AG_init_eq_3_S(loc) :- !AG_init_eq_3(loc), control_flow(loc,tempOne), AF_AG_init_eq_3_S(tempOne).
AF_AG_init_eq_3_S(loc) :- AF_AG_init_eq_3_T(loc,loc).
AF_AG_init_eq_3(loc) :- State(loc), !AF_AG_init_eq_3_S(loc).
AF_AG_init_eq_3_AND_NOT_NOT_AG_init_eq_3_EU_NOT_init_eq_1_AND_NOT_AG_init_eq_3(loc) :- AF_AG_init_eq_3(loc), NOT_NOT_AG_init_eq_3_EU_NOT_init_eq_1_AND_NOT_AG_init_eq_3(loc).
init_eq_1_AU_AG_init_eq_3(loc) :- AF_AG_init_eq_3_AND_NOT_NOT_AG_init_eq_3_EU_NOT_init_eq_1_AND_NOT_AG_init_eq_3(loc).
NOT_init_eq_1_AU_AG_init_eq_3(loc) :- State(loc), !init_eq_1_AU_AG_init_eq_3(loc).
NOT_init_eq_1_AU_AG_init_eq_3_EU_NOT_init_eq_0_AND_NOT_init_eq_1_AU_AG_init_eq_3(loc) :- NOT_init_eq_1_AU_AG_init_eq_3(loc), control_flow(loc,tempOne), NOT_init_eq_1_AU_AG_init_eq_3_EU_NOT_init_eq_0_AND_NOT_init_eq_1_AU_AG_init_eq_3(tempOne).
NOT_init_eq_1_AU_AG_init_eq_3_EU_NOT_init_eq_0_AND_NOT_init_eq_1_AU_AG_init_eq_3(loc) :- NOT_init_eq_0_AND_NOT_init_eq_1_AU_AG_init_eq_3(loc).
NOT_NOT_init_eq_1_AU_AG_init_eq_3_EU_NOT_init_eq_0_AND_NOT_init_eq_1_AU_AG_init_eq_3(loc) :- State(loc), !NOT_init_eq_1_AU_AG_init_eq_3_EU_NOT_init_eq_0_AND_NOT_init_eq_1_AU_AG_init_eq_3(loc).
init_eq_3(loc) :- State(loc), EqD("init",loc,3).
NOT_init_eq_3(loc) :- State(loc), !init_eq_3(loc).
EF_NOT_init_eq_3(loc) :- control_flow(loc,tempOne), EF_NOT_init_eq_3(tempOne).
EF_NOT_init_eq_3(loc) :- NOT_init_eq_3(loc).
AG_init_eq_3(loc) :- State(loc), !EF_NOT_init_eq_3(loc).
NOT_AG_init_eq_3(loc) :- State(loc), !AG_init_eq_3(loc).
init_eq_1(loc) :- State(loc), EqD("init",loc,1).
NOT_init_eq_1(loc) :- State(loc), !init_eq_1(loc).
NOT_init_eq_1_AND_NOT_AG_init_eq_3(loc) :- NOT_init_eq_1(loc), NOT_AG_init_eq_3(loc).
init_eq_3(loc) :- State(loc), EqD("init",loc,3).
NOT_init_eq_3(loc) :- State(loc), !init_eq_3(loc).
EF_NOT_init_eq_3(loc) :- control_flow(loc,tempOne), EF_NOT_init_eq_3(tempOne).
EF_NOT_init_eq_3(loc) :- NOT_init_eq_3(loc).
AG_init_eq_3(loc) :- State(loc), !EF_NOT_init_eq_3(loc).
NOT_AG_init_eq_3(loc) :- State(loc), !AG_init_eq_3(loc).
NOT_AG_init_eq_3_EU_NOT_init_eq_1_AND_NOT_AG_init_eq_3(loc) :- NOT_AG_init_eq_3(loc), control_flow(loc,tempOne), NOT_AG_init_eq_3_EU_NOT_init_eq_1_AND_NOT_AG_init_eq_3(tempOne).
NOT_AG_init_eq_3_EU_NOT_init_eq_1_AND_NOT_AG_init_eq_3(loc) :- NOT_init_eq_1_AND_NOT_AG_init_eq_3(loc).
NOT_NOT_AG_init_eq_3_EU_NOT_init_eq_1_AND_NOT_AG_init_eq_3(loc) :- State(loc), !NOT_AG_init_eq_3_EU_NOT_init_eq_1_AND_NOT_AG_init_eq_3(loc).
init_eq_3(loc) :- State(loc), EqD("init",loc,3).
NOT_init_eq_3(loc) :- State(loc), !init_eq_3(loc).
EF_NOT_init_eq_3(loc) :- control_flow(loc,tempOne), EF_NOT_init_eq_3(tempOne).
EF_NOT_init_eq_3(loc) :- NOT_init_eq_3(loc).
AG_init_eq_3(loc) :- State(loc), !EF_NOT_init_eq_3(loc).
AF_AG_init_eq_3_T(interm_state,loc) :- AF_AG_init_eq_3_T(tempOne,loc), !AG_init_eq_3(tempOne), control_flow(tempOne,interm_state).
AF_AG_init_eq_3_T(interm_state,loc) :- !AG_init_eq_3(loc), control_flow(loc,interm_state).
AF_AG_init_eq_3_S(loc) :- !AG_init_eq_3(loc), control_flow(loc,tempOne), AF_AG_init_eq_3_S(tempOne).
AF_AG_init_eq_3_S(loc) :- AF_AG_init_eq_3_T(loc,loc).
AF_AG_init_eq_3(loc) :- State(loc), !AF_AG_init_eq_3_S(loc).
AF_AG_init_eq_3_AND_NOT_NOT_AG_init_eq_3_EU_NOT_init_eq_1_AND_NOT_AG_init_eq_3(loc) :- AF_AG_init_eq_3(loc), NOT_NOT_AG_init_eq_3_EU_NOT_init_eq_1_AND_NOT_AG_init_eq_3(loc).
init_eq_1_AU_AG_init_eq_3(loc) :- AF_AG_init_eq_3_AND_NOT_NOT_AG_init_eq_3_EU_NOT_init_eq_1_AND_NOT_AG_init_eq_3(loc).
AF_init_eq_1_AU_AG_init_eq_3_T(interm_state,loc) :- AF_init_eq_1_AU_AG_init_eq_3_T(tempOne,loc), !init_eq_1_AU_AG_init_eq_3(tempOne), control_flow(tempOne,interm_state).
AF_init_eq_1_AU_AG_init_eq_3_T(interm_state,loc) :- !init_eq_1_AU_AG_init_eq_3(loc), control_flow(loc,interm_state).
AF_init_eq_1_AU_AG_init_eq_3_S(loc) :- !init_eq_1_AU_AG_init_eq_3(loc), control_flow(loc,tempOne), AF_init_eq_1_AU_AG_init_eq_3_S(tempOne).
AF_init_eq_1_AU_AG_init_eq_3_S(loc) :- AF_init_eq_1_AU_AG_init_eq_3_T(loc,loc).
AF_init_eq_1_AU_AG_init_eq_3(loc) :- State(loc), !AF_init_eq_1_AU_AG_init_eq_3_S(loc).
AF_init_eq_1_AU_AG_init_eq_3_AND_NOT_NOT_init_eq_1_AU_AG_init_eq_3_EU_NOT_init_eq_0_AND_NOT_init_eq_1_AU_AG_init_eq_3(loc) :- AF_init_eq_1_AU_AG_init_eq_3(loc), NOT_NOT_init_eq_1_AU_AG_init_eq_3_EU_NOT_init_eq_0_AND_NOT_init_eq_1_AU_AG_init_eq_3(loc).
init_eq_0_AU_init_eq_1_AU_AG_init_eq_3(loc) :- AF_init_eq_1_AU_AG_init_eq_3_AND_NOT_NOT_init_eq_1_AU_AG_init_eq_3_EU_NOT_init_eq_0_AND_NOT_init_eq_1_AU_AG_init_eq_3(loc).
init_eq_0_AU_init_eq_1_AU_AG_init_eq_3_Final(loc) :- Start(loc), init_eq_0_AU_init_eq_1_AU_AG_init_eq_3(loc), !NotTotal(loc).
.output NotEq
.output GtEq
.output Gt
.output Lt
.output LtEq
.output LtEqVar
.output GtVar
.output Eq
.output Start
.output State
.output flow
.output EXIT
.output Return
.output _fun_display
.output coolantControl
.output init_eq_0_AU_init_eq_1_AU_AG_init_eq_3_Final(IO=stdout)

/* Other information 

//-- Facts for Procedure <__VERIFIER_nondet_int> 

//-- Facts for Procedure <__infer_globals_initializer_init> 

Flow(2,0). //@9:1-9:1
Flow(0,1). //@9:1-10:53
Stmt_Decl(0,[IStore(&#GB<benchmark/evaluation/p5_3.9_coolant_basis_5_safe_cheat.c|ice>$init,0)]). // @9:1
Exit(1).  // @10:53
Start(2). // @9:1
//-- Facts for Procedure <__infer_globals_initializer_otime> 

Flow(2,0). //@9:1-9:1
Flow(0,1). //@9:1-10:26
Stmt_Decl(0,[IStore(&#GB<benchmark/evaluation/p5_3.9_coolant_basis_5_safe_cheat.c|ice>$otime,0)]). // @9:1
Exit(1).  // @10:26
Start(2). // @9:1
//-- Facts for Procedure <__infer_globals_initializer_time> 

Flow(2,0). //@9:1-9:1
Flow(0,1). //@9:1-10:36
Stmt_Decl(0,[IStore(&#GB<benchmark/evaluation/p5_3.9_coolant_basis_5_safe_cheat.c|ice>$time,0)]). // @9:1
Exit(1).  // @10:36
Start(2). // @9:1
//-- Facts for Procedure <coolantControl> 

Flow(2,0). //@39:1-41:2
Flow(0,12). //@41:2-41:8
Flow(0,13). //@41:2-41:8
Flow(13,3). //@41:8-43:3
Flow(12,1). //@41:8-52:1
Flow(9,0). //@47:3-41:2
Flow(7,10). //@47:6-47:6
Flow(7,11). //@47:6-47:6
Flow(11,8). //@47:6-49:4
Flow(10,9). //@47:6-47:3
Flow(8,9). //@49:4-47:3
Flow(6,7). //@46:3-47:6
Flow(5,6). //@45:3-46:3
Flow(4,5). //@44:3-45:3
Flow(3,4). //@43:3-44:3
Stmt_BinaryOperatorStmt(3,Assign,[ILoad(&#GB<benchmark/evaluation/p5_3.9_coolant_basis_5_safe_cheat.c|ice>$time,n$8),IStore(&#GB<benchmark/evaluation/p5_3.9_coolant_basis_5_safe_cheat.c|ice>$otime,n$8)]). // @43:3
Stmt_BinaryOperatorStmt(4,Assign,[ILoad(&#GB<benchmark/evaluation/p5_3.9_coolant_basis_5_safe_cheat.c|ice>$otime,n$7),IStore(&#GB<benchmark/evaluation/p5_3.9_coolant_basis_5_safe_cheat.c|ice>$time,(n$7 + 1))]). // @44:3
Stmt_BinaryOperatorStmt(5,Assign,[ILoad(&#GB<benchmark/evaluation/p5_3.9_coolant_basis_5_safe_cheat.c>$tempInRand,n$6),IStore(&#GB<benchmark/evaluation/p5_3.9_coolant_basis_5_safe_cheat.c>$tempIn,n$6)]). // @45:3
Stmt_BinaryOperatorStmt(6,Assign,[ILoad(&#GB<benchmark/evaluation/p5_3.9_coolant_basis_5_safe_cheat.c>$tempIn,n$4),ICall(_fun_vinToCels,n$4,n$5),IStore(&#GB<benchmark/evaluation/p5_3.9_coolant_basis_5_safe_cheat.c>$temp,n$5)]). // @46:3
Stmt_BinaryOperatorStmt(8,Assign,[IStore(&#GB<benchmark/evaluation/p5_3.9_coolant_basis_5_safe_cheat.c>$chainBroken,1)]). // @49:4
PruneNode(10,false,[Prune(!(n$0 > n$1), false)]). // @47:6
PruneNode(11,true,[Prune((n$0 > n$1), true)]). // @47:6
Stmt_BinaryOperatorStmt(7,GT,[ILoad(&#GB<benchmark/evaluation/p5_3.9_coolant_basis_5_safe_cheat.c>$temp,n$0),ILoad(&#GB<benchmark/evaluation/p5_3.9_coolant_basis_5_safe_cheat.c>$limit,n$1)]). // @47:6
Join(9,[]).  // @47:3
PruneNode(12,false,[Prune(!1, false)]). // @41:8
PruneNode(13,true,[Prune(1, true)]). // @41:8
Join(0,[]).  // @41:2
Exit(1).  // @52:1
Start(2). // @39:1
//-- Facts for Procedure <display> 

Flow(2,13). //@23:1-25:2
Flow(0,1). //@26:2-27:1
Flow(13,0). //@25:2-26:2
Stmt_BinaryOperatorStmt(13,Assign,[ILoad(&tempdiff,n$1),IStore(&#GB<benchmark/evaluation/p5_3.9_coolant_basis_5_safe_cheat.c>$tempDisplay,n$1)]). // @25:2
Stmt_BinaryOperatorStmt(0,Assign,[ILoad(&warning,n$0),IStore(&#GB<benchmark/evaluation/p5_3.9_coolant_basis_5_safe_cheat.c>$warnLED,n$0)]). // @26:2
Exit(1).  // @27:1
Start(2). // @23:1
//-- Facts for Procedure <main> 

Flow(2,14). //@54:1-56:5
Flow(0,1). //@82:2-83:1
Flow(13,0). //@81:2-82:2
Flow(12,7). //@67:2-67:8
Flow(12,9). //@67:2-67:8
Flow(9,24). //@67:8-69:3
Flow(7,13). //@67:8-81:2
Flow(11,12). //@70:3-67:2
Flow(10,6). //@70:6-70:6
Flow(10,8). //@70:6-70:6
Flow(8,5). //@70:6-70:20
Flow(6,25). //@70:6-76:4
Flow(5,3). //@70:20-70:20
Flow(5,4). //@70:20-70:20
Flow(4,27). //@70:20-72:4
Flow(3,25). //@70:20-76:4
Flow(28,13). //@73:4-81:2
Flow(27,28). //@72:4-73:4
Flow(26,11). //@77:4-70:3
Flow(25,26). //@76:4-77:4
Flow(24,10). //@69:3-70:6
Flow(23,12). //@65:5-67:2
Flow(22,23). //@64:5-65:5
Flow(21,22). //@63:5-64:5
Flow(20,21). //@62:5-63:5
Flow(19,20). //@61:5-62:5
Flow(18,19). //@60:5-61:5
Flow(17,18). //@59:5-60:5
Flow(16,17). //@58:5-59:5
Flow(15,16). //@57:5-58:5
Flow(14,15). //@56:5-57:5
Stmt_BinaryOperatorStmt(14,Assign,[IStore(&#GB<benchmark/evaluation/p5_3.9_coolant_basis_5_safe_cheat.c|ice>$init,0)]). // @56:5
Stmt_BinaryOperatorStmt(15,Assign,[IStore(&#GB<benchmark/evaluation/p5_3.9_coolant_basis_5_safe_cheat.c>$tempDisplay,0)]). // @57:5
Stmt_BinaryOperatorStmt(16,Assign,[IStore(&#GB<benchmark/evaluation/p5_3.9_coolant_basis_5_safe_cheat.c>$warnLED,1)]). // @58:5
Stmt_BinaryOperatorStmt(17,Assign,[IStore(&#GB<benchmark/evaluation/p5_3.9_coolant_basis_5_safe_cheat.c>$tempIn,0)]). // @59:5
Stmt_BinaryOperatorStmt(18,Assign,[IStore(&#GB<benchmark/evaluation/p5_3.9_coolant_basis_5_safe_cheat.c>$error,0)]). // @60:5
Stmt_BinaryOperatorStmt(19,Assign,[IStore(&#GB<benchmark/evaluation/p5_3.9_coolant_basis_5_safe_cheat.c>$chainBroken,0)]). // @61:5
Stmt_BinaryOperatorStmt(20,Assign,[IStore(&#GB<benchmark/evaluation/p5_3.9_coolant_basis_5_safe_cheat.c>$warnLight,0)]). // @62:5
Stmt_BinaryOperatorStmt(21,Assign,[IStore(&#GB<benchmark/evaluation/p5_3.9_coolant_basis_5_safe_cheat.c>$temp,0)]). // @63:5
Stmt_BinaryOperatorStmt(22,Assign,[IStore(&#GB<benchmark/evaluation/p5_3.9_coolant_basis_5_safe_cheat.c>$limit,8)]). // @64:5
Stmt_BinaryOperatorStmt(23,Assign,[IStore(&#GB<benchmark/evaluation/p5_3.9_coolant_basis_5_safe_cheat.c|ice>$init,1)]). // @65:5
Stmt_Decl(24,[ICall(_fun___VERIFIER_nondet_int,,n$9),IStore(&limit,n$9)]). // @69:3
Stmt_BinaryOperatorStmt(25,Assign,[IStore(&#GB<benchmark/evaluation/p5_3.9_coolant_basis_5_safe_cheat.c>$error,1)]). // @76:4
Stmt_Call(26,_fun_display,[ILoad(&#GB<benchmark/evaluation/p5_3.9_coolant_basis_5_safe_cheat.c>$error,n$6),ICall(_fun_display,0,n$6,n$7)]). // @77:4
Stmt_BinaryOperatorStmt(27,Assign,[IStore(&#GB<benchmark/evaluation/p5_3.9_coolant_basis_5_safe_cheat.c>$error,0)]). // @72:4
Stmt_Call(28,_fun_display,[ILoad(&#GB<benchmark/evaluation/p5_3.9_coolant_basis_5_safe_cheat.c>$error,n$4),ICall(_fun_display,0,n$4,n$5)]). // @73:4
PruneNode(3,false,[Prune(!(n$2 > -273), false)]). // @70:20
PruneNode(4,true,[Prune((n$2 > -273), true)]). // @70:20
Stmt_BinaryOperatorStmt(5,GT,[ILoad(&limit,n$2)]). // @70:20
PruneNode(6,false,[Prune(!(n$1 < 10), false)]). // @70:6
PruneNode(8,true,[Prune((n$1 < 10), true)]). // @70:6
Stmt_BinaryOperatorStmt(10,LT,[ILoad(&limit,n$1)]). // @70:6
Join(11,[]).  // @70:3
PruneNode(7,false,[Prune(!1, false)]). // @67:8
PruneNode(9,true,[Prune(1, true)]). // @67:8
Join(12,[]).  // @67:2
Stmt_BinaryOperatorStmt(13,Assign,[IStore(&#GB<benchmark/evaluation/p5_3.9_coolant_basis_5_safe_cheat.c|ice>$init,3)]). // @81:2
Stmt_Call(0,_fun_coolantControl,[ICall(_fun_coolantControl,,n$0)]). // @82:2
Exit(1).  // @83:1
Start(2). // @54:1
//-- Facts for Procedure <vinToCels> 

Flow(2,9). //@29:1-31:6
Flow(0,13). //@36:2-36:2
Flow(13,1). //@36:2-37:1
Flow(12,0). //@31:2-36:2
Flow(9,11). //@31:6-31:6
Flow(9,7). //@31:6-31:6
Flow(7,8). //@31:6-33:3
Flow(11,12). //@31:6-31:2
Flow(10,12). //@34:3-31:2
Flow(8,10). //@33:3-34:3
Stmt_BinaryOperatorStmt(8,Assign,[IStore(&#GB<benchmark/evaluation/p5_3.9_coolant_basis_5_safe_cheat.c>$error,1)]). // @33:3
Stmt_Call(10,_fun_display,[ILoad(&kelvin,n$2),ILoad(&#GB<benchmark/evaluation/p5_3.9_coolant_basis_5_safe_cheat.c>$error,n$3),ICall(_fun_display,(n$2 - 273),n$3,n$4)]). // @34:3
PruneNode(11,false,[Prune(!(n$1 < 0), false)]). // @31:6
PruneNode(7,true,[Prune((n$1 < 0), true)]). // @31:6
Stmt_BinaryOperatorStmt(9,LT,[ILoad(&#GB<benchmark/evaluation/p5_3.9_coolant_basis_5_safe_cheat.c>$temp,n$1)]). // @31:6
Join(12,[]).  // @31:2
Stmt_Return(13,[IStore(&return,(n$0 - 273))]). // @36:2
Stmt_Return(0,[ILoad(&kelvin,n$0)]). // @36:2
Exit(1).  // @37:1
Start(2). // @29:1
*/

