/*(Start())@1 · (((("t"=1)@4 · ("i"=("i"+1))@5) \/ (("t"=0)@6 · ("i"=("i"+1))@7)))^w*/

flow(1,4).
flow(4,5).
flow(5,5).
flow(1,6).
flow(6,7).
flow(7,7).
flow(5,4).
flow(5,6).
flow(7,4).
flow(7,6).
Start(1).
State(4).
State(5).
State(1).
Eq("t",6,0).
State(6).
State(7).

//AG((AF("t"=0) /\ AF("t"=0)))
.decl Start(x:number)
.decl State(x:number)
.decl flow(x:number,y:number)
.decl control_flow(x:number,y:number)
.decl transFlow(x:number,y:number)
.decl NotTotal(loc:number)
.decl NotEq(x:symbol,loc:number,n:number)
.decl Eq(x:symbol,loc:number,n:number)
.decl EqD(x:symbol,loc:number,n:number)
.decl t_eq_0(loc:number)
.decl AF_t_eq_0_T(interm_state:number,loc:number)
.decl AF_t_eq_0_S(loc:number)
.decl AF_t_eq_0(loc:number)
.decl AF_t_eq_0_AND_AF_t_eq_0(loc:number)
.decl NOT_AF_t_eq_0_AND_AF_t_eq_0(loc:number)
.decl EF_NOT_AF_t_eq_0_AND_AF_t_eq_0(loc:number)
.decl AG_AF_t_eq_0_AND_AF_t_eq_0(loc:number)
.decl AG_AF_t_eq_0_AND_AF_t_eq_0_Final(loc:number)transFlow(x,y) :- control_flow(x,y).
transFlow(x,z) :- control_flow(x,y), transFlow(y,z).
NotTotal(loc) :- State(loc), !control_flow(loc,_).
NotTotal(loc) :- NotTotal(locI), control_flow(loc,locI).
control_flow(x,y) :- flow(x,y).
EqD(x,loc,n) :- Eq(x,loc,n).
EqD(x,loc,n) :- EqD(x,locI,n), control_flow(locI,loc), !Eq(x,loc,n), !NotEq(x,loc,n).
t_eq_0(loc) :- State(loc), EqD("t",loc,0).
AF_t_eq_0_T(interm_state,loc) :- AF_t_eq_0_T(tempOne,loc), !t_eq_0(tempOne), control_flow(tempOne,interm_state).
AF_t_eq_0_T(interm_state,loc) :- !t_eq_0(loc), control_flow(loc,interm_state).
AF_t_eq_0_S(loc) :- !t_eq_0(loc), control_flow(loc,tempOne), AF_t_eq_0_S(tempOne).
AF_t_eq_0_S(loc) :- AF_t_eq_0_T(loc,loc).
AF_t_eq_0(loc) :- State(loc), !AF_t_eq_0_S(loc).
t_eq_0(loc) :- State(loc), EqD("t",loc,0).
AF_t_eq_0_T(interm_state,loc) :- AF_t_eq_0_T(tempOne,loc), !t_eq_0(tempOne), control_flow(tempOne,interm_state).
AF_t_eq_0_T(interm_state,loc) :- !t_eq_0(loc), control_flow(loc,interm_state).
AF_t_eq_0_S(loc) :- !t_eq_0(loc), control_flow(loc,tempOne), AF_t_eq_0_S(tempOne).
AF_t_eq_0_S(loc) :- AF_t_eq_0_T(loc,loc).
AF_t_eq_0(loc) :- State(loc), !AF_t_eq_0_S(loc).
AF_t_eq_0_AND_AF_t_eq_0(loc) :- AF_t_eq_0(loc), AF_t_eq_0(loc).
NOT_AF_t_eq_0_AND_AF_t_eq_0(loc) :- State(loc), !AF_t_eq_0_AND_AF_t_eq_0(loc).
EF_NOT_AF_t_eq_0_AND_AF_t_eq_0(loc) :- control_flow(loc,tempOne), EF_NOT_AF_t_eq_0_AND_AF_t_eq_0(tempOne).
EF_NOT_AF_t_eq_0_AND_AF_t_eq_0(loc) :- NOT_AF_t_eq_0_AND_AF_t_eq_0(loc).
AG_AF_t_eq_0_AND_AF_t_eq_0(loc) :- State(loc), !EF_NOT_AF_t_eq_0_AND_AF_t_eq_0(loc).
AG_AF_t_eq_0_AND_AF_t_eq_0_Final(loc) :- Start(loc), AG_AF_t_eq_0_AND_AF_t_eq_0(loc), !NotTotal(loc).
.output NotEq
.output Eq
.output Start
.output State
.output flow
.output AG_AF_t_eq_0_AND_AF_t_eq_0_Final(IO=stdout)

.output NotTotal(IO=stdout)

